{"version":3,"names":["InputType","formInputCss","BsFormInput","this","focus","focused","inputEl","undefined","placeholderInputTypes","includes","type","showPicker","focusout","e","value","target","formFieldRef","getValidator","Email","ValidatorNames","isEmpty","min","max","charInputTypes","name","Length","options","MinMax","Text","Password","Tel","Textarea","Date","DateTime","Time","validateValue","newValue","isBlank","filled","render","minMaxArg","minlength","maxlength","h","Host","ref","el","hidden","invalid","required","invalidMessage","requiredMessage","label","icon","validator","onClick","rows","slot","class","resizeable","id","onFocus","onFocusout","Object","assign","htmlFor","title"],"sources":["./src/components/molecules/form-input/form-input.types.ts","./src/components/molecules/form-input/form-input.scss?tag=bs-form-input&encapsulation=shadow","./src/components/molecules/form-input/form-input.tsx"],"sourcesContent":["export enum InputType {\n  Text = 'text',\n  Email = 'email',\n  Number = 'number',\n  Textarea = 'textarea',\n  Tel = 'tel',\n  Date = 'date',\n  Time = 'time',\n  DateTime = 'datetime-local',\n  Password = 'password',\n  Hidden = 'hidden',\n}\n",":host {\n  @include reset-host;\n}\n\n:host .form-input {\n  width: 100%;\n  min-height: rem(48);\n  padding: rem(24) rem(24) 0;\n  resize: none;\n  border: 0;\n  outline: none;\n\n  &.is-resizeable {\n    resize: vertical;\n  }\n}\n\ninput:-webkit-autofill,\ninput:-webkit-autofill:focus {\n  transition:\n    background-color 0s 600000s,\n    color 0s 600000s;\n}\n\ninput::-webkit-inner-spin-button,\ninput::-webkit-calendar-picker-indicator {\n  display: none;\n  appearance: none;\n}\n","import { Component, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { isEmpty } from '@springbokagency/stencil-base';\nimport { IconName } from '../../../components';\nimport { ValidatorEntry, ValidatorNames } from '../../../validators/validators.types';\nimport { InputType } from './form-input.types';\n\n/**\n * The form input component.\n */\n@Component({\n  tag: 'bs-form-input',\n  styleUrl: 'form-input.scss',\n  shadow: true,\n})\nexport class BsFormInput {\n  private formFieldRef: HTMLBsFormFieldElement;\n\n  /**\n   * Wether or not the input field is filled\n   */\n  @State() filled: boolean = false;\n\n  /**\n   * Wether or not the input field is focused\n   */\n  @State() focused: boolean = false;\n\n  /**\n   * Wether or not the input field is invalid\n   */\n  @State() invalid: boolean = false;\n\n  /**\n   * The unique name to identify the form element\n   */\n  @Prop() name!: string;\n\n  /**\n   * The unique name to identify the form element\n   */\n  @Prop() type: InputType = InputType.Text;\n\n  /**\n   * The label describing the form field\n   */\n  @Prop() label!: string;\n\n  /**\n   * The value of the form field\n   */\n  @Prop() value?: string = '';\n\n  @Watch('value')\n  validateValue(newValue: string) {\n    const isBlank = typeof newValue !== 'string' || newValue === '';\n\n    this.filled = !isBlank;\n  }\n\n  /**\n   * Wether or not the input field is required\n   */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Wether or not the input field is required\n   */\n  @Prop() min?: string;\n\n  /**\n   * Wether or not the input field is required\n   */\n  @Prop() max?: string;\n\n  /**\n   * The error message to be displayed when the required field remains empty\n   */\n  @Prop() requiredMessage: string;\n\n  /**\n   * The error message to be displayed when the field has an invalid input\n   */\n  @Prop() invalidMessage?: string;\n\n  /**\n   * The icon to be displayed on the right hand side of the form field\n   */\n  @Prop() icon?: IconName;\n\n  /**\n   * The default amount of rows the textarea has\n   */\n  @Prop() rows?: number;\n\n  /**\n   * Wether or not the textarea is resizeable by the user\n   */\n  @Prop() resizeable?: boolean;\n\n  private inputEl: HTMLInputElement;\n\n  private focus = () => {\n    this.focused = true;\n\n    if (this.inputEl !== undefined && this.placeholderInputTypes.includes(this.type)) {\n      this.inputEl.showPicker();\n    }\n  };\n\n  private focusout = (e: FocusEvent) => {\n    this.value = (e.target as HTMLInputElement | HTMLTextAreaElement).value;\n    this.formFieldRef.value = this.value;\n    this.focused = false;\n  };\n\n  private getValidator = (): string | ValidatorEntry => {\n    if (this.type === InputType.Email) {\n      return ValidatorNames.Email;\n    }\n\n    if (!isEmpty(this.min) || !isEmpty(this.max)) {\n      if (this.charInputTypes.includes(this.type as InputType)) {\n        return { name: ValidatorNames.Length, options: { min: this.min, max: this.max } };\n      }\n\n      return { name: ValidatorNames.MinMax, options: { min: this.min, max: this.max } };\n    }\n\n    return this.type;\n  };\n\n  private charInputTypes = [\n    InputType.Text,\n    InputType.Email,\n    InputType.Password,\n    InputType.Tel,\n    InputType.Textarea,\n  ];\n\n  private placeholderInputTypes = [InputType.Date, InputType.DateTime, InputType.Time];\n\n  render() {\n    const minMaxArg = this.charInputTypes.includes(this.type as InputType)\n      ? { minlength: this.min, maxlength: this.max }\n      : { min: this.min, max: this.max };\n\n    return (\n      <Host>\n        <bs-form-field\n          ref={(el) => {\n            this.formFieldRef = el;\n          }}\n          value={this.value}\n          name={this.name}\n          hidden={this.type === 'hidden'}\n          focused={this.placeholderInputTypes.includes(this.type) ? true : this.focused}\n          filled={this.filled}\n          invalid={this.invalid}\n          required={this.required}\n          invalidMessage={this.invalidMessage}\n          requiredMessage={this.requiredMessage}\n          label={this.label}\n          icon={this.icon}\n          validator={this.getValidator()}\n          onClick={this.focus}\n        >\n          {this.type === 'textarea' ? (\n            <textarea\n              rows={this.rows}\n              slot=\"form-element\"\n              class={{ 'form-input': true, 'is-resizeable': this.resizeable }}\n              required={this.required}\n              id={this.name}\n              minlength={this.min}\n              maxlength={this.max}\n              value={this.value}\n              name={this.name}\n              onFocus={this.focus}\n              onFocusout={this.focusout}\n            ></textarea>\n          ) : (\n            <input\n              ref={(el) => {\n                this.inputEl = el;\n              }}\n              slot=\"form-element\"\n              class=\"form-input\"\n              required={this.required}\n              id={this.name}\n              type={this.type}\n              {...minMaxArg}\n              value={this.value}\n              name={this.name}\n              onFocus={this.focus}\n              onFocusout={this.focusout}\n            />\n          )}\n          <label slot=\"form-label\" class=\"form-label\" htmlFor={this.name} title={this.label}>\n            {this.label}\n            {this.required ? <span aria-hidden=\"true\">&nbsp;*</span> : ''}\n          </label>\n        </bs-form-field>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}