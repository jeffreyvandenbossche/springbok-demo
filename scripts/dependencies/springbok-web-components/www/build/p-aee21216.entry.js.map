{"version":3,"names":["formRadioButtonCss","BsFormRadioButton","this","handleOnChange","e","el","target","checked","value","formFieldRef","parsedOptions","parseIfString","options","componentDidLoad","forEach","item","selected","render","h","Host","class","label","required","isEmpty","ref","name","invalid","requiredMessage","border","map","radio","index","slot","id","type","disabled","onChange","htmlFor","title","text","__decorate","Memoize"],"sources":["./src/components/molecules/form-radio-button/form-radio-button.scss?tag=bs-form-radio-button&encapsulation=shadow","./src/components/molecules/form-radio-button/form-radio-button.tsx"],"sourcesContent":[":host {\n  @include reset-host;\n}\n\n:host .form-fieldset {\n  border: 0;\n}\n\n:host .form-legend {\n  margin-bottom: 0.5rem;\n}\n\n:host .form-group {\n  display: flex;\n  margin-bottom: 0.5rem;\n}\n\n:host .form-input {\n  width: rem(22);\n  height: rem(22);\n  padding: 1px;\n  border: 1px solid $gray-500;\n  border-radius: 4px;\n\n  + .form-label {\n    @include font(label);\n    top: 0;\n    margin-right: rem(10);\n    margin-left: rem(10);\n    line-height: rem(22);\n  }\n\n  &:focus {\n    outline: 1px solid $gray-400;\n  }\n}\n","import { Component, Host, Prop, State, h } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { RadioButtonItem } from './form-radio-button.types';\n\n/**\n * The form radio component.\n */\n@Component({\n  tag: 'bs-form-radio-button',\n  styleUrl: 'form-radio-button.scss',\n  shadow: true,\n})\nexport class BsFormRadioButton {\n  private formFieldRef: HTMLBsFormFieldElement;\n\n  /**\n   * State\n   */\n\n  @State() invalid: boolean = false;\n\n  @State() focused: boolean = false;\n\n  @State() value: string;\n\n  /**\n   * The unique name to identify the form element\n   */\n  @Prop() name!: string;\n\n  /**\n   * The error message to be displayed when the required field remains empty\n   */\n  @Prop() requiredMessage: string;\n\n  /**\n   * Wether or not the checkbox is required\n   */\n  @Prop() required?: boolean = true;\n\n  /**\n   * The label displayed after the checkbox\n   */\n  @Prop() label?: string = '';\n\n  /**\n   * A list of values for each radio button\n   */\n  @Prop() options: RadioButtonItem[] | string;\n\n  @Memoize('options')\n  get parsedOptions(): RadioButtonItem[] {\n    return parseIfString(this.options);\n  }\n\n  /**\n   * Methods\n   */\n\n  private handleOnChange = (e: PointerEvent) => {\n    const el = e.target as HTMLInputElement;\n\n    if (el.checked) {\n      this.value = el.value;\n      this.formFieldRef.value = this.value;\n    }\n  };\n\n  componentDidLoad() {\n    this.parsedOptions.forEach((item) => {\n      if (item.selected) {\n        this.value = item.value;\n        this.formFieldRef.value = this.value;\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Host>\n        <fieldset class=\"form-fieldset\">\n          <legend class=\"form-legend\">\n            {this.label}\n            {this.required && !isEmpty(this.label) ? <span aria-hidden=\"true\">&nbsp;*</span> : ''}\n          </legend>\n          <bs-form-field\n            ref={(el) => {\n              this.formFieldRef = el;\n            }}\n            value={this.value}\n            name={this.name}\n            invalid={this.invalid}\n            required={this.required}\n            requiredMessage={this.requiredMessage}\n            label={this.label}\n            border={false}\n          >\n            {this.parsedOptions.map((radio, index) => (\n              <div slot=\"form-element\" class=\"form-group\">\n                <input\n                  class=\"form-input\"\n                  id={`radio-${index}`}\n                  type=\"radio\"\n                  name={this.name}\n                  value={radio.value}\n                  disabled={radio.disabled}\n                  checked={radio.selected}\n                  onChange={this.handleOnChange}\n                />\n                <label class=\"form-label\" htmlFor={`radio-${index}`} title={radio.text}>\n                  {radio.text}\n                </label>\n              </div>\n            ))}\n          </bs-form-field>\n        </fieldset>\n      </Host>\n    );\n  }\n}\n"],"mappings":"8JAAA,MAAMA,EAAqB,gmO,iXCYdC,EAAiB,M,yBA+CpBC,KAAAC,eAAkBC,IACxB,MAAMC,EAAKD,EAAEE,OAEb,GAAID,EAAGE,QAAS,CACdL,KAAKM,MAAQH,EAAGG,MAChBN,KAAKO,aAAaD,MAAQN,KAAKM,K,gBA7CP,M,aAEA,M,sFAiBC,K,WAKJ,G,uBAQrBE,oBACF,OAAOC,EAAcT,KAAKU,Q,CAgB5BC,mBACEX,KAAKQ,cAAcI,SAASC,IAC1B,GAAIA,EAAKC,SAAU,CACjBd,KAAKM,MAAQO,EAAKP,MAClBN,KAAKO,aAAaD,MAAQN,KAAKM,K,KAKrCS,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,YAAUE,MAAM,iBACdF,EAAA,UAAQE,MAAM,eACXlB,KAAKmB,MACLnB,KAAKoB,WAAaC,EAAQrB,KAAKmB,OAASH,EAAA,sBAAkB,QAAM,MAAkB,IAErFA,EAAA,iBACEM,IAAMnB,IACJH,KAAKO,aAAeJ,CAAE,EAExBG,MAAON,KAAKM,MACZiB,KAAMvB,KAAKuB,KACXC,QAASxB,KAAKwB,QACdJ,SAAUpB,KAAKoB,SACfK,gBAAiBzB,KAAKyB,gBACtBN,MAAOnB,KAAKmB,MACZO,OAAQ,OAEP1B,KAAKQ,cAAcmB,KAAI,CAACC,EAAOC,IAC9Bb,EAAA,OAAKc,KAAK,eAAeZ,MAAM,cAC7BF,EAAA,SACEE,MAAM,aACNa,GAAI,SAASF,IACbG,KAAK,QACLT,KAAMvB,KAAKuB,KACXjB,MAAOsB,EAAMtB,MACb2B,SAAUL,EAAMK,SAChB5B,QAASuB,EAAMd,SACfoB,SAAUlC,KAAKC,iBAEjBe,EAAA,SAAOE,MAAM,aAAaiB,QAAS,SAASN,IAASO,MAAOR,EAAMS,MAC/DT,EAAMS,W,GA3DvBC,EAAA,CADCC,EAAQ,Y"}