{"version":3,"names":["formCheckboxCss","BsFormCheckbox","this","handleOnChange","e","el","target","checked","value","push","filter","item","formFieldRef","toString","parsedOptions","parseIfString","options","componentDidLoad","selected","forEach","option","render","h","Host","class","label","required","isEmpty","ref","name","invalid","requiredMessage","border","map","checkbox","index","slot","id","type","disabled","onChange","htmlFor","title","text","__decorate","Memoize"],"sources":["./src/components/molecules/form-checkbox/form-checkbox.scss?tag=bs-form-checkbox&encapsulation=shadow","./src/components/molecules/form-checkbox/form-checkbox.tsx"],"sourcesContent":[":host {\n  @include reset-host;\n}\n\n:host .form-fieldset {\n  border: 0;\n}\n\n:host .form-legend {\n  margin-bottom: 0.5rem;\n}\n\n:host .form-group {\n  display: flex;\n  margin-bottom: 0.5rem;\n}\n\n:host .form-input {\n  width: rem(22);\n  height: rem(22);\n  padding: 1px;\n  border: 1px solid $gray-500;\n  border-radius: 4px;\n\n  + .form-label {\n    @include font(label);\n    top: 0;\n    margin-right: rem(10);\n    margin-left: rem(10);\n    line-height: rem(22);\n  }\n\n  &:focus {\n    outline: 1px solid $gray-400;\n  }\n}\n","import { Component, Host, Prop, State, h } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { CheckboxItem } from './form-checkbox.types';\n\n/**\n * The form checkbox component.\n */\n@Component({\n  tag: 'bs-form-checkbox',\n  styleUrl: 'form-checkbox.scss',\n  shadow: true,\n})\nexport class BsFormCheckbox {\n  private formFieldRef: HTMLBsFormFieldElement;\n\n  /**\n   * State\n   */\n\n  @State() invalid: boolean = false;\n\n  @State() focused: boolean = false;\n\n  @State() value: string[] = [];\n\n  /**\n   * The unique name to identify the form element\n   */\n  @Prop() name!: string;\n\n  /**\n   * The error message to be displayed when the required field remains empty\n   */\n  @Prop() requiredMessage: string;\n\n  /**\n   * Wether or not the checkbox is required\n   */\n  @Prop() required?: boolean = true;\n\n  /**\n   * The label displayed after the checkbox\n   */\n  @Prop() label?: string = '';\n\n  /**\n   * Description.\n   */\n  @Prop() options: CheckboxItem[] | string;\n\n  @Memoize('options')\n  get parsedOptions(): CheckboxItem[] {\n    return parseIfString(this.options);\n  }\n\n  /**\n   * Methods\n   */\n\n  private handleOnChange = (e: PointerEvent) => {\n    const el = e.target as HTMLInputElement;\n\n    if (el.checked) {\n      this.value.push(el.value);\n      this.value = [...this.value];\n    } else {\n      this.value = this.value.filter((item) => item !== el.value);\n    }\n\n    this.formFieldRef.value = this.value.toString();\n  };\n\n  componentDidLoad() {\n    const selected = [] as string[];\n\n    this.parsedOptions.forEach((option) => {\n      if (option.selected) {\n        selected.push(option.value);\n      }\n    });\n\n    this.value = selected;\n    this.formFieldRef.value = this.value.toString();\n  }\n\n  render() {\n    return (\n      <Host>\n        <fieldset class=\"form-fieldset\">\n          <legend class=\"form-legend\">\n            {this.label}\n            {this.required && !isEmpty(this.label) ? <span aria-hidden=\"true\">&nbsp;*</span> : ''}\n          </legend>\n          <bs-form-field\n            ref={(el) => {\n              this.formFieldRef = el;\n            }}\n            value={this.value.toString()}\n            name={this.name}\n            invalid={this.invalid}\n            required={this.required}\n            requiredMessage={this.requiredMessage}\n            label={this.label}\n            border={false}\n          >\n            {this.parsedOptions.map((checkbox, index) => (\n              <div slot=\"form-element\" class=\"form-group\">\n                <input\n                  class=\"form-input\"\n                  id={`checkbox-${index}`}\n                  type=\"checkbox\"\n                  value={checkbox.value || 'true'}\n                  disabled={checkbox.disabled}\n                  checked={checkbox.selected}\n                  onChange={this.handleOnChange}\n                />\n                <label class=\"form-label\" htmlFor={`checkbox-${index}`} title={checkbox.text}>\n                  {checkbox.text}\n                </label>\n              </div>\n            ))}\n          </bs-form-field>\n        </fieldset>\n      </Host>\n    );\n  }\n}\n"],"mappings":"8JAAA,MAAMA,EAAkB,gmO,iXCYXC,EAAc,M,yBA+CjBC,KAAAC,eAAkBC,IACxB,MAAMC,EAAKD,EAAEE,OAEb,GAAID,EAAGE,QAAS,CACdL,KAAKM,MAAMC,KAAKJ,EAAGG,OACnBN,KAAKM,MAAQ,IAAIN,KAAKM,M,KACjB,CACLN,KAAKM,MAAQN,KAAKM,MAAME,QAAQC,GAASA,IAASN,EAAGG,O,CAGvDN,KAAKU,aAAaJ,MAAQN,KAAKM,MAAMK,UAAU,E,aAlDrB,M,aAEA,M,WAED,G,iEAeE,K,WAKJ,G,uBAQrBC,oBACF,OAAOC,EAAcb,KAAKc,Q,CAoB5BC,mBACE,MAAMC,EAAW,GAEjBhB,KAAKY,cAAcK,SAASC,IAC1B,GAAIA,EAAOF,SAAU,CACnBA,EAAST,KAAKW,EAAOZ,M,KAIzBN,KAAKM,MAAQU,EACbhB,KAAKU,aAAaJ,MAAQN,KAAKM,MAAMK,U,CAGvCQ,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,YAAUE,MAAM,iBACdF,EAAA,UAAQE,MAAM,eACXtB,KAAKuB,MACLvB,KAAKwB,WAAaC,EAAQzB,KAAKuB,OAASH,EAAA,sBAAkB,QAAM,MAAkB,IAErFA,EAAA,iBACEM,IAAMvB,IACJH,KAAKU,aAAeP,CAAE,EAExBG,MAAON,KAAKM,MAAMK,WAClBgB,KAAM3B,KAAK2B,KACXC,QAAS5B,KAAK4B,QACdJ,SAAUxB,KAAKwB,SACfK,gBAAiB7B,KAAK6B,gBACtBN,MAAOvB,KAAKuB,MACZO,OAAQ,OAEP9B,KAAKY,cAAcmB,KAAI,CAACC,EAAUC,IACjCb,EAAA,OAAKc,KAAK,eAAeZ,MAAM,cAC7BF,EAAA,SACEE,MAAM,aACNa,GAAI,YAAYF,IAChBG,KAAK,WACL9B,MAAO0B,EAAS1B,OAAS,OACzB+B,SAAUL,EAASK,SACnBhC,QAAS2B,EAAShB,SAClBsB,SAAUtC,KAAKC,iBAEjBmB,EAAA,SAAOE,MAAM,aAAaiB,QAAS,YAAYN,IAASO,MAAOR,EAASS,MACrET,EAASS,W,GAlE1BC,EAAA,CADCC,EAAQ,Y"}