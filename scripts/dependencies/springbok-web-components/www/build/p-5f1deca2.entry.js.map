{"version":3,"names":["formContainerCss","BsFormContainer","this","acceptedRequestStatus","async","e","detail","type","formHasErrors","submitHasFailed","validateForm","then","isFormValid","isFormSending","submitRequest","Promise","all","allFields","map","field","validate","invalid","includes","getData","token","formData","responseToken","forEach","name","value","grecaptcha","ready","execute","recaptchaSiteKey","action","submitRequestWithToken","response","fetch","method","body","JSON","stringify","headers","status","window","location","href","successRedirect","_a","componentDidLoad","deepQuerySelectorAll","hostElement","render","h","Host","src","class","invalidFormMessage","submitErrorMessage"],"sources":["./src/components/organisms/form-container/form-container.scss?tag=bs-form-container","./src/components/organisms/form-container/form-container.tsx"],"sourcesContent":[":host {\n  @include reset-host;\n}\n\n.form-error {\n  padding: rem(15);\n  margin: rem(20) 0;\n  color: $primary;\n  text-align: center;\n  border: 1px solid $primary;\n}\n","import { Component, Host, h, State, Element, Listen, Prop } from '@stencil/core';\nimport { deepQuerySelectorAll } from '../../../utils/deepQuerySelectorAll';\n\n/**\n * The form container component.\n */\n@Component({\n  tag: 'bs-form-container',\n  styleUrl: 'form-container.scss',\n  shadow: false,\n})\nexport class BsFormContainer {\n  private allFields: HTMLBsFormFieldElement[];\n\n  private acceptedRequestStatus = [200, 201];\n\n  @Element() hostElement: HTMLBsFormContainerElement;\n\n  /**\n   * State\n   */\n\n  @State() formHasErrors: boolean = false;\n\n  @State() isFormSending: boolean = false;\n\n  @State() submitHasFailed: boolean = false;\n\n  /**\n   * Props\n   */\n\n  /**\n   * The endpoint for the submit request.\n   */\n\n  @Prop() action: string;\n\n  /**\n   * The recaptcha Public site key\n   */\n  @Prop() recaptchaSiteKey: string;\n\n  /**\n   * Message to inform the user there are issues with the filled in values.\n   */\n\n  @Prop() invalidFormMessage: string;\n\n  /**\n   * Message to inform the usere something went wrong while submitting the form.\n   */\n\n  @Prop() submitErrorMessage: string;\n\n  /**\n   * The page the user is redirected to in case of a successfull submit.\n   */\n\n  @Prop() successRedirect: string;\n\n  /**\n   * Events\n   */\n\n  @Listen('bsButtonClick')\n  async onBsButtonClickHandler(e: CustomEvent) {\n    if (e.detail.type === 'submit') {\n      this.formHasErrors = false;\n      this.submitHasFailed = false;\n      this.validateForm().then(() => {\n        if (this.isFormValid()) {\n          this.isFormSending = true;\n\n          this.submitRequest();\n        }\n      });\n    }\n  }\n\n  /**\n   * Methods\n   */\n\n  private async validateForm() {\n    this.formHasErrors = false;\n    await Promise.all(this.allFields.map((field) => field.validate()));\n  }\n\n  private isFormValid() {\n    this.formHasErrors = this.allFields.map((field) => field.invalid).includes(true);\n\n    return !this.formHasErrors;\n  }\n\n  private getData(token: string) {\n    const formData = {\n      responseToken: token,\n    };\n\n    this.allFields.forEach((field) => {\n      formData[field.name] = field.value;\n    });\n\n    return formData;\n  }\n\n  private async submitRequest() {\n    grecaptcha.ready(() => {\n      grecaptcha\n        .execute(this.recaptchaSiteKey, { action: 'submit' })\n        .then((token) => this.submitRequestWithToken(token));\n    });\n  }\n\n  private async submitRequestWithToken(token: string) {\n    try {\n      const response = await fetch(this.action, {\n        method: 'POST',\n        body: JSON.stringify(this.getData(token)),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      this.isFormSending = false;\n\n      if (this.acceptedRequestStatus.includes(response.status)) {\n        window.location.href = this.successRedirect;\n      } else {\n        this.submitHasFailed = true;\n      }\n    } catch {\n      this.isFormSending = false;\n      this.submitHasFailed = true;\n    }\n  }\n\n  /**\n   * Lifecycle hooks\n   */\n\n  componentDidLoad() {\n    this.allFields = deepQuerySelectorAll(\n      'bs-form-field',\n      this.hostElement\n    ) as HTMLBsFormFieldElement[];\n  }\n\n  /**\n   * Render\n   */\n\n  render() {\n    return (\n      <Host>\n        <script\n          src={`https://www.google.com/recaptcha/api.js?render=${this.recaptchaSiteKey}`}\n        ></script>\n        <form class=\"form-container\" action={this.action} method=\"dialog\">\n          <slot />\n          {this.formHasErrors && <p class=\"form-error\">{this.invalidFormMessage}&nbsp;</p>}\n          {this.submitHasFailed && <p class=\"form-error\">{this.submitErrorMessage}&nbsp;</p>}\n        </form>\n      </Host>\n    );\n  }\n}\n"],"mappings":"qHAAA,MAAMA,EAAmB,4qN,MCWZC,EAAe,M,yBAGlBC,KAAAC,sBAAwB,CAAC,IAAK,K,mBAQJ,M,mBAEA,M,qBAEE,M,yJAwCpCC,6BAA6BC,GAC3B,GAAIA,EAAEC,OAAOC,OAAS,SAAU,CAC9BL,KAAKM,cAAgB,MACrBN,KAAKO,gBAAkB,MACvBP,KAAKQ,eAAeC,MAAK,KACvB,GAAIT,KAAKU,cAAe,CACtBV,KAAKW,cAAgB,KAErBX,KAAKY,e,MAULV,qBACNF,KAAKM,cAAgB,YACfO,QAAQC,IAAId,KAAKe,UAAUC,KAAKC,GAAUA,EAAMC,a,CAGhDR,cACNV,KAAKM,cAAgBN,KAAKe,UAAUC,KAAKC,GAAUA,EAAME,UAASC,SAAS,MAE3E,OAAQpB,KAAKM,a,CAGPe,QAAQC,GACd,MAAMC,EAAW,CACfC,cAAeF,GAGjBtB,KAAKe,UAAUU,SAASR,IACtBM,EAASN,EAAMS,MAAQT,EAAMU,KAAK,IAGpC,OAAOJ,C,CAGDrB,sBACN0B,WAAWC,OAAM,KACfD,WACGE,QAAQ9B,KAAK+B,iBAAkB,CAAEC,OAAQ,WACzCvB,MAAMa,GAAUtB,KAAKiC,uBAAuBX,IAAO,G,CAIlDpB,6BAA6BoB,GACnC,IACE,MAAMY,QAAiBC,MAAMnC,KAAKgC,OAAQ,CACxCI,OAAQ,OACRC,KAAMC,KAAKC,UAAUvC,KAAKqB,QAAQC,IAClCkB,QAAS,CACP,eAAgB,sBAIpBxC,KAAKW,cAAgB,MAErB,GAAIX,KAAKC,sBAAsBmB,SAASc,EAASO,QAAS,CACxDC,OAAOC,SAASC,KAAO5C,KAAK6C,e,KACvB,CACL7C,KAAKO,gBAAkB,I,EAEzB,MAAAuC,GACA9C,KAAKW,cAAgB,MACrBX,KAAKO,gBAAkB,I,EAQ3BwC,mBACE/C,KAAKe,UAAYiC,EACf,gBACAhD,KAAKiD,Y,CAQTC,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,UACEE,IAAK,kDAAkDrD,KAAK+B,qBAE9DoB,EAAA,QAAMG,MAAM,iBAAiBtB,OAAQhC,KAAKgC,OAAQI,OAAO,UACvDe,EAAA,aACCnD,KAAKM,eAAiB6C,EAAA,KAAGG,MAAM,cAActD,KAAKuD,mBAAkB,KACpEvD,KAAKO,iBAAmB4C,EAAA,KAAGG,MAAM,cAActD,KAAKwD,mBAAkB,M"}