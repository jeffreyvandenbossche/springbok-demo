{"version":3,"names":["experienceZoneModalCss","BsExperienceZoneModal","this","updateIndex","newValue","parsedExperienceZoneData","stories","length","activeIndex","experienceZoneModalRef","style","transform","parseIfString","experienceZoneData","bsNextSlideActionHandler","bsPreviousSlideActionHandler","componentDidLoad","transition","render","h","Host","class","ref","el","map","story","index","active","hideNavigation","storyData","__decorate","Memoize","imageCarouselCss","BsImageCarousel","onResize","desktop","compareBreakpoint","Breakpoint","md","throttleMethod","throttle","focusedImageRef","classList","add","addEventListener","parsedImageCollection","remove","setTimer","autoplay","timeout","setTimeout","slow","imageCollection","handleIndexChange","clearTimeout","autoscrollThumbnails","thumbnailWrapRef","getElementsByClassName","scrollIntoView","behavior","inline","handleBsSwipeAction","e","detail","direction","TouchDirections","Left","overlayRef","nextSlide","Right","previousSlide","handleScreenResized","handleNextMedia","handlePreviousMedia","mainTitle","carouselTitle","screens","logo","slot","src","srcset","width","height","altText","itemprop","caption","captionCover","cover","thumbnail","overlayMenuCss","BsOverlayMenu","modalId","BaseModalId","OverlayMenu","handleCloseButtonClick","modalRef","close","parsedHeaderNavigation","headerNavigation","bsModalIsClosingHandler","isClosing","transitionType","Object","assign","mobileMainLogo","mainLogo","onClick","bind","name","IconName","Close","navigation","secondary","item","tagClass","href","isEmpty","children","target","disabled","identifier","title","expandable","Boolean","child","childIndex","primary","stickyButton","text","isFullWidth","iconRight","ArrowForward","sliderItems","JSON","stringify","description","testBadgeModalCss","BsTestBadgeModal","newIndex","parsedtestBadgeCollection","closeOverlay","testBadgeCollection"],"sources":["./src/components/molecules/experience-zone-modal/experience-zone-modal.scss?tag=bs-experience-zone-modal&encapsulation=shadow","./src/components/molecules/experience-zone-modal/experience-zone-modal.tsx","./src/components/organisms/image-carousel/image-carousel.scss?tag=bs-image-carousel&encapsulation=shadow","./src/components/organisms/image-carousel/image-carousel.tsx","./src/components/organisms/overlay-menu/overlay-menu.scss?tag=bs-overlay-menu","./src/components/organisms/overlay-menu/overlay-menu.tsx","./src/components/organisms/test-badge-modal/test-badge-modal.scss?tag=bs-test-badge-modal&encapsulation=shadow","./src/components/organisms/test-badge-modal/test-badge-modal.tsx"],"sourcesContent":[":host {\n  @include reset-host;\n  @include z-index('modal');\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n\n:host .experience-zone-modal {\n  display: flex;\n  flex-wrap: nowrap;\n  width: 100vw;\n  height: 100vh;\n\n  * {\n    flex: 0 0 100%;\n  }\n}\n","import { Component, Host, h, Prop, Listen, Event, EventEmitter } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { ExperienceZone } from '../experience-zone/experience-zone.types';\nimport { YoutubeControlClickEvent } from '../youtube-control/youtube-control.types';\n\n/**\n * Experience Zone modal component.\n */\n@Component({\n  tag: 'bs-experience-zone-modal',\n  styleUrl: 'experience-zone-modal.scss',\n  shadow: true,\n})\nexport class BsExperienceZoneModal {\n  private experienceZoneModalRef: HTMLDivElement;\n\n  /** State */\n  @Prop() activeIndex? = 0;\n\n  /**\n   * The Experience Zone story data.\n   */\n  @Prop() experienceZoneData: ExperienceZone | string;\n\n  @Memoize('experienceZoneData')\n  get parsedExperienceZoneData(): ExperienceZone {\n    return parseIfString(this.experienceZoneData);\n  }\n\n  /** Events */\n  @Event() bsPauseYoutubeAction: EventEmitter<YoutubeControlClickEvent>;\n\n  /** Listeners */\n  @Listen('bsNextSlideAction')\n  bsNextSlideActionHandler() {\n    this.updateIndex(this.activeIndex + 1);\n  }\n\n  @Listen('bsPreviousSlideAction')\n  bsPreviousSlideActionHandler() {\n    this.updateIndex(this.activeIndex - 1);\n  }\n\n  private updateIndex = (newValue: number) => {\n    if (newValue > this.parsedExperienceZoneData.stories.length - 1) {\n      this.activeIndex = 0;\n    } else if (newValue < 0) {\n      this.activeIndex = this.parsedExperienceZoneData.stories.length - 1;\n    } else {\n      this.activeIndex = newValue;\n    }\n\n    this.experienceZoneModalRef.style.transform = `translateX(-${this.activeIndex * 100}vw)`;\n  };\n\n  componentDidLoad() {\n    this.experienceZoneModalRef.style.transform = `translateX(-${this.activeIndex * 100}vw)`;\n    this.experienceZoneModalRef.style.transition = `transform 0.5s ease-in-out`;\n  }\n\n  render() {\n    return (\n      <Host>\n        <div\n          class=\"experience-zone-modal\"\n          ref={(el) => {\n            this.experienceZoneModalRef = el;\n          }}\n        >\n          {this.parsedExperienceZoneData.stories.map((story, index) => (\n            <bs-experience-zone-story\n              active={index === this.activeIndex}\n              hideNavigation={this.parsedExperienceZoneData.stories.length < 2}\n              storyData={story}\n            ></bs-experience-zone-story>\n          ))}\n        </div>\n      </Host>\n    );\n  }\n}\n",":host {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  @include z-index('modal');\n}\n\n:host .image-carousel {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  margin: auto;\n  overflow: hidden;\n}\n\n:host .carousel-body {\n  position: relative;\n  display: flex;\n  flex: 1 1 100%;\n  flex-direction: column;\n  justify-content: center;\n}\n\n:host .focused-image {\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  opacity: 0;\n  animation: fade-in 0.2s linear 0.1s forwards;\n  --image--height: 240px;\n\n  @include mq('min', 'xs') {\n    --image--height: 350px;\n  }\n\n  @include mq('min', 'md') {\n    height: 100%;\n    --image--height: 100%;\n  }\n\n  @include mq('max', 'md') {\n    @media (orientation: landscape) {\n      --image--height: 100vh;\n      --image--width: 100vw;\n    }\n  }\n}\n\n:host .counter {\n  padding-left: rem(24);\n  color: $gray-800;\n\n  @include mq('min', 'md') {\n    position: absolute;\n    right: rem(16);\n    bottom: rem(16);\n    padding: rem(8) rem(12);\n    font-size: rem(16);\n    color: $white;\n    background-color: rgba($color: $black, $alpha: 0.5);\n  }\n\n  @include mq('max', 'md') {\n    @media (orientation: landscape) {\n      position: absolute;\n      right: rem(16);\n      bottom: rem(16);\n      padding: rem(12);\n    }\n  }\n}\n\n:host .carousel-footer {\n  display: none;\n  width: 100%;\n  min-height: 103px;\n  margin-top: rem(32);\n  overflow: hidden;\n\n  @include mq('min', 'md') {\n    display: block;\n  }\n\n  @include mq('max', 'lg') {\n    @media (orientation: landscape) {\n      display: none;\n    }\n  }\n}\n\n:host .thumbnail-wrap {\n  display: flex;\n  flex: 1 1;\n  gap: rem(15);\n  width: fit-content;\n}\n\n:host .thumbnail {\n  position: relative;\n  width: rem(160);\n  height: rem(103);\n  color: $white;\n  opacity: 0.5;\n\n  &--active {\n    opacity: 1;\n  }\n}\n\n:host .fade-out {\n  animation: fade-out 0.1s linear forwards;\n}\n\n@keyframes fade-out {\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n}\n\n@keyframes fade-in {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n}\n","import { Component, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport type { BsImage } from '../../atoms/image/image';\nimport { Breakpoint, compareBreakpoint } from '../../../utils/breakpoints';\nimport { throttle } from '../../../utils/throttle';\nimport { TouchDirections } from '../../layouts/default-layout/default-layout.types';\n\n/**\n * The image carousel component.\n */\n@Component({\n  tag: 'bs-image-carousel',\n  styleUrl: 'image-carousel.scss',\n  shadow: true,\n})\nexport class BsImageCarousel {\n  private timeout: NodeJS.Timeout;\n\n  private focusedImageRef: HTMLBsImageElement;\n\n  private thumbnailWrapRef: HTMLDivElement;\n\n  private overlayRef: HTMLBsDarkOverlayElement;\n\n  @State() desktop: boolean = compareBreakpoint('min', Breakpoint.md);\n\n  /** Props */\n  /**\n   * The list of images to be shown in the carousel.\n   */\n  @Prop() imageCollection: BsImage[] | string;\n\n  @Memoize('imageCollection')\n  get parsedImageCollection(): BsImage[] {\n    return parseIfString(this.imageCollection);\n  }\n\n  /**\n   * The index of the featured image.\n   */\n  @Prop() index: number = 0;\n\n  @Watch('index')\n  handleIndexChange() {\n    clearTimeout(this.timeout);\n    this.setTimer();\n    this.autoscrollThumbnails();\n  }\n\n  /**\n   * Should autoplay be enabled?\n   */\n  @Prop() autoplay?: boolean = false;\n\n  /**\n   * Should the autoplay be slow?\n   */\n  @Prop() slow?: boolean = false;\n\n  /**\n   * The title of the carousel displayed in the footer.\n   */\n  @Prop() carouselTitle?: string;\n\n  /**\n   * The logo to be displayed in the footer.\n   */\n  @Prop() logo?: BsImage | string;\n\n  /** methods */\n\n  private onResize = () => {\n    this.desktop = compareBreakpoint('min', Breakpoint.md);\n  };\n\n  private throttleMethod = throttle(this.onResize, 1000);\n\n  private updateIndex = (newValue) => {\n    this.focusedImageRef.classList.add('fade-out');\n\n    this.focusedImageRef.addEventListener('animationend', () => {\n      if (newValue > this.parsedImageCollection.length - 1) {\n        this.index = 0;\n      } else if (newValue < 0) {\n        this.index = this.parsedImageCollection.length - 1;\n      } else {\n        this.index = newValue;\n      }\n\n      this.focusedImageRef.classList.remove('fade-out');\n    });\n  };\n\n  private setTimer = () => {\n    if (this.autoplay) {\n      this.timeout = setTimeout(\n        () => {\n          this.updateIndex(this.index + 1);\n        },\n        this.slow ? 30000 : 15000\n      );\n    }\n  };\n\n  private autoscrollThumbnails() {\n    this.thumbnailWrapRef\n      .getElementsByClassName('thumbnail--active')[0]\n      .scrollIntoView({ behavior: 'smooth', inline: 'center' });\n  }\n\n  /** Listeners */\n  @Listen('bsSwipeAction', { target: 'window' })\n  handleBsSwipeAction(e: CustomEvent) {\n    if (e.detail.direction === TouchDirections.Left) {\n      this.overlayRef.nextSlide();\n    }\n\n    if (e.detail.direction === TouchDirections.Right) {\n      this.overlayRef.previousSlide();\n    }\n  }\n\n  @Listen('resize', { target: 'window' })\n  handleScreenResized() {\n    this.throttleMethod();\n  }\n\n  @Listen('bsNextSlideAction')\n  handleNextMedia() {\n    this.updateIndex(this.index + 1);\n  }\n\n  @Listen('bsPreviousSlideAction')\n  handlePreviousMedia() {\n    this.updateIndex(this.index - 1);\n  }\n\n  render() {\n    return (\n      <Host>\n        <bs-dark-overlay\n          ref={(el) => {\n            this.overlayRef = el;\n          }}\n          mainTitle={this.carouselTitle}\n          screens={this.parsedImageCollection.length > 1}\n          logo={this.logo}\n        >\n          <div slot=\"media\" class=\"image-carousel\">\n            <div class=\"carousel-body\">\n              <bs-image\n                ref={(el) => {\n                  this.focusedImageRef = el;\n                }}\n                class=\"focused-image\"\n                src={this.parsedImageCollection[this.index].src}\n                srcset={this.parsedImageCollection[this.index].srcset}\n                width={this.parsedImageCollection[this.index].width}\n                height={this.parsedImageCollection[this.index].height}\n                altText={this.parsedImageCollection[this.index].altText}\n                itemprop={this.parsedImageCollection[this.index].itemprop}\n                caption={this.parsedImageCollection[this.index].caption}\n                captionCover={this.desktop}\n                cover={this.desktop}\n              />\n              <div class=\"counter\">\n                {this.index + 1}/{this.parsedImageCollection.length}\n              </div>\n            </div>\n            <div\n              class=\"carousel-footer\"\n              ref={(el) => {\n                this.thumbnailWrapRef = el;\n              }}\n            >\n              <div class=\"thumbnail-wrap\">\n                {this.parsedImageCollection.map((thumbnail, index) => (\n                  <bs-image\n                    class={`thumbnail ${index === this.index && 'thumbnail--active'}`}\n                    src={thumbnail.src}\n                    srcset={thumbnail.srcset}\n                    width={thumbnail.width}\n                    height={thumbnail.height}\n                    image-sizes=\"200px, 400px\"\n                    alt-text={thumbnail.altText}\n                    itemprop={this.parsedImageCollection[this.index].itemprop}\n                    cover={true}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        </bs-dark-overlay>\n      </Host>\n    );\n  }\n}\n","// Utilizing the BEM methodology due to the disabling of shadow DOM for this component.\n\n.base-modal {\n  position: fixed;\n  top: 0;\n  right: 0;\n  @include z-index('modal');\n}\n\n.overlay-menu,\n.overlay-menu > * {\n  box-sizing: border-box;\n}\n\n.overlay-menu {\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  width: 100vw;\n  height: 100%;\n\n  background-color: $black-opacity-60;\n  backdrop-filter: blur(3px);\n\n  &__container {\n    @include font('body-default');\n    position: absolute;\n    top: 0;\n    right: 0;\n    height: 100%;\n    padding: 50px;\n    padding-right: 10vw;\n    overflow: auto;\n    background: $white;\n\n    animation: slide-in $transition-smooth;\n\n    @media screen and (max-height: #{vertical-breakpoints(\"md\")}) {\n      padding-top: 27px;\n      padding-bottom: 27px;\n    }\n\n    @include mq('max', 'xl') {\n      padding-right: 50px;\n    }\n\n    @include mq('max', 'sm') {\n      gap: rem(22);\n      width: 100%;\n      padding: 27px;\n    }\n\n    &.is-closing {\n      animation: slide-out $transition-smooth;\n    }\n  }\n\n  &__head {\n    position: relative;\n    display: flex;\n    justify-content: center;\n    margin-bottom: rem(50);\n\n    @media screen and (max-height: #{vertical-breakpoints(\"md\")}) {\n      margin-bottom: 0;\n    }\n  }\n\n  &__logo {\n    --image--height: #{rem(45)};\n    --image--fit: 'contain';\n\n    @include mq('max', 'md') {\n      --image--height: #{rem(32)};\n    }\n  }\n\n  &__close-button {\n    position: absolute;\n    top: 50%;\n    right: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: rem(34);\n    height: rem(34);\n    font-size: rem(20);\n    cursor: pointer;\n    border: 0;\n    border-radius: 50%;\n    outline: none;\n    transform: translateY(-50%);\n\n    @include mq('min', 'md') {\n      font-size: rem(24);\n    }\n  }\n\n  &__content {\n    display: flex;\n    flex-direction: column;\n    gap: rem(40);\n    width: rem(440);\n    min-height: 1px; // to resize content when there's no enough space vertically\n\n    bs-accordion-item {\n      font-size: rem(16);\n    }\n\n    @include mq('max', 'sm') {\n      width: unset;\n    }\n  }\n\n  &__thumbnail-item {\n    display: flex;\n    gap: rem(16);\n    --image--height: 65px;\n    --image--width: 65px;\n  }\n\n  &__accordion-child {\n    margin-left: rem(20);\n    font-size: rem(12);\n  }\n\n  &__link {\n    flex: 1;\n    width: 100%;\n    padding: 0;\n    font: inherit;\n    pointer-events: all;\n  }\n\n  &__content-panel {\n    display: none;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n\n    // hide scrollbar\n    -ms-overflow-style: none; /* IE and Edge */\n    scrollbar-width: none; /* Firefox */\n\n    &::-webkit-scrollbar {\n      display: none; /* Chrome, Safari and Opera */\n    }\n\n    &.is-visible {\n      display: block;\n    }\n  }\n\n  &__panel-switch {\n    display: flex;\n    flex-shrink: 0;\n    gap: 4px;\n    align-self: center;\n    padding: 4px;\n    margin-top: auto;\n    border: 1.5px solid $gray-400;\n    border-radius: rem(8);\n  }\n\n  &__switch-button {\n    padding: 0.75em 1.8em;\n    font-family: $font-family;\n    font-size: font-size('medium');\n    font-weight: font-weight('bold');\n    color: $black;\n    cursor: pointer;\n    background: transparent;\n    border: 0;\n    border-radius: rem(4);\n    opacity: 0.38;\n\n    transition: $transition;\n    transition-property: background, opacity;\n\n    @include mq('max', 'md') {\n      font-size: font-size('x-small');\n    }\n\n    &:not([aria-selected='true']):hover {\n      background: $gray-400;\n    }\n\n    &[aria-selected='true'] {\n      color: $primary;\n      background: $white;\n      opacity: 1;\n    }\n  }\n}\n\n@keyframes slide-in {\n  from {\n    transform: translateX(100%);\n  }\n\n  to {\n    transform: translateX(0);\n  }\n}\n\n@keyframes slide-out {\n  from {\n    transform: translateX(0);\n  }\n\n  to {\n    transform: translateX(100%);\n  }\n}\n","import { Component, Host, h, Prop, State, Listen } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { IconName } from '../../atoms/icon/icon.types';\nimport { BaseModalId } from '../base-modal/base-modal.types';\nimport { HeaderNavigation } from './overlay-menu.types';\nimport { Breakpoint, compareBreakpoint } from '../../../utils/breakpoints';\n\n/**\n * Overlay menu component.\n */\n@Component({\n  tag: 'bs-overlay-menu',\n  styleUrl: 'overlay-menu.scss',\n  shadow: false, // no shadow DOM to make focus-trap work with slots\n})\nexport class BsOverlayMenu {\n  private modalRef: HTMLBsBaseModalElement;\n\n  private modalId: BaseModalId = BaseModalId.OverlayMenu;\n\n  @State() isClosing: boolean = false;\n\n  /**\n   * The header navigation data.\n   */\n  @Prop() headerNavigation: HeaderNavigation | string;\n\n  @Memoize('headerNavigation')\n  get parsedHeaderNavigation(): HeaderNavigation {\n    return parseIfString(this.headerNavigation);\n  }\n\n  /**\n   * Events\n   */\n  @Listen('bsModalIsClosing')\n  bsModalIsClosingHandler(e: CustomEvent) {\n    if (e.detail.modalId === this.modalId) {\n      this.isClosing = true;\n    }\n  }\n\n  /**\n   * Methods\n   */\n  private handleCloseButtonClick = () => {\n    this.modalRef.close();\n  };\n\n  render() {\n    return (\n      <Host>\n        <bs-base-modal\n          class=\"base-modal\"\n          ref={(el) => {\n            this.modalRef = el;\n          }}\n          modalId={this.modalId}\n          transitionType=\"fade\"\n        >\n          <div class=\"overlay-menu\">\n            <div class={`overlay-menu__container ${this.isClosing ? 'is-closing' : ''}`}>\n              {/* Menu head */}\n              <div class=\"overlay-menu__head\">\n                {/* Logo */}\n                {compareBreakpoint('max', Breakpoint.md) ? (\n                  <bs-image\n                    class=\"overlay-menu__logo\"\n                    {...this.parsedHeaderNavigation.mobileMainLogo}\n                    caption=\"\"\n                  />\n                ) : (\n                  <bs-image\n                    class=\"overlay-menu__logo\"\n                    {...this.parsedHeaderNavigation.mainLogo}\n                    caption=\"\"\n                  />\n                )}\n\n                {/* Close button */}\n                <button\n                  class=\"overlay-menu__close-button\"\n                  aria-label=\"Close\"\n                  onClick={this.handleCloseButtonClick.bind(this)}\n                >\n                  <bs-icon name={IconName.Close} />\n                </button>\n              </div>\n\n              {/* Content */}\n              <div class=\"overlay-menu__content\">\n                <bs-accordion>\n                  {/* Secondary navigation */}\n                  {this.parsedHeaderNavigation.navigation.secondary &&\n                    this.parsedHeaderNavigation.navigation.secondary.map((item, index) => (\n                      <bs-click-action\n                        slot=\"accordion-item\"\n                        tagClass=\"overlay-menu__link\"\n                        href={isEmpty(item.children) ? item.href : ''}\n                        target={item.target}\n                        disabled={!isEmpty(item.children)}\n                      >\n                        <bs-accordion-item\n                          identifier={`primary-navigation-item-${index}`}\n                          accordion-item-title={item.title}\n                          expandable={Boolean(item.children && item.children.length > 0)}\n                        >\n                          <bs-accordion slot=\"accordion-content\">\n                            {item.children &&\n                              item.children.map((child, childIndex) => (\n                                <bs-click-action\n                                  slot=\"accordion-item\"\n                                  class=\"overlay-menu__link\"\n                                  tagClass=\"overlay-menu__link\"\n                                  target={item.target}\n                                  href={isEmpty(child.children) ? child.href : ''}\n                                  disabled={!isEmpty(child.children)}\n                                >\n                                  <div class=\"overlay-menu__thumbnail-item\">\n                                    <bs-image {...child.thumbnail} caption=\"\" />\n                                    <bs-accordion-item\n                                      identifier={`primary-navigation-child-item-${childIndex}`}\n                                      accordion-item-title={child.title}\n                                      expandable={Boolean(\n                                        child.children && child.children.length > 0\n                                      )}\n                                    />\n                                  </div>\n                                </bs-click-action>\n                              ))}\n                          </bs-accordion>\n                        </bs-accordion-item>\n                      </bs-click-action>\n                    ))}\n                  {/* Primary navigation */}\n                  {this.parsedHeaderNavigation.navigation.primary &&\n                    this.parsedHeaderNavigation.navigation.primary.map((item, index) => (\n                      <bs-click-action\n                        slot=\"accordion-item\"\n                        tagClass=\"overlay-menu__link\"\n                        href={isEmpty(item.children) ? item.href : ''}\n                        target={item.target}\n                        disabled={!isEmpty(item.children)}\n                      >\n                        <bs-accordion-item\n                          identifier={`secondary-navigation-item-${index}`}\n                          accordion-item-title={item.title}\n                          expandable={Boolean(item.children && item.children.length > 0)}\n                        >\n                          <bs-accordion\n                            class=\"overlay-menu__accordion-child\"\n                            slot=\"accordion-content\"\n                          >\n                            {item.children &&\n                              item.children.map((child, childIndex) => (\n                                <bs-click-action\n                                  slot=\"accordion-item\"\n                                  tagClass=\"overlay-menu__link\"\n                                  href={isEmpty(child.children) ? child.href : ''}\n                                  target={item.target}\n                                  disabled={!isEmpty(item.children)}\n                                >\n                                  <bs-accordion-item\n                                    identifier={`primary-navigation-child-item-${childIndex}`}\n                                    accordion-item-title={child.title}\n                                    expandable={Boolean(\n                                      child.children && child.children.length > 0\n                                    )}\n                                  />\n                                </bs-click-action>\n                              ))}\n                          </bs-accordion>\n                        </bs-accordion-item>\n                      </bs-click-action>\n                    ))}\n                </bs-accordion>\n\n                {/* Sticky CTA */}\n                {this.parsedHeaderNavigation.stickyButton &&\n                  this.parsedHeaderNavigation.stickyButton.text && (\n                    <bs-button\n                      {...this.parsedHeaderNavigation.stickyButton}\n                      isFullWidth={true}\n                      iconRight={IconName.ArrowForward}\n                    />\n                  )}\n\n                {/* Product slider */}\n                {this.parsedHeaderNavigation.navigation.sliderItems && (\n                  <bs-slider class=\"overlay-menu__slider\">\n                    {this.parsedHeaderNavigation.navigation.sliderItems.map((item) => (\n                      <bs-click-action\n                        class=\"overlay-menu__slider-item\"\n                        slot=\"slider-item\"\n                        href={item.href}\n                        target={item.target}\n                      >\n                        <bs-product-card\n                          card-image={JSON.stringify(item.thumbnail)}\n                          card-title={item.title}\n                          card-text={item.description}\n                        />\n                      </bs-click-action>\n                    ))}\n                  </bs-slider>\n                )}\n              </div>\n            </div>\n          </div>\n        </bs-base-modal>\n      </Host>\n    );\n  }\n}\n",":host {\n  @include reset-host;\n  @include z-index('modal');\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n","import { Component, Host, Listen, Prop, h } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { BsTestBadgeDetail } from '../../molecules/test-badge-detail/test-badge-detail';\n\n/**\n * The test badge modal component.\n */\n@Component({\n  tag: 'bs-test-badge-modal',\n  styleUrl: 'test-badge-modal.scss',\n  shadow: true,\n})\nexport class BsTestBadgeModal {\n  private overlayRef: HTMLBsLightOverlayElement;\n\n  /** Props */\n  /**\n   * The index of the featured image.\n   */\n  @Prop() index: number = 0;\n\n  /**\n   * The list of images to be shown in the carousel.\n   */\n  @Prop() testBadgeCollection:\n    | (BsTestBadgeDetail & { cardTitle: string; cardText: string })[]\n    | string;\n\n  @Memoize('testBadgeCollection')\n  get parsedtestBadgeCollection(): (BsTestBadgeDetail & { cardTitle: string; cardText: string })[] {\n    return parseIfString(this.testBadgeCollection);\n  }\n\n  /** Listeners */\n  @Listen('bsNextSlideAction')\n  bsNextSlideActionHandler() {\n    this.updateIndex(this.index + 1);\n  }\n\n  @Listen('bsPreviousSlideAction')\n  bsPreviousSlideActionHandler() {\n    this.updateIndex(this.index - 1);\n  }\n\n  /** methods */\n  private updateIndex = (newIndex: number) => {\n    if (!isEmpty(this.parsedtestBadgeCollection[newIndex])) {\n      this.index = newIndex;\n    } else {\n      this.overlayRef.closeOverlay();\n    }\n  };\n\n  render() {\n    return (\n      <Host>\n        <bs-light-overlay\n          ref={(el) => {\n            this.overlayRef = el;\n          }}\n          screens={this.parsedtestBadgeCollection.length > 1}\n        >\n          <bs-test-badge-detail\n            {...this.parsedtestBadgeCollection[this.index]}\n            slot=\"media\"\n          ></bs-test-badge-detail>\n        </bs-light-overlay>\n      </Host>\n    );\n  }\n}\n"],"mappings":"gWAAA,MAAMA,EAAyB,4vN,iXCalBC,EAAqB,M,oFA8BxBC,KAAAC,YAAeC,IACrB,GAAIA,EAAWF,KAAKG,yBAAyBC,QAAQC,OAAS,EAAG,CAC/DL,KAAKM,YAAc,C,MACd,GAAIJ,EAAW,EAAG,CACvBF,KAAKM,YAAcN,KAAKG,yBAAyBC,QAAQC,OAAS,C,KAC7D,CACLL,KAAKM,YAAcJ,C,CAGrBF,KAAKO,uBAAuBC,MAAMC,UAAY,eAAeT,KAAKM,YAAc,QAAQ,E,iBAnCnE,E,kCAQnBH,+BACF,OAAOO,EAAcV,KAAKW,mB,CAQ5BC,2BACEZ,KAAKC,YAAYD,KAAKM,YAAc,E,CAItCO,+BACEb,KAAKC,YAAYD,KAAKM,YAAc,E,CAetCQ,mBACEd,KAAKO,uBAAuBC,MAAMC,UAAY,eAAeT,KAAKM,YAAc,SAChFN,KAAKO,uBAAuBC,MAAMO,WAAa,4B,CAGjDC,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,OACEE,MAAM,wBACNC,IAAMC,IACJrB,KAAKO,uBAAyBc,CAAE,GAGjCrB,KAAKG,yBAAyBC,QAAQkB,KAAI,CAACC,EAAOC,IACjDP,EAAA,4BACEQ,OAAQD,IAAUxB,KAAKM,YACvBoB,eAAgB1B,KAAKG,yBAAyBC,QAAQC,OAAS,EAC/DsB,UAAWJ,O,GAhDvBK,GADCC,EAAQ,uB,uDCxBX,MAAMC,EAAmB,uvQ,iXCeZC,EAAe,M,yBAwDlB/B,KAAAgC,SAAW,KACjBhC,KAAKiC,QAAUC,EAAkB,MAAOC,EAAWC,GAAG,EAGhDpC,KAAAqC,eAAiBC,EAAStC,KAAKgC,SAAU,KAEzChC,KAAAC,YAAeC,IACrBF,KAAKuC,gBAAgBC,UAAUC,IAAI,YAEnCzC,KAAKuC,gBAAgBG,iBAAiB,gBAAgB,KACpD,GAAIxC,EAAWF,KAAK2C,sBAAsBtC,OAAS,EAAG,CACpDL,KAAKwB,MAAQ,C,MACR,GAAItB,EAAW,EAAG,CACvBF,KAAKwB,MAAQxB,KAAK2C,sBAAsBtC,OAAS,C,KAC5C,CACLL,KAAKwB,MAAQtB,C,CAGfF,KAAKuC,gBAAgBC,UAAUI,OAAO,WAAW,GACjD,EAGI5C,KAAA6C,SAAW,KACjB,GAAI7C,KAAK8C,SAAU,CACjB9C,KAAK+C,QAAUC,YACb,KACEhD,KAAKC,YAAYD,KAAKwB,MAAQ,EAAE,GAElCxB,KAAKiD,KAAO,IAAQ,K,gBA3EEf,EAAkB,MAAOC,EAAWC,I,0CAgBxC,E,cAYK,M,UAKJ,M,iDAxBrBO,4BACF,OAAOjC,EAAcV,KAAKkD,gB,CAS5BC,oBACEC,aAAapD,KAAK+C,SAClB/C,KAAK6C,WACL7C,KAAKqD,sB,CA0DCA,uBACNrD,KAAKsD,iBACFC,uBAAuB,qBAAqB,GAC5CC,eAAe,CAAEC,SAAU,SAAUC,OAAQ,U,CAKlDC,oBAAoBC,GAClB,GAAIA,EAAEC,OAAOC,YAAcC,EAAgBC,KAAM,CAC/ChE,KAAKiE,WAAWC,W,CAGlB,GAAIN,EAAEC,OAAOC,YAAcC,EAAgBI,MAAO,CAChDnE,KAAKiE,WAAWG,e,EAKpBC,sBACErE,KAAKqC,gB,CAIPiC,kBACEtE,KAAKC,YAAYD,KAAKwB,MAAQ,E,CAIhC+C,sBACEvE,KAAKC,YAAYD,KAAKwB,MAAQ,E,CAGhCR,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,mBACEG,IAAMC,IACJrB,KAAKiE,WAAa5C,CAAE,EAEtBmD,UAAWxE,KAAKyE,cAChBC,QAAS1E,KAAK2C,sBAAsBtC,OAAS,EAC7CsE,KAAM3E,KAAK2E,MAEX1D,EAAA,OAAK2D,KAAK,QAAQzD,MAAM,kBACtBF,EAAA,OAAKE,MAAM,iBACTF,EAAA,YACEG,IAAMC,IACJrB,KAAKuC,gBAAkBlB,CAAE,EAE3BF,MAAM,gBACN0D,IAAK7E,KAAK2C,sBAAsB3C,KAAKwB,OAAOqD,IAC5CC,OAAQ9E,KAAK2C,sBAAsB3C,KAAKwB,OAAOsD,OAC/CC,MAAO/E,KAAK2C,sBAAsB3C,KAAKwB,OAAOuD,MAC9CC,OAAQhF,KAAK2C,sBAAsB3C,KAAKwB,OAAOwD,OAC/CC,QAASjF,KAAK2C,sBAAsB3C,KAAKwB,OAAOyD,QAChDC,SAAUlF,KAAK2C,sBAAsB3C,KAAKwB,OAAO0D,SACjDC,QAASnF,KAAK2C,sBAAsB3C,KAAKwB,OAAO2D,QAChDC,aAAcpF,KAAKiC,QACnBoD,MAAOrF,KAAKiC,UAEdhB,EAAA,OAAKE,MAAM,WACRnB,KAAKwB,MAAQ,EAAC,IAAGxB,KAAK2C,sBAAsBtC,SAGjDY,EAAA,OACEE,MAAM,kBACNC,IAAMC,IACJrB,KAAKsD,iBAAmBjC,CAAE,GAG5BJ,EAAA,OAAKE,MAAM,kBACRnB,KAAK2C,sBAAsBrB,KAAI,CAACgE,EAAW9D,IAC1CP,EAAA,YACEE,MAAO,aAAaK,IAAUxB,KAAKwB,OAAS,sBAC5CqD,IAAKS,EAAUT,IACfC,OAAQQ,EAAUR,OAClBC,MAAOO,EAAUP,MACjBC,OAAQM,EAAUN,OAAM,cACZ,eAAc,WAChBM,EAAUL,QACpBC,SAAUlF,KAAK2C,sBAAsB3C,KAAKwB,OAAO0D,SACjDG,MAAO,a,6DAzJzBzD,GADCC,EAAQ,oB,oDChCX,MAAM0D,EAAiB,iuT,iXCeVC,EAAa,M,yBAGhBxF,KAAAyF,QAAuBC,EAAYC,YA2BnC3F,KAAA4F,uBAAyB,KAC/B5F,KAAK6F,SAASC,OAAO,E,eA1BO,M,gCAQ1BC,6BACF,OAAOrF,EAAcV,KAAKgG,iB,CAO5BC,wBAAwBrC,GACtB,GAAIA,EAAEC,OAAO4B,UAAYzF,KAAKyF,QAAS,CACrCzF,KAAKkG,UAAY,I,EAWrBlF,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,iBACEE,MAAM,aACNC,IAAMC,IACJrB,KAAK6F,SAAWxE,CAAE,EAEpBoE,QAASzF,KAAKyF,QACdU,eAAe,QAEflF,EAAA,OAAKE,MAAM,gBACTF,EAAA,OAAKE,MAAO,2BAA2BnB,KAAKkG,UAAY,aAAe,MAErEjF,EAAA,OAAKE,MAAM,sBAERe,EAAkB,MAAOC,EAAWC,IACnCnB,EAAA,WAAAmF,OAAAC,OAAA,CACElF,MAAM,sBACFnB,KAAK+F,uBAAuBO,eAAc,CAC9CnB,QAAQ,MAGVlE,EAAA,WAAAmF,OAAAC,OAAA,CACElF,MAAM,sBACFnB,KAAK+F,uBAAuBQ,SAAQ,CACxCpB,QAAQ,MAKZlE,EAAA,UACEE,MAAM,6BAA4B,aACvB,QACXqF,QAASxG,KAAK4F,uBAAuBa,KAAKzG,OAE1CiB,EAAA,WAASyF,KAAMC,EAASC,UAK5B3F,EAAA,OAAKE,MAAM,yBACTF,EAAA,oBAEGjB,KAAK+F,uBAAuBc,WAAWC,WACtC9G,KAAK+F,uBAAuBc,WAAWC,UAAUxF,KAAI,CAACyF,EAAMvF,IAC1DP,EAAA,mBACE2D,KAAK,iBACLoC,SAAS,qBACTC,KAAMC,EAAQH,EAAKI,UAAYJ,EAAKE,KAAO,GAC3CG,OAAQL,EAAKK,OACbC,UAAWH,EAAQH,EAAKI,WAExBlG,EAAA,qBACEqG,WAAY,2BAA2B9F,IAAO,uBACxBuF,EAAKQ,MAC3BC,WAAYC,QAAQV,EAAKI,UAAYJ,EAAKI,SAAS9G,OAAS,IAE5DY,EAAA,gBAAc2D,KAAK,qBAChBmC,EAAKI,UACJJ,EAAKI,SAAS7F,KAAI,CAACoG,EAAOC,IACxB1G,EAAA,mBACE2D,KAAK,iBACLzD,MAAM,qBACN6F,SAAS,qBACTI,OAAQL,EAAKK,OACbH,KAAMC,EAAQQ,EAAMP,UAAYO,EAAMT,KAAO,GAC7CI,UAAWH,EAAQQ,EAAMP,WAEzBlG,EAAA,OAAKE,MAAM,gCACTF,EAAA,WAAAmF,OAAAC,OAAA,GAAcqB,EAAMpC,UAAS,CAAEH,QAAQ,MACvClE,EAAA,qBACEqG,WAAY,iCAAiCK,IAAY,uBACnCD,EAAMH,MAC5BC,WAAYC,QACVC,EAAMP,UAAYO,EAAMP,SAAS9G,OAAS,cAW/DL,KAAK+F,uBAAuBc,WAAWe,SACtC5H,KAAK+F,uBAAuBc,WAAWe,QAAQtG,KAAI,CAACyF,EAAMvF,IACxDP,EAAA,mBACE2D,KAAK,iBACLoC,SAAS,qBACTC,KAAMC,EAAQH,EAAKI,UAAYJ,EAAKE,KAAO,GAC3CG,OAAQL,EAAKK,OACbC,UAAWH,EAAQH,EAAKI,WAExBlG,EAAA,qBACEqG,WAAY,6BAA6B9F,IAAO,uBAC1BuF,EAAKQ,MAC3BC,WAAYC,QAAQV,EAAKI,UAAYJ,EAAKI,SAAS9G,OAAS,IAE5DY,EAAA,gBACEE,MAAM,gCACNyD,KAAK,qBAEJmC,EAAKI,UACJJ,EAAKI,SAAS7F,KAAI,CAACoG,EAAOC,IACxB1G,EAAA,mBACE2D,KAAK,iBACLoC,SAAS,qBACTC,KAAMC,EAAQQ,EAAMP,UAAYO,EAAMT,KAAO,GAC7CG,OAAQL,EAAKK,OACbC,UAAWH,EAAQH,EAAKI,WAExBlG,EAAA,qBACEqG,WAAY,iCAAiCK,IAAY,uBACnCD,EAAMH,MAC5BC,WAAYC,QACVC,EAAMP,UAAYO,EAAMP,SAAS9G,OAAS,cAY/DL,KAAK+F,uBAAuB8B,cAC3B7H,KAAK+F,uBAAuB8B,aAAaC,MACvC7G,EAAA,YAAAmF,OAAAC,OAAA,GACMrG,KAAK+F,uBAAuB8B,aAAY,CAC5CE,YAAa,KACbC,UAAWrB,EAASsB,gBAKzBjI,KAAK+F,uBAAuBc,WAAWqB,aACtCjH,EAAA,aAAWE,MAAM,wBACdnB,KAAK+F,uBAAuBc,WAAWqB,YAAY5G,KAAKyF,GACvD9F,EAAA,mBACEE,MAAM,4BACNyD,KAAK,cACLqC,KAAMF,EAAKE,KACXG,OAAQL,EAAKK,QAEbnG,EAAA,gCACckH,KAAKC,UAAUrB,EAAKzB,WAAU,aAC9ByB,EAAKQ,MAAK,YACXR,EAAKsB,sB,GA5KxCzG,GADCC,EAAQ,qB,qDC3BX,MAAMyG,EAAoB,2nN,iXCYbC,EAAgB,M,yBAiCnBvI,KAAAC,YAAeuI,IACrB,IAAKtB,EAAQlH,KAAKyI,0BAA0BD,IAAY,CACtDxI,KAAKwB,MAAQgH,C,KACR,CACLxI,KAAKiE,WAAWyE,c,cA9BI,E,mCAUpBD,gCACF,OAAO/H,EAAcV,KAAK2I,oB,CAK5B/H,2BACEZ,KAAKC,YAAYD,KAAKwB,MAAQ,E,CAIhCX,+BACEb,KAAKC,YAAYD,KAAKwB,MAAQ,E,CAYhCR,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,oBACEG,IAAMC,IACJrB,KAAKiE,WAAa5C,CAAE,EAEtBqD,QAAS1E,KAAKyI,0BAA0BpI,OAAS,GAEjDY,EAAA,uBAAAmF,OAAAC,OAAA,GACMrG,KAAKyI,0BAA0BzI,KAAKwB,OAAM,CAC9CoD,KAAK,Y,GAnCfhD,EAAA,CADCC,EAAQ,wB"}