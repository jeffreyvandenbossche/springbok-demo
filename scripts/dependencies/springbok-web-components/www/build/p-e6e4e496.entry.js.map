{"version":3,"names":["KeyboardCodes","formSelectCss","BsFormSelect","this","customOptions","focus","focused","selectWrap","addEventListener","handleKeyDown","querySelector","setAttribute","style","display","activeOption","focusOut","removeEventListener","undefined","e","code","Enter","handleSelect","ArrowDown","handleOptionfocus","ArrowUp","Escape","validateValue","newValue","oldValue","parsedOptions","length","options","querySelectorAll","parseIfString","handleFocusOut","target","nodeName","direction","nativeSelect","selectElRef","selected","filled","i","innerHTML","disabled","selectedIndex","click","value","formFieldRef","_a","handleSelectedProp","bind","componentDidRender","document","componentDidLoad","forEach","option","hostElement","disconnectedCallback","render","h","Host","ref","el","name","invalid","required","requiredMessage","label","icon","slot","id","class","onFocus","_b","text","map","role","push","tabindex","htmlFor","title","__decorate","Memoize"],"sources":["./src/components/molecules/form-select/form-select.types.ts","./src/components/molecules/form-select/form-select.scss?tag=bs-form-select&encapsulation=shadow","./src/components/molecules/form-select/form-select.tsx"],"sourcesContent":["export type SelectOption = {\n  value: string;\n  text: string;\n  selected?: boolean;\n  disabled?: boolean;\n};\n\nexport enum KeyboardCodes {\n  ArrowDown = 'ArrowDown',\n  ArrowUp = 'ArrowUp',\n  Escape = 'Escape',\n  Enter = 'Enter',\n}\n\nexport type AttributeItem = {\n  key: string;\n  value: string;\n};\n",":host {\n  @include reset-host;\n  cursor: pointer;\n}\n\n:host .custom-select {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  padding: rem(24) rem(24) 0;\n  text-align: left;\n  cursor: pointer;\n  background: unset;\n  border: 0;\n}\n\n:host .custom-options-wrapper {\n  position: absolute;\n  top: calc(100% + 1px);\n  left: 0;\n  @include z-index('modal');\n  width: 100%;\n  max-height: 0;\n  overflow: hidden;\n  transition: max-height 0.5s ease;\n}\n\n:host .custom-option {\n  display: flex;\n  align-items: center;\n  min-height: rem(48);\n  padding-left: rem(24);\n  cursor: pointer;\n  background-color: $white;\n  border-bottom: 2px solid $gray-200;\n\n  &.is-disabled {\n    color: $gray-500;\n    cursor: not-allowed;\n  }\n\n  &:hover,\n  &:focus {\n    background-color: $gray-200;\n    outline: none;\n  }\n}\n\n:host([focused]) .custom-options-wrapper {\n  max-height: rem(200);\n}\n\n.hidden {\n  display: none;\n}\n","import { Component, Element, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { IconName } from '../../../components';\nimport { KeyboardCodes, SelectOption } from './form-select.types';\n\n/**\n * The form select component.\n */\n@Component({\n  tag: 'bs-form-select',\n  styleUrl: 'form-select.scss',\n  shadow: true,\n})\nexport class BsFormSelect {\n  @Element() hostElement: HTMLBsFormSelectElement;\n\n  private formFieldRef: HTMLBsFormFieldElement;\n\n  private selectElRef: HTMLSelectElement;\n\n  private selectWrap: HTMLButtonElement;\n\n  private customOptions: HTMLLIElement[] = [];\n\n  /**\n   * The value of the form field\n   */\n  @State() value?: SelectOption;\n\n  /**\n   * Wether or not the input field is filled\n   */\n  @State() filled: boolean = false;\n\n  /**\n   * Wether or not the input field is focused\n   */\n  @State() focused: boolean = false;\n\n  /**\n   * Wether or not the input field is invalid\n   */\n  @State() invalid: boolean = false;\n\n  /**\n   * Wether or not the input field is invalid\n   */\n  @State() activeOption: number | undefined = undefined;\n\n  @Watch('activeOption')\n  validateValue(newValue: number, oldValue: number) {\n    if (typeof newValue === 'undefined') return;\n\n    if (newValue > oldValue) {\n      this.activeOption = newValue >= this.parsedOptions.length ? 0 : newValue;\n    } else if (newValue < oldValue) {\n      this.activeOption = newValue < 0 ? this.parsedOptions.length - 1 : newValue;\n    } else {\n      this.activeOption = newValue;\n    }\n\n    const options = this.selectWrap.querySelectorAll('.custom-option') as NodeListOf<HTMLLIElement>;\n\n    options[this.activeOption].focus();\n  }\n\n  /**\n   * The unique name to identify the form element\n   */\n  @Prop() name!: string;\n\n  /**\n   * The label describing the form field\n   */\n  @Prop() label!: string;\n\n  /**\n   * The list of options that will populate the select field.\n   */\n  @Prop() options: SelectOption[] | string;\n\n  @Memoize('options')\n  get parsedOptions(): SelectOption[] {\n    return parseIfString(this.options);\n  }\n\n  /**\n   * Wether or not the input field is required\n   */\n  @Prop() required?: boolean = false;\n\n  /**\n   * The error message to be displayed when the required field remains empty\n   */\n  @Prop() requiredMessage: string;\n\n  /**\n   * The icon to be displayed on the right hand side of the form field\n   */\n  @Prop() icon?: IconName;\n\n  private focus = () => {\n    this.focused = true;\n    this.selectWrap.addEventListener('keydown', this.handleKeyDown, true);\n    this.selectWrap.querySelector('.custom-options-wrapper').setAttribute('aria-expanded', 'true');\n    (this.selectWrap.querySelector('.custom-options-wrapper') as HTMLUListElement).style.display =\n      'block';\n    this.activeOption = 0;\n  };\n\n  private focusOut = () => {\n    this.focused = false;\n    this.selectWrap.removeEventListener('keydown', this.handleKeyDown, true);\n    this.selectWrap.querySelector('.custom-options-wrapper').setAttribute('aria-expanded', 'false');\n    (this.selectWrap.querySelector('.custom-options-wrapper') as HTMLUListElement).style.display =\n      'none';\n    this.activeOption = undefined;\n  };\n\n  private handleFocusOut(e: MouseEvent) {\n    if ((e.target as HTMLElement).nodeName !== 'BS-FORM-SELECT') {\n      this.focused = false;\n    }\n  }\n\n  private handleOptionfocus(direction: KeyboardCodes.ArrowUp | KeyboardCodes.ArrowDown) {\n    if (direction === KeyboardCodes.ArrowDown) {\n      this.activeOption += 1;\n    } else if (direction === KeyboardCodes.ArrowUp) {\n      this.activeOption -= 1;\n    }\n  }\n\n  private handleKeyDown = (e: KeyboardEvent) => {\n    switch (e.code) {\n      case KeyboardCodes.Enter:\n        this.handleSelect(e);\n        this.focusOut();\n        break;\n\n      case KeyboardCodes.ArrowDown:\n        this.handleOptionfocus(KeyboardCodes.ArrowDown);\n        break;\n\n      case KeyboardCodes.ArrowUp:\n        this.handleOptionfocus(KeyboardCodes.ArrowUp);\n        break;\n\n      case KeyboardCodes.Escape:\n        this.focusOut();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  private handleSelect(e: PointerEvent | KeyboardEvent) {\n    const nativeSelect = this.selectElRef;\n    const selected = e.target as HTMLLIElement;\n    let filled = false;\n\n    for (let i = 0; i < nativeSelect.options.length; i += 1) {\n      if (nativeSelect.options[i].innerHTML === selected.innerHTML) {\n        if (nativeSelect.options[i].disabled) return;\n        nativeSelect.selectedIndex = i;\n        nativeSelect.options[i].click();\n        this.value = nativeSelect.options[i];\n        this.formFieldRef.value = this.value?.value;\n        filled = true;\n        break;\n      }\n    }\n\n    this.focusOut();\n    this.filled = filled;\n  }\n\n  private handleSelectedProp() {\n    for (let i = 0; i < this.selectElRef.options.length; i += 1) {\n      this.selectElRef.options[i].addEventListener('click', this.handleSelect.bind(this));\n\n      if (this.selectElRef.options[i].selected) {\n        this.selectElRef.options[i].click();\n      }\n    }\n  }\n\n  componentDidRender() {\n    document.addEventListener('click', this.handleFocusOut.bind(this));\n  }\n\n  componentDidLoad() {\n    this.customOptions.forEach((option) => {\n      option.addEventListener('click', this.handleSelect.bind(this));\n    });\n    this.hostElement.addEventListener('focusout', this.focusOut.bind(this));\n\n    this.handleSelectedProp();\n  }\n\n  disconnectedCallback() {\n    document.removeEventListener('click', this.handleFocusOut.bind(this));\n    this.hostElement.removeEventListener('focusout', this.focusOut.bind(this));\n  }\n\n  render() {\n    return (\n      <Host focused={this.focused}>\n        <bs-form-field\n          ref={(el) => {\n            this.formFieldRef = el;\n          }}\n          value={this.value?.value}\n          name={this.name}\n          focused={this.focused || this.filled}\n          filled={this.filled}\n          invalid={this.invalid}\n          required={this.required}\n          requiredMessage={this.requiredMessage}\n          label={this.label}\n          icon={this.icon}\n        >\n          <button\n            slot=\"form-element\"\n            ref={(el) => {\n              this.selectWrap = el;\n            }}\n            id={this.name}\n            class=\"custom-select\"\n            onFocus={this.focus}\n          >\n            <span class=\"custom-select-value\">{this.value?.text}</span>\n            <select\n              ref={(el: HTMLSelectElement) => {\n                this.selectElRef = el;\n\n                return this.selectElRef;\n              }}\n              class=\"hidden\"\n              required={this.required}\n              id={`hidden-${this.name}`}\n              name={this.name}\n            >\n              {this.parsedOptions.map((option) => (\n                <option selected={option.selected} value={option.value} disabled={option.disabled}>\n                  {option.text}\n                </option>\n              ))}\n            </select>\n            <div aria-labelledby={this.name}>\n              <ul\n                class=\"custom-options-wrapper hidden\"\n                aria-haspopup=\"listbox\"\n                aria-expanded=\"false\"\n                role=\"group\"\n              >\n                {this.parsedOptions.map((option) => (\n                  <li\n                    ref={(el) => {\n                      this.customOptions.push(el);\n                    }}\n                    role=\"option\"\n                    class={`custom-option ${option.disabled ? 'is-disabled' : ''}`}\n                    tabindex={option.disabled ? '-1' : '0'}\n                    aria-disabled={option.disabled}\n                  >\n                    {option.text}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </button>\n          <label slot=\"form-label\" class=\"form-label\" htmlFor={this.name} title={this.label}>\n            {this.label}\n            {this.required ? <span aria-hidden=\"true\">&nbsp;*</span> : ''}\n          </label>\n        </bs-form-field>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}