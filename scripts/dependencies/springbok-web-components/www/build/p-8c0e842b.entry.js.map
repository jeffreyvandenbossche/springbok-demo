{"version":3,"names":["defaultValidator","validate","LengthValidator","min","max","value","regex","RegExp","test","errorMessage","MinMaxValidator","Number","Date","EmailValidator","DateTimeValidator","dateValue","validatorFactory","name","options","ValidatorNames","DateTime","Length","MinMax","Email","getValidator","v","formFieldCss","BsFormField","this","validatorFunc","valueDidChange","async","invalid","isEmpty","required","requiredMessage","validator","invalidMessage","componentWillLoad","filled","render","h","Host","class","border","icon"],"sources":["./src/validators/validators.ts","./src/validators/validators.factory.ts","./src/components/molecules/form-field/form-field.scss?tag=bs-form-field&encapsulation=shadow","./src/components/molecules/form-field/form-field.tsx"],"sourcesContent":["import type { Validator } from './validators.types';\n\nexport const defaultValidator: Validator<any> = {\n  validate: () => true,\n};\n\nexport function LengthValidator(min: string, max: string): Validator<string> {\n  return {\n    validate: (value: string) => {\n      const regex = new RegExp(`^.{${min || 0},${max || ''}}$`);\n\n      return regex.test(value);\n    },\n    errorMessage: 'LengthError',\n  };\n}\n\nexport function MinMaxValidator(min: string, max: string): Validator<string> {\n  return {\n    validate: (value: string) => {\n      if (Number(min) && Number(value) < Number(min)) {\n        return false;\n      }\n\n      if (Number(max) && Number(value) > Number(max)) {\n        return false;\n      }\n\n      if (new Date(min) instanceof Date && new Date(value) < new Date(min)) {\n        return false;\n      }\n\n      if (new Date(max) instanceof Date && new Date(value) > new Date(max)) {\n        return false;\n      }\n\n      return true;\n    },\n    errorMessage: 'numberError',\n  };\n}\n\nexport function EmailValidator(): Validator<string> {\n  return {\n    validate: (value: string) => {\n      const regex =\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\u0600-\\u06FF\\u0400-\\u04FF\\u0370-\\u03ff\\-0-9]+\\.)+[a-zA-Z\\u0600-\\u06FF\\u0400-\\u04FF\\u0370-\\u03ff]{2,}))$/;\n\n      return regex.test(value);\n    },\n    errorMessage: 'emailError',\n  };\n}\n\nexport const DateTimeValidator: Validator<string> = {\n  validate: (value: string) => {\n    const dateValue = new Date(value);\n\n    if (dateValue instanceof Date) {\n      return true;\n    }\n\n    return false;\n  },\n  errorMessage: 'dateTimeError',\n};\n","import {\n  defaultValidator,\n  EmailValidator,\n  DateTimeValidator,\n  LengthValidator,\n  MinMaxValidator,\n} from './validators';\n\nimport { Validator, ValidatorEntry, ValidatorNames } from './validators.types';\n\nexport function validatorFactory(name: string, options: any): Validator<any> {\n  switch (name) {\n    case ValidatorNames.DateTime:\n      return DateTimeValidator;\n    case ValidatorNames.Length:\n      return LengthValidator(options.min, options.max);\n    case ValidatorNames.MinMax:\n      return MinMaxValidator(options.min, options.max);\n    case ValidatorNames.Email:\n      return EmailValidator();\n    default:\n      return defaultValidator;\n  }\n}\n\nexport function getValidator<A>(v: string | ValidatorEntry): Validator<A> {\n  if (typeof v === 'string') {\n    return validatorFactory(v, null);\n  }\n\n  return validatorFactory(v.name, v.options);\n}\n",":host {\n  @include reset-host;\n  position: relative;\n}\n\n:host .form-field {\n  position: relative;\n  width: 100%;\n  min-width: max-content;\n  min-height: rem(48);\n  margin-bottom: rem(4);\n  background-color: $white;\n  border: 1px solid $gray-400;\n  border-bottom: 0;\n  border-radius: 3px;\n  box-shadow: 0 1px 0 $gray-900;\n}\n\n:host ::slotted(.form-label) {\n  @include font(label);\n  position: absolute;\n  top: rem(12);\n  right: rem(55);\n  left: rem(24);\n  width: fit-content;\n  overflow: hidden;\n  color: $black;\n  white-space: nowrap;\n  cursor: inherit;\n  transition:\n    top 0.3s ease,\n    font-size 0.3s ease;\n}\n\n:host .form-icon {\n  position: absolute;\n  top: rem(24);\n  right: rem(24);\n  font-size: rem(24);\n  color: $black;\n  pointer-events: none;\n  transform: translateY(-50%);\n}\n\n:host .form-error {\n  display: block;\n  margin-bottom: rem(10);\n  color: $primary;\n}\n\n:host([focused]),\n:host([filled]) {\n  ::slotted(.form-label) {\n    top: rem(6);\n    font-size: font-size(x-small);\n    color: $gray-200;\n  }\n}\n\n:host([invalid]) {\n  .form-field {\n    box-shadow: 0 2px 0 $primary;\n  }\n}\n\n:host([hidden]) {\n  display: none !important;\n}\n","import { Component, h, Host, Method, Prop, Watch } from '@stencil/core';\nimport { isEmpty } from '@springbokagency/stencil-base';\nimport { IconName } from '../../../components';\nimport { defaultValidator } from '../../../validators/validators';\nimport { Validator, ValidatorEntry } from '../../../validators/validators.types';\nimport { getValidator } from '../../../validators/validators.factory';\n\n/**\n * The form field component.\n */\n@Component({\n  tag: 'bs-form-field',\n  styleUrl: 'form-field.scss',\n  shadow: true,\n})\nexport class BsFormField {\n  private validatorFunc: Validator<string> = defaultValidator;\n\n  private errorMessage: string;\n\n  /**\n   * The value of the form field\n   */\n  @Prop() value: string;\n\n  @Watch('value')\n  valueDidChange() {\n    this.validate();\n  }\n\n  /**\n   * The name of the form field\n   */\n  @Prop() name: string;\n\n  /**\n   * Wether or not the form field is filled\n   */\n  @Prop({ reflect: true }) filled: boolean;\n\n  /**\n   * Wether or not the form field is focussed\n   */\n  @Prop({ reflect: true }) focused: boolean;\n\n  /**\n   * Wether or not the form field is invalid\n   */\n  @Prop({ reflect: true }) invalid: boolean;\n\n  /**\n   * Wether or not the form field is required\n   */\n  @Prop() required: boolean;\n\n  /**\n   * The error message to be displayed on the form field in case of invalidity\n   */\n  @Prop() invalidMessage: string;\n\n  /**\n   * The error message to be displayed on the form field when the required field is not populated\n   */\n  @Prop() requiredMessage: string;\n\n  /**\n   * The icon to be displayed on the right hand side of the form field\n   */\n  @Prop() icon?: IconName;\n\n  /**\n   * The label describing the form field\n   */\n  @Prop() label?: string;\n\n  /**\n   * A border styling for text input and select fields\n   */\n  @Prop() border?: boolean = true;\n\n  /**\n   * The validator function name used to validate the form field\n   */\n  @Prop() validator?: string | ValidatorEntry;\n\n  /**\n   * A method to run the validation on the form input value\n   */\n  @Method()\n  async validate(value: string = this.value) {\n    this.invalid = true;\n\n    if (isEmpty(value) && this.required) {\n      this.errorMessage = this.requiredMessage;\n    } else if (!isEmpty(value) && this.validator && !this.validatorFunc.validate(value)) {\n      this.errorMessage = this.invalidMessage;\n    } else {\n      this.invalid = false;\n    }\n  }\n\n  componentWillLoad() {\n    if (!isEmpty(this.validator)) {\n      this.validatorFunc = getValidator(this.validator);\n    }\n\n    if (!isEmpty(this.value)) {\n      this.filled = true;\n      this.validate();\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={this.border ? 'form-field' : ''}>\n          <slot name=\"form-element\" />\n          <slot name=\"form-label\" />\n          <bs-icon class=\"form-icon\" name={this.icon} />\n        </div>\n        <span class=\"form-error\">{this.invalid && this.errorMessage}&nbsp;</span>\n      </Host>\n    );\n  }\n}\n"],"mappings":"0HAEO,MAAMA,EAAmC,CAC9CC,SAAU,IAAM,M,SAGFC,EAAgBC,EAAaC,GAC3C,MAAO,CACLH,SAAWI,IACT,MAAMC,EAAQ,IAAIC,OAAO,MAAMJ,GAAO,KAAKC,GAAO,QAElD,OAAOE,EAAME,KAAKH,EAAM,EAE1BI,aAAc,cAElB,C,SAEgBC,EAAgBP,EAAaC,GAC3C,MAAO,CACLH,SAAWI,IACT,GAAIM,OAAOR,IAAQQ,OAAON,GAASM,OAAOR,GAAM,CAC9C,OAAO,K,CAGT,GAAIQ,OAAOP,IAAQO,OAAON,GAASM,OAAOP,GAAM,CAC9C,OAAO,K,CAGT,GAAI,IAAIQ,KAAKT,aAAgBS,MAAQ,IAAIA,KAAKP,GAAS,IAAIO,KAAKT,GAAM,CACpE,OAAO,K,CAGT,GAAI,IAAIS,KAAKR,aAAgBQ,MAAQ,IAAIA,KAAKP,GAAS,IAAIO,KAAKR,GAAM,CACpE,OAAO,K,CAGT,OAAO,IAAI,EAEbK,aAAc,cAElB,C,SAEgBI,IACd,MAAO,CACLZ,SAAWI,IACT,MAAMC,EACJ,sOAEF,OAAOA,EAAME,KAAKH,EAAM,EAE1BI,aAAc,aAElB,CAEO,MAAMK,EAAuC,CAClDb,SAAWI,IACT,MAAMU,EAAY,IAAIH,KAAKP,GAE3B,GAAIU,aAAqBH,KAAM,CAC7B,OAAO,I,CAGT,OAAO,KAAK,EAEdH,aAAc,iB,SCtDAO,EAAiBC,EAAcC,GAC7C,OAAQD,GACN,KAAKE,EAAeC,SAClB,OAAON,EACT,KAAKK,EAAeE,OAClB,OAAOnB,EAAgBgB,EAAQf,IAAKe,EAAQd,KAC9C,KAAKe,EAAeG,OAClB,OAAOZ,EAAgBQ,EAAQf,IAAKe,EAAQd,KAC9C,KAAKe,EAAeI,MAClB,OAAOV,IACT,QACE,OAAOb,EAEb,C,SAEgBwB,EAAgBC,GAC9B,UAAWA,IAAM,SAAU,CACzB,OAAOT,EAAiBS,EAAG,K,CAG7B,OAAOT,EAAiBS,EAAER,KAAMQ,EAAEP,QACpC,CC/BA,MAAMQ,EAAe,wiP,MCeRC,EAAW,M,yBACdC,KAAAC,cAAmC7B,E,uPA8DhB,K,yBApD3B8B,iBACEF,KAAK3B,U,CA8DP8B,eAAe1B,EAAgBuB,KAAKvB,OAClCuB,KAAKI,QAAU,KAEf,GAAIC,EAAQ5B,IAAUuB,KAAKM,SAAU,CACnCN,KAAKnB,aAAemB,KAAKO,e,MACpB,IAAKF,EAAQ5B,IAAUuB,KAAKQ,YAAcR,KAAKC,cAAc5B,SAASI,GAAQ,CACnFuB,KAAKnB,aAAemB,KAAKS,c,KACpB,CACLT,KAAKI,QAAU,K,EAInBM,oBACE,IAAKL,EAAQL,KAAKQ,WAAY,CAC5BR,KAAKC,cAAgBL,EAAaI,KAAKQ,U,CAGzC,IAAKH,EAAQL,KAAKvB,OAAQ,CACxBuB,KAAKW,OAAS,KACdX,KAAK3B,U,EAITuC,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,OAAKE,MAAOf,KAAKgB,OAAS,aAAe,IACvCH,EAAA,QAAMxB,KAAK,iBACXwB,EAAA,QAAMxB,KAAK,eACXwB,EAAA,WAASE,MAAM,YAAY1B,KAAMW,KAAKiB,QAExCJ,EAAA,QAAME,MAAM,cAAcf,KAAKI,SAAWJ,KAAKnB,aAAY,K"}