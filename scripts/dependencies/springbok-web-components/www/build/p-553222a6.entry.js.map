{"version":3,"names":["defaultLayoutCss","BsDefaultLayout","this","touchStartX","touchEndX","touchThreshold","ColorTheme","Default","bsClickActionHandler","e","stopPropagation","name","detail","action","overlayMenuData","value","overlayMenuIsOpen","youtubeModalData","parseIfString","youtubeModalIsOpen","carouselModalData","carouselModalIsOpen","experienceZoneModalData","experienceZoneModalIsOpen","testBadgeModalData","testBadgeModalIsOpen","bsModalIsClosedHandler","modalId","BaseModalId","OverlayMenu","Media","handleTouchStart","touches","clientX","handleTouchEnd","changedTouches","handleTouch","async","bsSwipeAction","emit","direction","TouchDirections","Left","Right","componentDidLoad","window","onYouTubePlayerAPIReady","bsYoutubeAPIReady","render","h","Host","class","Object","assign"],"sources":["./src/components/layouts/default-layout/default-layout.scss?tag=bs-default-layout&encapsulation=shadow","./src/components/layouts/default-layout/default-layout.tsx"],"sourcesContent":[":host .default-layout {\n  color: var(--text-color);\n  background: var(--background-color);\n  background-color: var(--background-color);\n}\n\n:host .is-default {\n  --background-color: initial;\n  --text-color: initial;\n}\n\n:host .is-dark-mode {\n  --background-color: #{background-color(gray-50)};\n  --text-color: #{text-color(light)};\n}\n\n:host .is-light-mode {\n  --background-color: #{background-color('white')};\n  --text-color: #{text-color('dark')};\n}\n","import {\n  Component,\n  Host,\n  h,\n  Prop,\n  State,\n  Listen,\n  Event,\n  EventEmitter,\n  Method,\n} from '@stencil/core';\nimport { parseIfString } from '@springbokagency/stencil-base';\nimport { BaseModalId } from '../../organisms/base-modal/base-modal.types';\nimport { ColorTheme, TouchDirections } from './default-layout.types';\nimport { BsImageCarousel } from '../../organisms/image-carousel/image-carousel';\nimport { BsExperienceZoneModal } from '../../molecules/experience-zone-modal/experience-zone-modal';\nimport { BsTestBadgeModal } from '../../organisms/test-badge-modal/test-badge-modal';\nimport { HeaderNavigation } from '../../organisms/overlay-menu/overlay-menu.types';\n\n/**\n * Default layout component.\n */\n@Component({\n  tag: 'bs-default-layout',\n  styleUrl: 'default-layout.scss',\n  shadow: true,\n})\nexport class BsDefaultLayout {\n  private touchStartX = 0;\n\n  private touchEndX = 0;\n\n  private touchThreshold = 150;\n\n  /** States */\n  @State() overlayMenuIsOpen: boolean;\n\n  @State() overlayMenuData: HeaderNavigation;\n\n  @State() youtubeModalIsOpen: boolean;\n\n  @State() youtubeModalData: { videoId: string; mute: boolean };\n\n  @State() carouselModalIsOpen: boolean;\n\n  @State() carouselModalData: BsImageCarousel;\n\n  @State() experienceZoneModalIsOpen: boolean;\n\n  @State() experienceZoneModalData: BsExperienceZoneModal;\n\n  @State() testBadgeModalIsOpen: boolean;\n\n  @State() testBadgeModalData: BsTestBadgeModal;\n\n  /** Props */\n  /**\n   * Color theme\n   */\n  @Prop() theme: ColorTheme = ColorTheme.Default;\n\n  /** Listeners */\n\n  @Listen('bsClickAction')\n  @Listen('bsButtonClick')\n  bsClickActionHandler(e: CustomEvent) {\n    e.stopPropagation();\n\n    const name = e.detail.name || e.detail.action;\n\n    switch (name) {\n      case 'open-overlay-menu':\n        this.overlayMenuData = e.detail.value;\n        this.overlayMenuIsOpen = true;\n        break;\n\n      case 'open-youtube-modal':\n        this.youtubeModalData = parseIfString(e.detail.value);\n        this.youtubeModalIsOpen = true;\n        break;\n\n      case 'open-carousel-modal':\n        this.carouselModalData = e.detail.value;\n        this.carouselModalIsOpen = true;\n        break;\n\n      case 'open-experience-zone-modal':\n        this.experienceZoneModalData = e.detail.value;\n        this.experienceZoneModalIsOpen = true;\n        break;\n\n      case 'open-test-badge-modal':\n        this.testBadgeModalData = parseIfString(e.detail.value);\n        this.testBadgeModalIsOpen = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  @Listen('bsModalIsClosed')\n  bsModalIsClosedHandler(e: CustomEvent) {\n    switch (e.detail.modalId) {\n      case BaseModalId.OverlayMenu:\n        this.overlayMenuIsOpen = false;\n        break;\n\n      case BaseModalId.Media:\n        this.youtubeModalIsOpen = false;\n        this.carouselModalIsOpen = false;\n        this.experienceZoneModalIsOpen = false;\n        this.testBadgeModalIsOpen = false;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  @Listen('touchstart')\n  handleTouchStart(e: TouchEvent) {\n    this.touchStartX = e.touches[0].clientX;\n  }\n\n  @Listen('touchend')\n  handleTouchEnd(e: TouchEvent) {\n    this.touchEndX = e.changedTouches[0].clientX;\n    this.handleTouch();\n  }\n\n  /** Events */\n  /**\n   * Emitted when a swipe action is detected.\n   */\n  @Event() bsSwipeAction: EventEmitter<{ direction: TouchDirections }>;\n\n  /**\n   * Emitted when the youtube API script triggers the window.onYouTubeIframeAPIReady method.\n   */\n  @Event() bsYoutubeAPIReady: EventEmitter;\n\n  /** Methods */\n  @Method()\n  async handleTouch() {\n    if (this.touchEndX - this.touchStartX < -this.touchThreshold) {\n      this.bsSwipeAction.emit({ direction: TouchDirections.Left });\n    }\n\n    if (this.touchEndX - this.touchStartX > this.touchThreshold) {\n      this.bsSwipeAction.emit({ direction: TouchDirections.Right });\n    }\n  }\n\n  /** lifecycle hooks */\n  componentDidLoad() {\n    window.onYouTubePlayerAPIReady = () => {\n      this.bsYoutubeAPIReady.emit();\n    };\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={`default-layout`}>\n          {/* Overlay Menu */}\n          {this.overlayMenuIsOpen && (\n            <bs-overlay-menu header-navigation={this.overlayMenuData}></bs-overlay-menu>\n          )}\n\n          <main>\n            <slot />\n          </main>\n\n          {/* Youtube modal */}\n          {this.youtubeModalIsOpen && <bs-youtube-video {...this.youtubeModalData} />}\n\n          {/* Carousel modal */}\n          {this.carouselModalIsOpen && <bs-image-carousel {...this.carouselModalData} />}\n\n          {/* Experience Zone modal */}\n          {this.experienceZoneModalIsOpen && (\n            <bs-experience-zone-modal {...this.experienceZoneModalData} />\n          )}\n\n          {/* Test Badge modal */}\n          {this.testBadgeModalIsOpen && <bs-test-badge-modal {...this.testBadgeModalData} />}\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"4KAAA,MAAMA,EAAmB,8wN,MC2BZC,EAAe,M,2HAClBC,KAAAC,YAAc,EAEdD,KAAAE,UAAY,EAEZF,KAAAG,eAAiB,I,uWA2BGC,EAAWC,O,CAMvCC,qBAAqBC,GACnBA,EAAEC,kBAEF,MAAMC,EAAOF,EAAEG,OAAOD,MAAQF,EAAEG,OAAOC,OAEvC,OAAQF,GACN,IAAK,oBACHT,KAAKY,gBAAkBL,EAAEG,OAAOG,MAChCb,KAAKc,kBAAoB,KACzB,MAEF,IAAK,qBACHd,KAAKe,iBAAmBC,EAAcT,EAAEG,OAAOG,OAC/Cb,KAAKiB,mBAAqB,KAC1B,MAEF,IAAK,sBACHjB,KAAKkB,kBAAoBX,EAAEG,OAAOG,MAClCb,KAAKmB,oBAAsB,KAC3B,MAEF,IAAK,6BACHnB,KAAKoB,wBAA0Bb,EAAEG,OAAOG,MACxCb,KAAKqB,0BAA4B,KACjC,MAEF,IAAK,wBACHrB,KAAKsB,mBAAqBN,EAAcT,EAAEG,OAAOG,OACjDb,KAAKuB,qBAAuB,KAC5B,M,CAQNC,uBAAuBjB,GACrB,OAAQA,EAAEG,OAAOe,SACf,KAAKC,EAAYC,YACf3B,KAAKc,kBAAoB,MACzB,MAEF,KAAKY,EAAYE,MACf5B,KAAKiB,mBAAqB,MAC1BjB,KAAKmB,oBAAsB,MAC3BnB,KAAKqB,0BAA4B,MACjCrB,KAAKuB,qBAAuB,MAC5B,M,CAQNM,iBAAiBtB,GACfP,KAAKC,YAAcM,EAAEuB,QAAQ,GAAGC,O,CAIlCC,eAAezB,GACbP,KAAKE,UAAYK,EAAE0B,eAAe,GAAGF,QACrC/B,KAAKkC,a,CAgBPC,oBACE,GAAInC,KAAKE,UAAYF,KAAKC,aAAeD,KAAKG,eAAgB,CAC5DH,KAAKoC,cAAcC,KAAK,CAAEC,UAAWC,EAAgBC,M,CAGvD,GAAIxC,KAAKE,UAAYF,KAAKC,YAAcD,KAAKG,eAAgB,CAC3DH,KAAKoC,cAAcC,KAAK,CAAEC,UAAWC,EAAgBE,O,EAKzDC,mBACEC,OAAOC,wBAA0B,KAC/B5C,KAAK6C,kBAAkBR,MAAM,C,CAIjCS,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,OAAKE,MAAO,kBAETjD,KAAKc,mBACJiC,EAAA,uCAAoC/C,KAAKY,kBAG3CmC,EAAA,YACEA,EAAA,cAID/C,KAAKiB,oBAAsB8B,EAAA,mBAAAG,OAAAC,OAAA,GAAsBnD,KAAKe,mBAGtDf,KAAKmB,qBAAuB4B,EAAA,oBAAAG,OAAAC,OAAA,GAAuBnD,KAAKkB,oBAGxDlB,KAAKqB,2BACJ0B,EAAA,2BAAAG,OAAAC,OAAA,GAA8BnD,KAAKoB,0BAIpCpB,KAAKuB,sBAAwBwB,EAAA,sBAAAG,OAAAC,OAAA,GAAyBnD,KAAKsB,sB"}