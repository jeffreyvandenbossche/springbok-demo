{"file":"bs-form-field.entry.js","mappings":"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","names":[],"sources":["./src/validators/validators.ts","./src/validators/validators.factory.ts","./src/components/molecules/form-field/form-field.scss?tag=bs-form-field&encapsulation=shadow","./src/components/molecules/form-field/form-field.tsx"],"sourcesContent":["import type { Validator } from './validators.types';\n\nexport const defaultValidator: Validator<any> = {\n  validate: () => true,\n};\n\nexport function LengthValidator(min: string, max: string): Validator<string> {\n  return {\n    validate: (value: string) => {\n      const regex = new RegExp(`^.{${min || 0},${max || ''}}$`);\n\n      return regex.test(value);\n    },\n    errorMessage: 'LengthError',\n  };\n}\n\nexport function MinMaxValidator(min: string, max: string): Validator<string> {\n  return {\n    validate: (value: string) => {\n      if (Number(min) && Number(value) < Number(min)) {\n        return false;\n      }\n\n      if (Number(max) && Number(value) > Number(max)) {\n        return false;\n      }\n\n      if (new Date(min) instanceof Date && new Date(value) < new Date(min)) {\n        return false;\n      }\n\n      if (new Date(max) instanceof Date && new Date(value) > new Date(max)) {\n        return false;\n      }\n\n      return true;\n    },\n    errorMessage: 'numberError',\n  };\n}\n\nexport function EmailValidator(): Validator<string> {\n  return {\n    validate: (value: string) => {\n      const regex =\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\u0600-\\u06FF\\u0400-\\u04FF\\u0370-\\u03ff\\-0-9]+\\.)+[a-zA-Z\\u0600-\\u06FF\\u0400-\\u04FF\\u0370-\\u03ff]{2,}))$/;\n\n      return regex.test(value);\n    },\n    errorMessage: 'emailError',\n  };\n}\n\nexport const DateTimeValidator: Validator<string> = {\n  validate: (value: string) => {\n    const dateValue = new Date(value);\n\n    if (dateValue instanceof Date) {\n      return true;\n    }\n\n    return false;\n  },\n  errorMessage: 'dateTimeError',\n};\n","import {\n  defaultValidator,\n  EmailValidator,\n  DateTimeValidator,\n  LengthValidator,\n  MinMaxValidator,\n} from './validators';\n\nimport { Validator, ValidatorEntry, ValidatorNames } from './validators.types';\n\nexport function validatorFactory(name: string, options: any): Validator<any> {\n  switch (name) {\n    case ValidatorNames.DateTime:\n      return DateTimeValidator;\n    case ValidatorNames.Length:\n      return LengthValidator(options.min, options.max);\n    case ValidatorNames.MinMax:\n      return MinMaxValidator(options.min, options.max);\n    case ValidatorNames.Email:\n      return EmailValidator();\n    default:\n      return defaultValidator;\n  }\n}\n\nexport function getValidator<A>(v: string | ValidatorEntry): Validator<A> {\n  if (typeof v === 'string') {\n    return validatorFactory(v, null);\n  }\n\n  return validatorFactory(v.name, v.options);\n}\n",":host {\n  @include reset-host;\n  position: relative;\n}\n\n:host .form-field {\n  position: relative;\n  width: 100%;\n  min-width: max-content;\n  min-height: rem(48);\n  margin-bottom: rem(4);\n  background-color: $white;\n  border: 1px solid $gray-400;\n  border-bottom: 0;\n  border-radius: 3px;\n  box-shadow: 0 1px 0 $gray-900;\n}\n\n:host ::slotted(.form-label) {\n  @include font(label);\n  position: absolute;\n  top: rem(12);\n  right: rem(55);\n  left: rem(24);\n  width: fit-content;\n  overflow: hidden;\n  color: $black;\n  white-space: nowrap;\n  cursor: inherit;\n  transition:\n    top 0.3s ease,\n    font-size 0.3s ease;\n}\n\n:host .form-icon {\n  position: absolute;\n  top: rem(24);\n  right: rem(24);\n  font-size: rem(24);\n  color: $black;\n  pointer-events: none;\n  transform: translateY(-50%);\n}\n\n:host .form-error {\n  display: block;\n  margin-bottom: rem(10);\n  color: $primary;\n}\n\n:host([focused]),\n:host([filled]) {\n  ::slotted(.form-label) {\n    top: rem(6);\n    font-size: font-size(x-small);\n    color: $gray-200;\n  }\n}\n\n:host([invalid]) {\n  .form-field {\n    box-shadow: 0 2px 0 $primary;\n  }\n}\n\n:host([hidden]) {\n  display: none !important;\n}\n","import { Component, h, Host, Method, Prop, Watch } from '@stencil/core';\nimport { isEmpty } from '@springbokagency/stencil-base';\nimport { IconName } from '../../../components';\nimport { defaultValidator } from '../../../validators/validators';\nimport { Validator, ValidatorEntry } from '../../../validators/validators.types';\nimport { getValidator } from '../../../validators/validators.factory';\n\n/**\n * The form field component.\n */\n@Component({\n  tag: 'bs-form-field',\n  styleUrl: 'form-field.scss',\n  shadow: true,\n})\nexport class BsFormField {\n  private validatorFunc: Validator<string> = defaultValidator;\n\n  private errorMessage: string;\n\n  /**\n   * The value of the form field\n   */\n  @Prop() value: string;\n\n  @Watch('value')\n  valueDidChange() {\n    this.validate();\n  }\n\n  /**\n   * The name of the form field\n   */\n  @Prop() name: string;\n\n  /**\n   * Wether or not the form field is filled\n   */\n  @Prop({ reflect: true }) filled: boolean;\n\n  /**\n   * Wether or not the form field is focussed\n   */\n  @Prop({ reflect: true }) focused: boolean;\n\n  /**\n   * Wether or not the form field is invalid\n   */\n  @Prop({ reflect: true }) invalid: boolean;\n\n  /**\n   * Wether or not the form field is required\n   */\n  @Prop() required: boolean;\n\n  /**\n   * The error message to be displayed on the form field in case of invalidity\n   */\n  @Prop() invalidMessage: string;\n\n  /**\n   * The error message to be displayed on the form field when the required field is not populated\n   */\n  @Prop() requiredMessage: string;\n\n  /**\n   * The icon to be displayed on the right hand side of the form field\n   */\n  @Prop() icon?: IconName;\n\n  /**\n   * The label describing the form field\n   */\n  @Prop() label?: string;\n\n  /**\n   * A border styling for text input and select fields\n   */\n  @Prop() border?: boolean = true;\n\n  /**\n   * The validator function name used to validate the form field\n   */\n  @Prop() validator?: string | ValidatorEntry;\n\n  /**\n   * A method to run the validation on the form input value\n   */\n  @Method()\n  async validate(value: string = this.value) {\n    this.invalid = true;\n\n    if (isEmpty(value) && this.required) {\n      this.errorMessage = this.requiredMessage;\n    } else if (!isEmpty(value) && this.validator && !this.validatorFunc.validate(value)) {\n      this.errorMessage = this.invalidMessage;\n    } else {\n      this.invalid = false;\n    }\n  }\n\n  componentWillLoad() {\n    if (!isEmpty(this.validator)) {\n      this.validatorFunc = getValidator(this.validator);\n    }\n\n    if (!isEmpty(this.value)) {\n      this.filled = true;\n      this.validate();\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={this.border ? 'form-field' : ''}>\n          <slot name=\"form-element\" />\n          <slot name=\"form-label\" />\n          <bs-icon class=\"form-icon\" name={this.icon} />\n        </div>\n        <span class=\"form-error\">{this.invalid && this.errorMessage}&nbsp;</span>\n      </Host>\n    );\n  }\n}\n"],"version":3}