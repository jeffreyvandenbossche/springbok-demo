{"file":"bs-click-action.bs-icon.entry.js","mappings":";;;;AAAA,MAAM,cAAc,GAAG,yyNAAyyN;;MCYnzN,aAAa;;;;;;gBAcS,eAAe,CAAC,MAAM;;;;;;;EAgC/C,WAAW,CAAC,KAAiB;IACnC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC;IAEhE,IAAI,IAAI,IAAI,MAAM,KAAK,iBAAiB,CAAC,QAAQ,EAAE;MACjD,OAAO;KACR;IAED,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IACxD,KAAK,CAAC,eAAe,EAAE,CAAC;IACxB,KAAK,CAAC,cAAc,EAAE,CAAC;GACxB;EAED,MAAM;IACJ,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;IAC9C,MAAM,OAAO,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC;IAChD,MAAM,KAAK,GAAG,OAAO,KAAK,QAAQ,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC;IAErF,QACE,EAAC,IAAI,IAAC,KAAK,EAAC,iBAAiB,IAC3B,EAAC,OAAO,kBACN,KAAK,EAAE,IAAI,CAAC,QAAQ,IAChB,KAAK,kBACG,IAAI,CAAC,aAAa,EAC9B,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAEpC,eAAQ,CACA,CACL,EACP;GACH;;;;ACvFH,MAAM,OAAO,GAAG,gvNAAgvN;;MCanvN,MAAM;;;;;EAMjB,MAAM;IACJ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;MACvB,QACE,EAAC,IAAI,QACH,gBAAU,KAAK,EAAC,MAAM,iBAAa,MAAM,EAAC,GAAG,EAAE,YAAY,CAAC,UAAU,IAAI,CAAC,IAAI,MAAM,CAAC,GAAI,CACrF,EACP;KACH;IAED,OAAO,EAAC,IAAI,OAAQ,CAAC;GACtB;;;;;;;","names":[],"sources":["./src/components/atoms/click-action/click-action.scss?tag=bs-click-action","./src/components/atoms/click-action/click-action.tsx","./src/components/atoms/icon/icon.scss?tag=bs-icon&encapsulation=shadow","./src/components/atoms/icon/icon.tsx"],"sourcesContent":[".bs-click-action {\n  line-height: 0;\n\n  button,\n  a {\n    color: inherit;\n\n    cursor: pointer;\n    background-color: transparent;\n    border: 0;\n\n    &:disabled {\n      cursor: default;\n    }\n  }\n\n  a {\n    color: currentColor;\n    text-decoration: none;\n  }\n}\n","import { Component, h, Prop, Host, Event, EventEmitter } from '@stencil/core';\nimport { isEmpty } from '@springbokagency/stencil-base';\nimport { ClickActionTarget, ClickActionType, type ClickActionEvent } from './click-action.types';\n\n/**\n * The click action component.\n */\n@Component({\n  tag: 'bs-click-action',\n  styleUrl: 'click-action.scss',\n  shadow: false,\n})\nexport class BsClickAction {\n  /**\n   * The name for the bsClickAction event.\n   */\n  @Prop() name?: string;\n\n  /**\n   * The value for the bsClickAction event.\n   */\n  @Prop() value?: any;\n\n  /**\n   * The type of button for the bsClickAction component.\n   */\n  @Prop() type?: ClickActionType = ClickActionType.Button;\n\n  /**\n   * The href of bsClickAction component, will convert the button into a link.\n   */\n  @Prop() href?: string;\n\n  /**\n   * The target of the provided href.\n   */\n  @Prop() target?: ClickActionTarget;\n\n  /**\n   * The class of the button or link.\n   */\n  @Prop() tagClass?: string;\n\n  /**\n   * Disabled state of inner tag.\n   */\n  @Prop() disabled?: boolean;\n\n  /**\n   * Use aria-label attribute when link/button doesn't have any text\n   */\n  @Prop() ariaLabelText?: string;\n\n  /**\n   * Emitted when the component is clicked.\n   */\n  @Event() bsClickAction: EventEmitter<ClickActionEvent>;\n\n  private handleClick(event: MouseEvent) {\n    const { name, value, type, href, target, bsClickAction } = this;\n\n    if (href && target !== ClickActionTarget.Internal) {\n      return;\n    }\n\n    bsClickAction.emit({ name, value, type, href, target });\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  render() {\n    const { type, href, target, disabled } = this;\n    const TagType = !isEmpty(href) ? 'a' : 'button';\n    const attrs = TagType === 'button' ? { type, disabled } : { href, target, disabled };\n\n    return (\n      <Host class=\"bs-click-action\">\n        <TagType\n          class={this.tagClass}\n          {...attrs}\n          aria-label={this.ariaLabelText}\n          onClick={this.handleClick.bind(this)}\n        >\n          <slot />\n        </TagType>\n      </Host>\n    );\n  }\n}\n",":host {\n  @include reset-host;\n  @include center('flex', 'both');\n\n  .icon {\n    color: inherit;\n    fill: currentColor;\n  }\n}\n","import { Component, h, Prop, getAssetPath, Host } from '@stencil/core';\nimport { isEmpty } from '@springbokagency/stencil-base';\nimport { IconName } from './icon.types';\n\n/**\n * The icon component.\n */\n@Component({\n  tag: 'bs-icon',\n  styleUrl: 'icon.scss',\n  shadow: true,\n  assetsDirs: ['assets'],\n})\nexport class BsIcon {\n  /**\n   * Icon's name\n   */\n  @Prop() name: IconName;\n\n  render() {\n    if (!isEmpty(this.name)) {\n      return (\n        <Host>\n          <ion-icon class=\"icon\" aria-hidden=\"true\" src={getAssetPath(`assets/${this.name}.svg`)} />\n        </Host>\n      );\n    }\n\n    return <Host></Host>;\n  }\n}\n"],"version":3}