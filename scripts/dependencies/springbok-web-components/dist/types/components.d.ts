/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { BsTitle } from "./components/atoms/title/title";
import { BsImage } from "./components/atoms/image/image";
import { BaseModalId, TransitionType } from "./components/organisms/base-modal/base-modal.types";
import { BreadcrumbData } from "./components/molecules/breadcrumb/breadcrumb.types";
import { ButtonClickEvent, ButtonTarget, ButtonType, ButtonVariant } from "./components/atoms/button/button.types";
import { IconName } from "./components/atoms/icon/icon.types";
import { ClickActionEvent, ClickActionTarget, ClickActionType } from "./components/atoms/click-action/click-action.types";
import { BsButton } from "./components/atoms/button/button";
import { ColorTheme, TouchDirections } from "./components/layouts/default-layout/default-layout.types";
import { ExperienceZone, ExperienceZoneComponent, ExperienceZoneLayout, ExperienceZoneStory } from "./components/molecules/experience-zone/experience-zone.types";
import { YoutubeControlClickEvent } from "./components/molecules/youtube-control/youtube-control.types";
import { SocialLinks } from "./components/molecules/follow-us-banner/follow-us-banner.types";
import { CheckboxItem } from "./components/molecules/form-checkbox/form-checkbox.types";
import { IconName as IconName1 } from "./components";
import { ValidatorEntry } from "./validators/validators.types";
import { InputType } from "./components/molecules/form-input/form-input.types";
import { RadioButtonItem } from "./components/molecules/form-radio-button/form-radio-button.types";
import { SelectOption } from "./components/molecules/form-select/form-select.types";
import { Variant } from "./components/organisms/header-banner/header-banner.types";
import { BsVideoCard } from "./components/molecules/video-card/video-card";
import { HeaderNavigation } from "./components/organisms/overlay-menu/overlay-menu.types";
import { BsArticleCard } from "./components/molecules/article-card/article-card";
import { BsTestBadgeDetail } from "./components/molecules/test-badge-detail/test-badge-detail";
import { TestBadge } from "./components/organisms/test-badge/test-badge.types";
import { TextColor, TextSize } from "./components/atoms/text/text.types";
import { TitleColor, TitleSize, TitleTag, TitleVariant } from "./components/atoms/title/title.types";
import { PlayerState, YoutubeControlUpdateEvent } from "./components/organisms/youtube-video/youtube-video.types";
export { BsTitle } from "./components/atoms/title/title";
export { BsImage } from "./components/atoms/image/image";
export { BaseModalId, TransitionType } from "./components/organisms/base-modal/base-modal.types";
export { BreadcrumbData } from "./components/molecules/breadcrumb/breadcrumb.types";
export { ButtonClickEvent, ButtonTarget, ButtonType, ButtonVariant } from "./components/atoms/button/button.types";
export { IconName } from "./components/atoms/icon/icon.types";
export { ClickActionEvent, ClickActionTarget, ClickActionType } from "./components/atoms/click-action/click-action.types";
export { BsButton } from "./components/atoms/button/button";
export { ColorTheme, TouchDirections } from "./components/layouts/default-layout/default-layout.types";
export { ExperienceZone, ExperienceZoneComponent, ExperienceZoneLayout, ExperienceZoneStory } from "./components/molecules/experience-zone/experience-zone.types";
export { YoutubeControlClickEvent } from "./components/molecules/youtube-control/youtube-control.types";
export { SocialLinks } from "./components/molecules/follow-us-banner/follow-us-banner.types";
export { CheckboxItem } from "./components/molecules/form-checkbox/form-checkbox.types";
export { IconName as IconName1 } from "./components";
export { ValidatorEntry } from "./validators/validators.types";
export { InputType } from "./components/molecules/form-input/form-input.types";
export { RadioButtonItem } from "./components/molecules/form-radio-button/form-radio-button.types";
export { SelectOption } from "./components/molecules/form-select/form-select.types";
export { Variant } from "./components/organisms/header-banner/header-banner.types";
export { BsVideoCard } from "./components/molecules/video-card/video-card";
export { HeaderNavigation } from "./components/organisms/overlay-menu/overlay-menu.types";
export { BsArticleCard } from "./components/molecules/article-card/article-card";
export { BsTestBadgeDetail } from "./components/molecules/test-badge-detail/test-badge-detail";
export { TestBadge } from "./components/organisms/test-badge/test-badge.types";
export { TextColor, TextSize } from "./components/atoms/text/text.types";
export { TitleColor, TitleSize, TitleTag, TitleVariant } from "./components/atoms/title/title.types";
export { PlayerState, YoutubeControlUpdateEvent } from "./components/organisms/youtube-video/youtube-video.types";
export namespace Components {
    /**
     * The Accordion component.
     */
    interface BsAccordion {
        /**
          * Section's title.
         */
        "mainTitle"?: BsTitle | string;
    }
    interface BsAccordionItem {
        /**
          * Accordion's title.
         */
        "accordionItemTitle": string;
        /**
          * Accordion's active state
         */
        "active"?: boolean;
        /**
          * Is the accordion expandable?
         */
        "expandable"?: boolean;
        /**
          * Accordion's unique identifier used for accessibility.
         */
        "identifier": string;
    }
    /**
     * Article teaser card component.
     */
    interface BsArticleCard {
        /**
          * The cta label.
         */
        "articleCta": string;
        /**
          * The article href.
         */
        "articleHref": string;
        /**
          * The article related image.
         */
        "articleImage": BsImage | string;
        /**
          * The article title.
         */
        "articleTitle": string;
    }
    /**
     * Author component.
     */
    interface BsAuthor {
        /**
          * Main about title
         */
        "aboutTitle": string;
        /**
          * Description.
         */
        "authorImage": BsImage | string;
        /**
          * Author's name
         */
        "authorName": string;
        /**
          * Author's job position
         */
        "authorPosition": string;
        /**
          * Description text
         */
        "description": string;
    }
    /**
     * Component containing all the modals "focus trap" logic
     * This is a way to get around StencilJS not allowing class inheritance
     * Each modal that requires focus trap functionality
     * needs to be nested inside this base component
     */
    interface BsBaseModal {
        /**
          * Methods
         */
        "close": () => Promise<void>;
        "handleFocus": () => Promise<void>;
        "modalCanBeClosed"?: boolean;
        /**
          * Props
         */
        "modalId": BaseModalId;
        "nextSlide": () => Promise<void>;
        "previousSlide": () => Promise<void>;
        "transitionType"?: TransitionType;
    }
    /**
     * Blog header component.
     */
    interface BsBlogHeader {
        /**
          * A (json)object string containing the bs-title elemement properties.
         */
        "head": BsTitle | string;
        /**
          * A (json)object string containing the bs-image elemement properties.
         */
        "image": BsImage | string;
        /**
          * A (json)object string containing the bs-image that is used for the logo elemement properties.
         */
        "logo": BsImage | string;
    }
    /**
     * The breadcrumb component.
     */
    interface BsBreadcrumb {
        /**
          * Breadcrumb items data.
         */
        "data": BreadcrumbData[] | string;
    }
    /**
     * Description of the component.
     */
    interface BsButton {
        /**
          * Define what kind of action the button will be used for (i.e. "open-video-modal")
         */
        "action"?: string;
        /**
          * Button's style variant
         */
        "ghost"?: boolean;
        /**
          * Links's href
         */
        "href"?: string;
        /**
          * Button's icon
         */
        "iconLeft"?: IconName;
        /**
          * Second button's icon
         */
        "iconRight"?: IconName;
        /**
          * Disable button interactions
         */
        "isDisabled"?: boolean;
        /**
          * Make the button take the full-width
         */
        "isFullWidth"?: boolean;
        /**
          * The class of the button or link.
         */
        "tagClass"?: string;
        /**
          * Link's target
         */
        "target"?: ButtonTarget;
        /**
          * Button's text
         */
        "text": string;
        /**
          * Button's type
         */
        "type"?: ButtonType;
        /**
          * The value for the bsClickEvent.
         */
        "value"?: any;
        /**
          * Button's style variant
         */
        "variant"?: ButtonVariant;
    }
    /**
     * Callout box component.
     */
    interface BsCalloutBox {
        /**
          * Callout box content text
         */
        "text": string;
        /**
          * Callout box variation
         */
        "variation": string;
    }
    /**
     * Carousel card component.
     */
    interface BsCarouselCard {
        /**
          * Should autoplay be enabled?
         */
        "autoplay"?: boolean;
        /**
          * The title of the carousel displayed in the footer.
         */
        "carouselTitle"?: string;
        /**
          * The cta label.
         */
        "cta": string;
        /**
          * The list of images to be shown in the carousel.
         */
        "imageCollection": BsImage[] | string;
        /**
          * The logo to be displayed in the footer.
         */
        "logo"?: BsImage | string;
        /**
          * Should the carousel be displayed in slim variation.
         */
        "slim"?: boolean;
        /**
          * Should the autoplay be slow?
         */
        "slow"?: boolean;
    }
    /**
     * The click action component.
     */
    interface BsClickAction {
        /**
          * Use aria-label attribute when link/button doesn't have any text
         */
        "ariaLabelText"?: string;
        /**
          * Disabled state of inner tag.
         */
        "disabled"?: boolean;
        /**
          * The href of bsClickAction component, will convert the button into a link.
         */
        "href"?: string;
        /**
          * The name for the bsClickAction event.
         */
        "name"?: string;
        /**
          * The class of the button or link.
         */
        "tagClass"?: string;
        /**
          * The target of the provided href.
         */
        "target"?: ClickActionTarget;
        /**
          * The type of button for the bsClickAction component.
         */
        "type"?: ClickActionType;
        /**
          * The value for the bsClickAction event.
         */
        "value"?: any;
    }
    /**
     * The container component.
     */
    interface BsContainer {
        /**
          * Should the content be centered with a max width on desktop?
         */
        "contained"?: boolean;
        /**
          * Should the content be centered with a max width on mobile?
         */
        "mobileFullWidth"?: boolean;
    }
    /**
     * Country link card component.
     */
    interface BsCountryCard {
        /**
          * The list of links to be rendered.
         */
        "brands": { label: string; href: string }[] | string;
        /**
          * The country name.
         */
        "countryTitle": BsTitle | string;
        /**
          * The flag image.
         */
        "flag": BsImage | string;
    }
    /**
     * CTA Banner component.
     */
    interface BsCtaBanner {
        /**
          * The (json)object containing the bs-title element properties
         */
        "bannerTitle": BsTitle | string;
        /**
          * The (json)object containing the bs-button element properties.
         */
        "button": BsButton | string;
        /**
          * Should the background be filled up?
         */
        "filled"?: boolean;
        /**
          * The banner subtitle
         */
        "subtitle"?: string;
        /**
          * The banner variant.
         */
        "variant"?: ButtonVariant;
    }
    /**
     * Dark-theme overlay component.
     */
    interface BsDarkOverlay {
        /**
          * This method triggers the close method on the modal.
         */
        "closeOverlay": () => Promise<void>;
        /**
          * This method triggers the handle focus method on the modal.
         */
        "focusTrap": () => Promise<void>;
        /**
          * The logo to be displayed in the footer.
         */
        "logo": BsImage | string;
        /**
          * The title of the carousel displayed in the footer.
         */
        "mainTitle"?: string;
        /**
          * This method triggers the next slide method on the modal.
         */
        "nextSlide": () => Promise<void>;
        /**
          * This method triggers the previous slide method on the modal.
         */
        "previousSlide": () => Promise<void>;
        /**
          * Does the content contain multiple screens?
         */
        "screens"?: boolean;
    }
    /**
     * Date component.
     */
    interface BsDate {
        /**
          * Raw date string in yyyy-mm-dd format
         */
        "date": string;
        /**
          * Has white text?
         */
        "isWhite"?: boolean;
        /**
          * Language's iso code
         */
        "languageIsoCode": string;
    }
    /**
     * Default layout component.
     */
    interface BsDefaultLayout {
        /**
          * Methods
         */
        "handleTouch": () => Promise<void>;
        /**
          * Color theme
         */
        "theme": ColorTheme;
    }
    /**
     * The dot navigation component used to indicate the current index in a list of views.
     */
    interface BsDotNavigation {
        /**
          * The active dot index.
         */
        "index": number;
        /**
          * The amount of dots in the navigation.
         */
        "items": number;
        /**
          * Should the auto navigation be slow?
         */
        "slow"?: boolean;
    }
    /**
     * Experience Zone teaser component.
     */
    interface BsExperienceZone {
        /**
          * The Experience Zone contract.
         */
        "experienceZoneData": ExperienceZone | string;
        /**
          * The Experience Zone Teaser title.
         */
        "teaserTitle": BsTitle | string;
    }
    /**
     * Experience Zone card component.
     */
    interface BsExperienceZoneCard {
        /**
          * The Experience Zone card image.
         */
        "cardImage": BsImage | string;
        /**
          * The Experience Zone card title.
         */
        "cardTitle": string;
        /**
          * Should the layout for singular items be applied?
         */
        "singular"?: boolean;
        /**
          * Should the image have a play icon?
         */
        "video"?: boolean;
    }
    /**
     * Experience Zone modal component.
     */
    interface BsExperienceZoneModal {
        /**
          * State
         */
        "activeIndex"?: number;
        /**
          * The Experience Zone story data.
         */
        "experienceZoneData": ExperienceZone | string;
    }
    /**
     * Experience Zone screen component.
     */
    interface BsExperienceZoneScreen {
        /**
          * Is this screen currently active?
         */
        "active"?: boolean;
        /**
          * The Experience Zone card image.
         */
        "components"?: ExperienceZoneComponent[] | string;
        /**
          * The Experience Zone screen disclaimer.
         */
        "disclaimer"?: string;
        /**
          * The Experience Zone screen layout name.
         */
        "layout": ExperienceZoneLayout;
    }
    /**
     * Experience Zone story component.
     */
    interface BsExperienceZoneStory {
        /**
          * Is this story currently active?
         */
        "active"?: boolean;
        /**
          * Should navigation arrows be hidden?
         */
        "hideNavigation"?: boolean;
        /**
          * The Experience Zone story data.
         */
        "storyData": ExperienceZoneStory | string;
    }
    /**
     * Follow us banner component.
     */
    interface BsFollowUsBanner {
        /**
          * Section's title
         */
        "sectionTitle": string;
        /**
          * The social media links.
         */
        "socialLinks": SocialLinks[] | string;
    }
    /**
     * The form checkbox component.
     */
    interface BsFormCheckbox {
        /**
          * The label displayed after the checkbox
         */
        "label"?: string;
        /**
          * The unique name to identify the form element
         */
        "name": string;
        /**
          * Description.
         */
        "options": CheckboxItem[] | string;
        /**
          * Wether or not the checkbox is required
         */
        "required"?: boolean;
        /**
          * The error message to be displayed when the required field remains empty
         */
        "requiredMessage": string;
    }
    /**
     * The form container component.
     */
    interface BsFormContainer {
        /**
          * The endpoint for the submit request.
         */
        "action": string;
        /**
          * Message to inform the user there are issues with the filled in values.
         */
        "invalidFormMessage": string;
        /**
          * The recaptcha Public site key
         */
        "recaptchaSiteKey": string;
        /**
          * Message to inform the usere something went wrong while submitting the form.
         */
        "submitErrorMessage": string;
        /**
          * The page the user is redirected to in case of a successfull submit.
         */
        "successRedirect": string;
    }
    /**
     * The form field component.
     */
    interface BsFormField {
        /**
          * A border styling for text input and select fields
         */
        "border"?: boolean;
        /**
          * Wether or not the form field is filled
         */
        "filled": boolean;
        /**
          * Wether or not the form field is focussed
         */
        "focused": boolean;
        /**
          * The icon to be displayed on the right hand side of the form field
         */
        "icon"?: IconName1;
        /**
          * Wether or not the form field is invalid
         */
        "invalid": boolean;
        /**
          * The error message to be displayed on the form field in case of invalidity
         */
        "invalidMessage": string;
        /**
          * The label describing the form field
         */
        "label"?: string;
        /**
          * The name of the form field
         */
        "name": string;
        /**
          * Wether or not the form field is required
         */
        "required": boolean;
        /**
          * The error message to be displayed on the form field when the required field is not populated
         */
        "requiredMessage": string;
        /**
          * A method to run the validation on the form input value
         */
        "validate": (value?: string) => Promise<void>;
        /**
          * The validator function name used to validate the form field
         */
        "validator"?: string | ValidatorEntry;
        /**
          * The value of the form field
         */
        "value": string;
    }
    /**
     * The form input component.
     */
    interface BsFormInput {
        /**
          * The icon to be displayed on the right hand side of the form field
         */
        "icon"?: IconName1;
        /**
          * The error message to be displayed when the field has an invalid input
         */
        "invalidMessage"?: string;
        /**
          * The label describing the form field
         */
        "label": string;
        /**
          * Wether or not the input field is required
         */
        "max"?: string;
        /**
          * Wether or not the input field is required
         */
        "min"?: string;
        /**
          * The unique name to identify the form element
         */
        "name": string;
        /**
          * Wether or not the input field is required
         */
        "required"?: boolean;
        /**
          * The error message to be displayed when the required field remains empty
         */
        "requiredMessage": string;
        /**
          * Wether or not the textarea is resizeable by the user
         */
        "resizeable"?: boolean;
        /**
          * The default amount of rows the textarea has
         */
        "rows"?: number;
        /**
          * The unique name to identify the form element
         */
        "type": InputType;
        /**
          * The value of the form field
         */
        "value"?: string;
    }
    /**
     * The form radio component.
     */
    interface BsFormRadioButton {
        /**
          * The label displayed after the checkbox
         */
        "label"?: string;
        /**
          * The unique name to identify the form element
         */
        "name": string;
        /**
          * A list of values for each radio button
         */
        "options": RadioButtonItem[] | string;
        /**
          * Wether or not the checkbox is required
         */
        "required"?: boolean;
        /**
          * The error message to be displayed when the required field remains empty
         */
        "requiredMessage": string;
    }
    /**
     * The form select component.
     */
    interface BsFormSelect {
        /**
          * The icon to be displayed on the right hand side of the form field
         */
        "icon"?: IconName1;
        /**
          * The label describing the form field
         */
        "label": string;
        /**
          * The unique name to identify the form element
         */
        "name": string;
        /**
          * The list of options that will populate the select field.
         */
        "options": SelectOption[] | string;
        /**
          * Wether or not the input field is required
         */
        "required"?: boolean;
        /**
          * The error message to be displayed when the required field remains empty
         */
        "requiredMessage": string;
    }
    /**
     * Header banner component.
     */
    interface BsHeaderBanner {
        /**
          * A (json)object string containing the bs-button elemement properties.
         */
        "button"?: BsButton | string;
        /**
          * A (json)object string containing the bs-title elemement properties.
         */
        "headerTitle": BsTitle | string;
        /**
          * A (json)object string containing the bs-image elemement properties.
         */
        "image"?: BsImage | string;
        /**
          * A label to be displayed on the top if there is no logo.
         */
        "label"?: string;
        /**
          * A (json)object string containing the bs-image that is used for the logo elemement properties.
         */
        "logo"?: BsImage | string;
        /**
          * The header banner subtitle.
         */
        "subtitle"?: string;
        /**
          * The header banner variant. Either 'image' or 'video'.
         */
        "variant": Variant;
        /**
          * A (json)object string containing the bs-video-card elemement properties.
         */
        "video"?: BsVideoCard | string;
    }
    /**
     * Header navigation component.
     */
    interface BsHeaderNavigation {
        /**
          * The .
         */
        "headerNavigation": HeaderNavigation | string;
    }
    /**
     * The icon component.
     */
    interface BsIcon {
        /**
          * Icon's name
         */
        "name": IconName;
    }
    /**
     * Description of the component.
     */
    interface BsImage {
        /**
          * Image's alternative text
         */
        "altText"?: string;
        /**
          * Image's caption
         */
        "caption"?: string;
        /**
          * Determine if text under or on image
         */
        "captionCover"?: boolean;
        /**
          * Determine if image is stretching to fill its container's size
         */
        "cover"?: boolean;
        /**
          * Image's height
         */
        "height": string | number;
        /**
          * Image's sizes
         */
        "imageSizes"?: string;
        /**
          * "itemprop" attribute
         */
        "itemprop"?: string;
        /**
          * Enable lazy loading?
         */
        "lazy"?: boolean;
        /**
          * Source image
         */
        "source"?: string;
        /**
          * Image's src
         */
        "src": string;
        /**
          * Image's srcset
         */
        "srcset"?: string;
        /**
          * Image's width
         */
        "width": string | number;
    }
    /**
     * The image carousel component.
     */
    interface BsImageCarousel {
        /**
          * Should autoplay be enabled?
         */
        "autoplay"?: boolean;
        /**
          * The title of the carousel displayed in the footer.
         */
        "carouselTitle"?: string;
        /**
          * The list of images to be shown in the carousel.
         */
        "imageCollection": BsImage[] | string;
        /**
          * The index of the featured image.
         */
        "index": number;
        /**
          * The logo to be displayed in the footer.
         */
        "logo"?: BsImage | string;
        /**
          * Should the autoplay be slow?
         */
        "slow"?: boolean;
    }
    /**
     * Lark-theme overlay component.
     */
    interface BsLightOverlay {
        /**
          * This method triggers the close method on the modal.
         */
        "closeOverlay": () => Promise<void>;
        /**
          * This method triggers the handle focus method on the modal.
         */
        "focusTrap": () => Promise<void>;
        /**
          * This method triggers the next slide method on the modal.
         */
        "nextSlide": () => Promise<void>;
        /**
          * This method triggers the previous slide method on the modal.
         */
        "previousSlide": () => Promise<void>;
        /**
          * Does the content contain multiple screens?
         */
        "screens"?: boolean;
    }
    /**
     * Share banner component.
     */
    interface BsLogoBar {
        /**
          * The logo to be displayed .
         */
        "logo"?: BsImage | string;
    }
    /**
     * Newsletter banner component.
     */
    interface BsNewsletterBanner {
        /**
          * Description.
         */
        "button": BsButton | string;
        /**
          * Section's title
         */
        "sectionTitle": string;
        /**
          * Subtitle
         */
        "subtitle": string;
    }
    /**
     * Overlay menu component.
     */
    interface BsOverlayMenu {
        /**
          * The header navigation data.
         */
        "headerNavigation": HeaderNavigation | string;
    }
    /**
     * Product card component.
     */
    interface BsProductCard {
        /**
          * The product card image.
         */
        "cardImage": BsImage | string;
        /**
          * The cta label.
         */
        "cardText": string;
        /**
          * The product card title.
         */
        "cardTitle": string;
    }
    /**
     * The Quote component is used for indicating that a particular section of text is being taken from another website or other source.
     */
    interface BsQuote {
        /**
          * Prop for adding an image
         */
        "authorImage": BsImage | string;
        /**
          * Author's name
         */
        "authorName": string;
        /**
          * Author's job position
         */
        "authorPosition": string;
        /**
          * A URL that designates a source document or message for the information quoted. Used for SEO purposes.
         */
        "source"?: string;
        /**
          * The quote text copied from an external source.
         */
        "text": string;
    }
    /**
     * Related articles component.
     */
    interface BsRelatedArticles {
        /**
          * The article related image.
         */
        "articlesData": BsArticleCard[] | string;
        /**
          * Description.
         */
        "relatedArticlesTitle": BsTitle | string;
    }
    /**
     * Share banner component.
     */
    interface BsShareBanner {
        /**
          * Section's title
         */
        "sectionTitle": string;
    }
    /**
     * The Slider component.
     */
    interface BsSlider {
    }
    /**
     * The Quote component is used for indicating that a particular section of text is being taken from another website or other source.
     */
    interface BsStoryQuote {
        /**
          * Prop for adding an image
         */
        "authorImage": BsImage | string;
        /**
          * Author's name
         */
        "authorName": string;
        /**
          * Author's job position
         */
        "authorPosition": string;
        /**
          * A URL that designates a source document or message for the information quoted. Used for SEO purposes.
         */
        "source"?: string;
        /**
          * The quote text copied from an external source.
         */
        "text": string;
    }
    /**
     * Test badge card component.
     */
    interface BsTestBadgeCard {
        /**
          * The test badge image.
         */
        "cardImage": BsImage | string;
        /**
          * The test badge description.
         */
        "cardText": string;
        /**
          * The test badge title.
         */
        "cardTitle": string;
    }
    /**
     * Test badge detail component.
     */
    interface BsTestBadgeDetail {
        /**
          * The badge CTA.
         */
        "badgeCta": BsButton | string;
        /**
          * The test badge image.
         */
        "badgeImages": BsImage[] | string;
        /**
          * The badge content.
         */
        "badgeText": string;
        /**
          * The badge title.
         */
        "badgeTitle": string;
    }
    /**
     * The test badge modal component.
     */
    interface BsTestBadgeModal {
        /**
          * The index of the featured image.
         */
        "index": number;
        /**
          * The list of images to be shown in the carousel.
         */
        "testBadgeCollection": | (BsTestBadgeDetail & { cardTitle: string; cardText: string })[]
    | string;
    }
    /**
     * Test Badge component.
     */
    interface BsTestBadgeSlider {
        /**
          * The Experience Zone contract.
         */
        "testBadgeCollection": TestBadge[] | string;
    }
    /**
     * The text component.
     */
    interface BsText {
        /**
          * To set the title size
         */
        "size"?: TextSize;
        /**
          * To customize the text
         */
        "text": string;
        /**
          * To set the color
         */
        "textColor"?: TextColor;
    }
    /**
     * The title component.
     */
    interface BsTitle {
        /**
          * To set the color
         */
        "color": TitleColor;
        /**
          * To set the title size
         */
        "size"?: TitleSize;
        /**
          * To set the title tag
         */
        "tag": TitleTag;
        /**
          * To customize the text
         */
        "text": string;
        /**
          * To set the title variant
         */
        "variant": TitleVariant;
    }
    /**
     * Tooltip component.
     */
    interface BsTooltip {
        /**
          * Tooltip's text content
         */
        "contentText": string;
        /**
          * Tooltip's title
         */
        "titleText": string;
    }
    /**
     * Video card component.
     */
    interface BsVideoCard {
        /**
          * Should the player start automatically when the page is loaded?
         */
        "autoplay"?: boolean;
        /**
          * The image displayed on the card.
         */
        "image": BsImage | string;
        /**
          * Should the player be loaded inline?
         */
        "inline"?: boolean;
        /**
          * Should the video be muted initially?
         */
        "mute"?: boolean;
        /**
          * The youtube video ID.
         */
        "videoId": string;
    }
    /**
     * Youtube controls component.
     */
    interface BsYoutubeControl {
        /**
          * The video current progress time.
         */
        "currentTime"?: number;
        /**
          * Is the video muted.
         */
        "mute"?: boolean;
        /**
          * The playing state of the youtube Player.
         */
        "playerState"?: PlayerState;
        /**
          * The video ID the controller belongs to.
         */
        "videoId": string;
    }
    /**
     * The youtube video component.
     */
    interface BsYoutubeVideo {
        /**
          * Should the player be loaded inline?
         */
        "inline"?: boolean;
        /**
          * Should the video be muted initially?
         */
        "mute"?: boolean;
        /**
          * The youtube video ID.
         */
        "videoId": string;
    }
}
export interface BsAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBsAccordionItemElement;
}
export interface BsBaseModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBsBaseModalElement;
}
export interface BsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBsButtonElement;
}
export interface BsClickActionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBsClickActionElement;
}
export interface BsDefaultLayoutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBsDefaultLayoutElement;
}
export interface BsExperienceZoneModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBsExperienceZoneModalElement;
}
export interface BsExperienceZoneScreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBsExperienceZoneScreenElement;
}
export interface BsYoutubeControlCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBsYoutubeControlElement;
}
export interface BsYoutubeVideoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLBsYoutubeVideoElement;
}
declare global {
    /**
     * The Accordion component.
     */
    interface HTMLBsAccordionElement extends Components.BsAccordion, HTMLStencilElement {
    }
    var HTMLBsAccordionElement: {
        prototype: HTMLBsAccordionElement;
        new (): HTMLBsAccordionElement;
    };
    interface HTMLBsAccordionItemElement extends Components.BsAccordionItem, HTMLStencilElement {
    }
    var HTMLBsAccordionItemElement: {
        prototype: HTMLBsAccordionItemElement;
        new (): HTMLBsAccordionItemElement;
    };
    /**
     * Article teaser card component.
     */
    interface HTMLBsArticleCardElement extends Components.BsArticleCard, HTMLStencilElement {
    }
    var HTMLBsArticleCardElement: {
        prototype: HTMLBsArticleCardElement;
        new (): HTMLBsArticleCardElement;
    };
    /**
     * Author component.
     */
    interface HTMLBsAuthorElement extends Components.BsAuthor, HTMLStencilElement {
    }
    var HTMLBsAuthorElement: {
        prototype: HTMLBsAuthorElement;
        new (): HTMLBsAuthorElement;
    };
    /**
     * Component containing all the modals "focus trap" logic
     * This is a way to get around StencilJS not allowing class inheritance
     * Each modal that requires focus trap functionality
     * needs to be nested inside this base component
     */
    interface HTMLBsBaseModalElement extends Components.BsBaseModal, HTMLStencilElement {
    }
    var HTMLBsBaseModalElement: {
        prototype: HTMLBsBaseModalElement;
        new (): HTMLBsBaseModalElement;
    };
    /**
     * Blog header component.
     */
    interface HTMLBsBlogHeaderElement extends Components.BsBlogHeader, HTMLStencilElement {
    }
    var HTMLBsBlogHeaderElement: {
        prototype: HTMLBsBlogHeaderElement;
        new (): HTMLBsBlogHeaderElement;
    };
    /**
     * The breadcrumb component.
     */
    interface HTMLBsBreadcrumbElement extends Components.BsBreadcrumb, HTMLStencilElement {
    }
    var HTMLBsBreadcrumbElement: {
        prototype: HTMLBsBreadcrumbElement;
        new (): HTMLBsBreadcrumbElement;
    };
    /**
     * Description of the component.
     */
    interface HTMLBsButtonElement extends Components.BsButton, HTMLStencilElement {
    }
    var HTMLBsButtonElement: {
        prototype: HTMLBsButtonElement;
        new (): HTMLBsButtonElement;
    };
    /**
     * Callout box component.
     */
    interface HTMLBsCalloutBoxElement extends Components.BsCalloutBox, HTMLStencilElement {
    }
    var HTMLBsCalloutBoxElement: {
        prototype: HTMLBsCalloutBoxElement;
        new (): HTMLBsCalloutBoxElement;
    };
    /**
     * Carousel card component.
     */
    interface HTMLBsCarouselCardElement extends Components.BsCarouselCard, HTMLStencilElement {
    }
    var HTMLBsCarouselCardElement: {
        prototype: HTMLBsCarouselCardElement;
        new (): HTMLBsCarouselCardElement;
    };
    /**
     * The click action component.
     */
    interface HTMLBsClickActionElement extends Components.BsClickAction, HTMLStencilElement {
    }
    var HTMLBsClickActionElement: {
        prototype: HTMLBsClickActionElement;
        new (): HTMLBsClickActionElement;
    };
    /**
     * The container component.
     */
    interface HTMLBsContainerElement extends Components.BsContainer, HTMLStencilElement {
    }
    var HTMLBsContainerElement: {
        prototype: HTMLBsContainerElement;
        new (): HTMLBsContainerElement;
    };
    /**
     * Country link card component.
     */
    interface HTMLBsCountryCardElement extends Components.BsCountryCard, HTMLStencilElement {
    }
    var HTMLBsCountryCardElement: {
        prototype: HTMLBsCountryCardElement;
        new (): HTMLBsCountryCardElement;
    };
    /**
     * CTA Banner component.
     */
    interface HTMLBsCtaBannerElement extends Components.BsCtaBanner, HTMLStencilElement {
    }
    var HTMLBsCtaBannerElement: {
        prototype: HTMLBsCtaBannerElement;
        new (): HTMLBsCtaBannerElement;
    };
    /**
     * Dark-theme overlay component.
     */
    interface HTMLBsDarkOverlayElement extends Components.BsDarkOverlay, HTMLStencilElement {
    }
    var HTMLBsDarkOverlayElement: {
        prototype: HTMLBsDarkOverlayElement;
        new (): HTMLBsDarkOverlayElement;
    };
    /**
     * Date component.
     */
    interface HTMLBsDateElement extends Components.BsDate, HTMLStencilElement {
    }
    var HTMLBsDateElement: {
        prototype: HTMLBsDateElement;
        new (): HTMLBsDateElement;
    };
    /**
     * Default layout component.
     */
    interface HTMLBsDefaultLayoutElement extends Components.BsDefaultLayout, HTMLStencilElement {
    }
    var HTMLBsDefaultLayoutElement: {
        prototype: HTMLBsDefaultLayoutElement;
        new (): HTMLBsDefaultLayoutElement;
    };
    /**
     * The dot navigation component used to indicate the current index in a list of views.
     */
    interface HTMLBsDotNavigationElement extends Components.BsDotNavigation, HTMLStencilElement {
    }
    var HTMLBsDotNavigationElement: {
        prototype: HTMLBsDotNavigationElement;
        new (): HTMLBsDotNavigationElement;
    };
    /**
     * Experience Zone teaser component.
     */
    interface HTMLBsExperienceZoneElement extends Components.BsExperienceZone, HTMLStencilElement {
    }
    var HTMLBsExperienceZoneElement: {
        prototype: HTMLBsExperienceZoneElement;
        new (): HTMLBsExperienceZoneElement;
    };
    /**
     * Experience Zone card component.
     */
    interface HTMLBsExperienceZoneCardElement extends Components.BsExperienceZoneCard, HTMLStencilElement {
    }
    var HTMLBsExperienceZoneCardElement: {
        prototype: HTMLBsExperienceZoneCardElement;
        new (): HTMLBsExperienceZoneCardElement;
    };
    /**
     * Experience Zone modal component.
     */
    interface HTMLBsExperienceZoneModalElement extends Components.BsExperienceZoneModal, HTMLStencilElement {
    }
    var HTMLBsExperienceZoneModalElement: {
        prototype: HTMLBsExperienceZoneModalElement;
        new (): HTMLBsExperienceZoneModalElement;
    };
    /**
     * Experience Zone screen component.
     */
    interface HTMLBsExperienceZoneScreenElement extends Components.BsExperienceZoneScreen, HTMLStencilElement {
    }
    var HTMLBsExperienceZoneScreenElement: {
        prototype: HTMLBsExperienceZoneScreenElement;
        new (): HTMLBsExperienceZoneScreenElement;
    };
    /**
     * Experience Zone story component.
     */
    interface HTMLBsExperienceZoneStoryElement extends Components.BsExperienceZoneStory, HTMLStencilElement {
    }
    var HTMLBsExperienceZoneStoryElement: {
        prototype: HTMLBsExperienceZoneStoryElement;
        new (): HTMLBsExperienceZoneStoryElement;
    };
    /**
     * Follow us banner component.
     */
    interface HTMLBsFollowUsBannerElement extends Components.BsFollowUsBanner, HTMLStencilElement {
    }
    var HTMLBsFollowUsBannerElement: {
        prototype: HTMLBsFollowUsBannerElement;
        new (): HTMLBsFollowUsBannerElement;
    };
    /**
     * The form checkbox component.
     */
    interface HTMLBsFormCheckboxElement extends Components.BsFormCheckbox, HTMLStencilElement {
    }
    var HTMLBsFormCheckboxElement: {
        prototype: HTMLBsFormCheckboxElement;
        new (): HTMLBsFormCheckboxElement;
    };
    /**
     * The form container component.
     */
    interface HTMLBsFormContainerElement extends Components.BsFormContainer, HTMLStencilElement {
    }
    var HTMLBsFormContainerElement: {
        prototype: HTMLBsFormContainerElement;
        new (): HTMLBsFormContainerElement;
    };
    /**
     * The form field component.
     */
    interface HTMLBsFormFieldElement extends Components.BsFormField, HTMLStencilElement {
    }
    var HTMLBsFormFieldElement: {
        prototype: HTMLBsFormFieldElement;
        new (): HTMLBsFormFieldElement;
    };
    /**
     * The form input component.
     */
    interface HTMLBsFormInputElement extends Components.BsFormInput, HTMLStencilElement {
    }
    var HTMLBsFormInputElement: {
        prototype: HTMLBsFormInputElement;
        new (): HTMLBsFormInputElement;
    };
    /**
     * The form radio component.
     */
    interface HTMLBsFormRadioButtonElement extends Components.BsFormRadioButton, HTMLStencilElement {
    }
    var HTMLBsFormRadioButtonElement: {
        prototype: HTMLBsFormRadioButtonElement;
        new (): HTMLBsFormRadioButtonElement;
    };
    /**
     * The form select component.
     */
    interface HTMLBsFormSelectElement extends Components.BsFormSelect, HTMLStencilElement {
    }
    var HTMLBsFormSelectElement: {
        prototype: HTMLBsFormSelectElement;
        new (): HTMLBsFormSelectElement;
    };
    /**
     * Header banner component.
     */
    interface HTMLBsHeaderBannerElement extends Components.BsHeaderBanner, HTMLStencilElement {
    }
    var HTMLBsHeaderBannerElement: {
        prototype: HTMLBsHeaderBannerElement;
        new (): HTMLBsHeaderBannerElement;
    };
    /**
     * Header navigation component.
     */
    interface HTMLBsHeaderNavigationElement extends Components.BsHeaderNavigation, HTMLStencilElement {
    }
    var HTMLBsHeaderNavigationElement: {
        prototype: HTMLBsHeaderNavigationElement;
        new (): HTMLBsHeaderNavigationElement;
    };
    /**
     * The icon component.
     */
    interface HTMLBsIconElement extends Components.BsIcon, HTMLStencilElement {
    }
    var HTMLBsIconElement: {
        prototype: HTMLBsIconElement;
        new (): HTMLBsIconElement;
    };
    /**
     * Description of the component.
     */
    interface HTMLBsImageElement extends Components.BsImage, HTMLStencilElement {
    }
    var HTMLBsImageElement: {
        prototype: HTMLBsImageElement;
        new (): HTMLBsImageElement;
    };
    /**
     * The image carousel component.
     */
    interface HTMLBsImageCarouselElement extends Components.BsImageCarousel, HTMLStencilElement {
    }
    var HTMLBsImageCarouselElement: {
        prototype: HTMLBsImageCarouselElement;
        new (): HTMLBsImageCarouselElement;
    };
    /**
     * Lark-theme overlay component.
     */
    interface HTMLBsLightOverlayElement extends Components.BsLightOverlay, HTMLStencilElement {
    }
    var HTMLBsLightOverlayElement: {
        prototype: HTMLBsLightOverlayElement;
        new (): HTMLBsLightOverlayElement;
    };
    /**
     * Share banner component.
     */
    interface HTMLBsLogoBarElement extends Components.BsLogoBar, HTMLStencilElement {
    }
    var HTMLBsLogoBarElement: {
        prototype: HTMLBsLogoBarElement;
        new (): HTMLBsLogoBarElement;
    };
    /**
     * Newsletter banner component.
     */
    interface HTMLBsNewsletterBannerElement extends Components.BsNewsletterBanner, HTMLStencilElement {
    }
    var HTMLBsNewsletterBannerElement: {
        prototype: HTMLBsNewsletterBannerElement;
        new (): HTMLBsNewsletterBannerElement;
    };
    /**
     * Overlay menu component.
     */
    interface HTMLBsOverlayMenuElement extends Components.BsOverlayMenu, HTMLStencilElement {
    }
    var HTMLBsOverlayMenuElement: {
        prototype: HTMLBsOverlayMenuElement;
        new (): HTMLBsOverlayMenuElement;
    };
    /**
     * Product card component.
     */
    interface HTMLBsProductCardElement extends Components.BsProductCard, HTMLStencilElement {
    }
    var HTMLBsProductCardElement: {
        prototype: HTMLBsProductCardElement;
        new (): HTMLBsProductCardElement;
    };
    /**
     * The Quote component is used for indicating that a particular section of text is being taken from another website or other source.
     */
    interface HTMLBsQuoteElement extends Components.BsQuote, HTMLStencilElement {
    }
    var HTMLBsQuoteElement: {
        prototype: HTMLBsQuoteElement;
        new (): HTMLBsQuoteElement;
    };
    /**
     * Related articles component.
     */
    interface HTMLBsRelatedArticlesElement extends Components.BsRelatedArticles, HTMLStencilElement {
    }
    var HTMLBsRelatedArticlesElement: {
        prototype: HTMLBsRelatedArticlesElement;
        new (): HTMLBsRelatedArticlesElement;
    };
    /**
     * Share banner component.
     */
    interface HTMLBsShareBannerElement extends Components.BsShareBanner, HTMLStencilElement {
    }
    var HTMLBsShareBannerElement: {
        prototype: HTMLBsShareBannerElement;
        new (): HTMLBsShareBannerElement;
    };
    /**
     * The Slider component.
     */
    interface HTMLBsSliderElement extends Components.BsSlider, HTMLStencilElement {
    }
    var HTMLBsSliderElement: {
        prototype: HTMLBsSliderElement;
        new (): HTMLBsSliderElement;
    };
    /**
     * The Quote component is used for indicating that a particular section of text is being taken from another website or other source.
     */
    interface HTMLBsStoryQuoteElement extends Components.BsStoryQuote, HTMLStencilElement {
    }
    var HTMLBsStoryQuoteElement: {
        prototype: HTMLBsStoryQuoteElement;
        new (): HTMLBsStoryQuoteElement;
    };
    /**
     * Test badge card component.
     */
    interface HTMLBsTestBadgeCardElement extends Components.BsTestBadgeCard, HTMLStencilElement {
    }
    var HTMLBsTestBadgeCardElement: {
        prototype: HTMLBsTestBadgeCardElement;
        new (): HTMLBsTestBadgeCardElement;
    };
    /**
     * Test badge detail component.
     */
    interface HTMLBsTestBadgeDetailElement extends Components.BsTestBadgeDetail, HTMLStencilElement {
    }
    var HTMLBsTestBadgeDetailElement: {
        prototype: HTMLBsTestBadgeDetailElement;
        new (): HTMLBsTestBadgeDetailElement;
    };
    /**
     * The test badge modal component.
     */
    interface HTMLBsTestBadgeModalElement extends Components.BsTestBadgeModal, HTMLStencilElement {
    }
    var HTMLBsTestBadgeModalElement: {
        prototype: HTMLBsTestBadgeModalElement;
        new (): HTMLBsTestBadgeModalElement;
    };
    /**
     * Test Badge component.
     */
    interface HTMLBsTestBadgeSliderElement extends Components.BsTestBadgeSlider, HTMLStencilElement {
    }
    var HTMLBsTestBadgeSliderElement: {
        prototype: HTMLBsTestBadgeSliderElement;
        new (): HTMLBsTestBadgeSliderElement;
    };
    /**
     * The text component.
     */
    interface HTMLBsTextElement extends Components.BsText, HTMLStencilElement {
    }
    var HTMLBsTextElement: {
        prototype: HTMLBsTextElement;
        new (): HTMLBsTextElement;
    };
    /**
     * The title component.
     */
    interface HTMLBsTitleElement extends Components.BsTitle, HTMLStencilElement {
    }
    var HTMLBsTitleElement: {
        prototype: HTMLBsTitleElement;
        new (): HTMLBsTitleElement;
    };
    /**
     * Tooltip component.
     */
    interface HTMLBsTooltipElement extends Components.BsTooltip, HTMLStencilElement {
    }
    var HTMLBsTooltipElement: {
        prototype: HTMLBsTooltipElement;
        new (): HTMLBsTooltipElement;
    };
    /**
     * Video card component.
     */
    interface HTMLBsVideoCardElement extends Components.BsVideoCard, HTMLStencilElement {
    }
    var HTMLBsVideoCardElement: {
        prototype: HTMLBsVideoCardElement;
        new (): HTMLBsVideoCardElement;
    };
    /**
     * Youtube controls component.
     */
    interface HTMLBsYoutubeControlElement extends Components.BsYoutubeControl, HTMLStencilElement {
    }
    var HTMLBsYoutubeControlElement: {
        prototype: HTMLBsYoutubeControlElement;
        new (): HTMLBsYoutubeControlElement;
    };
    /**
     * The youtube video component.
     */
    interface HTMLBsYoutubeVideoElement extends Components.BsYoutubeVideo, HTMLStencilElement {
    }
    var HTMLBsYoutubeVideoElement: {
        prototype: HTMLBsYoutubeVideoElement;
        new (): HTMLBsYoutubeVideoElement;
    };
    interface HTMLElementTagNameMap {
        "bs-accordion": HTMLBsAccordionElement;
        "bs-accordion-item": HTMLBsAccordionItemElement;
        "bs-article-card": HTMLBsArticleCardElement;
        "bs-author": HTMLBsAuthorElement;
        "bs-base-modal": HTMLBsBaseModalElement;
        "bs-blog-header": HTMLBsBlogHeaderElement;
        "bs-breadcrumb": HTMLBsBreadcrumbElement;
        "bs-button": HTMLBsButtonElement;
        "bs-callout-box": HTMLBsCalloutBoxElement;
        "bs-carousel-card": HTMLBsCarouselCardElement;
        "bs-click-action": HTMLBsClickActionElement;
        "bs-container": HTMLBsContainerElement;
        "bs-country-card": HTMLBsCountryCardElement;
        "bs-cta-banner": HTMLBsCtaBannerElement;
        "bs-dark-overlay": HTMLBsDarkOverlayElement;
        "bs-date": HTMLBsDateElement;
        "bs-default-layout": HTMLBsDefaultLayoutElement;
        "bs-dot-navigation": HTMLBsDotNavigationElement;
        "bs-experience-zone": HTMLBsExperienceZoneElement;
        "bs-experience-zone-card": HTMLBsExperienceZoneCardElement;
        "bs-experience-zone-modal": HTMLBsExperienceZoneModalElement;
        "bs-experience-zone-screen": HTMLBsExperienceZoneScreenElement;
        "bs-experience-zone-story": HTMLBsExperienceZoneStoryElement;
        "bs-follow-us-banner": HTMLBsFollowUsBannerElement;
        "bs-form-checkbox": HTMLBsFormCheckboxElement;
        "bs-form-container": HTMLBsFormContainerElement;
        "bs-form-field": HTMLBsFormFieldElement;
        "bs-form-input": HTMLBsFormInputElement;
        "bs-form-radio-button": HTMLBsFormRadioButtonElement;
        "bs-form-select": HTMLBsFormSelectElement;
        "bs-header-banner": HTMLBsHeaderBannerElement;
        "bs-header-navigation": HTMLBsHeaderNavigationElement;
        "bs-icon": HTMLBsIconElement;
        "bs-image": HTMLBsImageElement;
        "bs-image-carousel": HTMLBsImageCarouselElement;
        "bs-light-overlay": HTMLBsLightOverlayElement;
        "bs-logo-bar": HTMLBsLogoBarElement;
        "bs-newsletter-banner": HTMLBsNewsletterBannerElement;
        "bs-overlay-menu": HTMLBsOverlayMenuElement;
        "bs-product-card": HTMLBsProductCardElement;
        "bs-quote": HTMLBsQuoteElement;
        "bs-related-articles": HTMLBsRelatedArticlesElement;
        "bs-share-banner": HTMLBsShareBannerElement;
        "bs-slider": HTMLBsSliderElement;
        "bs-story-quote": HTMLBsStoryQuoteElement;
        "bs-test-badge-card": HTMLBsTestBadgeCardElement;
        "bs-test-badge-detail": HTMLBsTestBadgeDetailElement;
        "bs-test-badge-modal": HTMLBsTestBadgeModalElement;
        "bs-test-badge-slider": HTMLBsTestBadgeSliderElement;
        "bs-text": HTMLBsTextElement;
        "bs-title": HTMLBsTitleElement;
        "bs-tooltip": HTMLBsTooltipElement;
        "bs-video-card": HTMLBsVideoCardElement;
        "bs-youtube-control": HTMLBsYoutubeControlElement;
        "bs-youtube-video": HTMLBsYoutubeVideoElement;
    }
}
declare namespace LocalJSX {
    /**
     * The Accordion component.
     */
    interface BsAccordion {
        /**
          * Section's title.
         */
        "mainTitle"?: BsTitle | string;
    }
    interface BsAccordionItem {
        /**
          * Accordion's title.
         */
        "accordionItemTitle"?: string;
        /**
          * Accordion's active state
         */
        "active"?: boolean;
        /**
          * Is the accordion expandable?
         */
        "expandable"?: boolean;
        /**
          * Accordion's unique identifier used for accessibility.
         */
        "identifier": string;
        /**
          * Accordion's event emitter
         */
        "onBsAccordionStateAction"?: (event: BsAccordionItemCustomEvent<Boolean>) => void;
    }
    /**
     * Article teaser card component.
     */
    interface BsArticleCard {
        /**
          * The cta label.
         */
        "articleCta"?: string;
        /**
          * The article href.
         */
        "articleHref"?: string;
        /**
          * The article related image.
         */
        "articleImage"?: BsImage | string;
        /**
          * The article title.
         */
        "articleTitle"?: string;
    }
    /**
     * Author component.
     */
    interface BsAuthor {
        /**
          * Main about title
         */
        "aboutTitle"?: string;
        /**
          * Description.
         */
        "authorImage"?: BsImage | string;
        /**
          * Author's name
         */
        "authorName"?: string;
        /**
          * Author's job position
         */
        "authorPosition"?: string;
        /**
          * Description text
         */
        "description"?: string;
    }
    /**
     * Component containing all the modals "focus trap" logic
     * This is a way to get around StencilJS not allowing class inheritance
     * Each modal that requires focus trap functionality
     * needs to be nested inside this base component
     */
    interface BsBaseModal {
        "modalCanBeClosed"?: boolean;
        /**
          * Props
         */
        "modalId"?: BaseModalId;
        "onBsModalIsClosed"?: (event: BsBaseModalCustomEvent<{ modalId: BaseModalId }>) => void;
        /**
          * Events
         */
        "onBsModalIsClosing"?: (event: BsBaseModalCustomEvent<{ modalId: BaseModalId }>) => void;
        "onBsNextSlideAction"?: (event: BsBaseModalCustomEvent<any>) => void;
        "onBsPreviousSlideAction"?: (event: BsBaseModalCustomEvent<any>) => void;
        "transitionType"?: TransitionType;
    }
    /**
     * Blog header component.
     */
    interface BsBlogHeader {
        /**
          * A (json)object string containing the bs-title elemement properties.
         */
        "head"?: BsTitle | string;
        /**
          * A (json)object string containing the bs-image elemement properties.
         */
        "image"?: BsImage | string;
        /**
          * A (json)object string containing the bs-image that is used for the logo elemement properties.
         */
        "logo"?: BsImage | string;
    }
    /**
     * The breadcrumb component.
     */
    interface BsBreadcrumb {
        /**
          * Breadcrumb items data.
         */
        "data"?: BreadcrumbData[] | string;
    }
    /**
     * Description of the component.
     */
    interface BsButton {
        /**
          * Define what kind of action the button will be used for (i.e. "open-video-modal")
         */
        "action"?: string;
        /**
          * Button's style variant
         */
        "ghost"?: boolean;
        /**
          * Links's href
         */
        "href"?: string;
        /**
          * Button's icon
         */
        "iconLeft"?: IconName;
        /**
          * Second button's icon
         */
        "iconRight"?: IconName;
        /**
          * Disable button interactions
         */
        "isDisabled"?: boolean;
        /**
          * Make the button take the full-width
         */
        "isFullWidth"?: boolean;
        /**
          * Button's custom click event
         */
        "onBsButtonClick"?: (event: BsButtonCustomEvent<ButtonClickEvent>) => void;
        /**
          * The class of the button or link.
         */
        "tagClass"?: string;
        /**
          * Link's target
         */
        "target"?: ButtonTarget;
        /**
          * Button's text
         */
        "text"?: string;
        /**
          * Button's type
         */
        "type"?: ButtonType;
        /**
          * The value for the bsClickEvent.
         */
        "value"?: any;
        /**
          * Button's style variant
         */
        "variant"?: ButtonVariant;
    }
    /**
     * Callout box component.
     */
    interface BsCalloutBox {
        /**
          * Callout box content text
         */
        "text"?: string;
        /**
          * Callout box variation
         */
        "variation"?: string;
    }
    /**
     * Carousel card component.
     */
    interface BsCarouselCard {
        /**
          * Should autoplay be enabled?
         */
        "autoplay"?: boolean;
        /**
          * The title of the carousel displayed in the footer.
         */
        "carouselTitle"?: string;
        /**
          * The cta label.
         */
        "cta"?: string;
        /**
          * The list of images to be shown in the carousel.
         */
        "imageCollection"?: BsImage[] | string;
        /**
          * The logo to be displayed in the footer.
         */
        "logo"?: BsImage | string;
        /**
          * Should the carousel be displayed in slim variation.
         */
        "slim"?: boolean;
        /**
          * Should the autoplay be slow?
         */
        "slow"?: boolean;
    }
    /**
     * The click action component.
     */
    interface BsClickAction {
        /**
          * Use aria-label attribute when link/button doesn't have any text
         */
        "ariaLabelText"?: string;
        /**
          * Disabled state of inner tag.
         */
        "disabled"?: boolean;
        /**
          * The href of bsClickAction component, will convert the button into a link.
         */
        "href"?: string;
        /**
          * The name for the bsClickAction event.
         */
        "name"?: string;
        /**
          * Emitted when the component is clicked.
         */
        "onBsClickAction"?: (event: BsClickActionCustomEvent<ClickActionEvent>) => void;
        /**
          * The class of the button or link.
         */
        "tagClass"?: string;
        /**
          * The target of the provided href.
         */
        "target"?: ClickActionTarget;
        /**
          * The type of button for the bsClickAction component.
         */
        "type"?: ClickActionType;
        /**
          * The value for the bsClickAction event.
         */
        "value"?: any;
    }
    /**
     * The container component.
     */
    interface BsContainer {
        /**
          * Should the content be centered with a max width on desktop?
         */
        "contained"?: boolean;
        /**
          * Should the content be centered with a max width on mobile?
         */
        "mobileFullWidth"?: boolean;
    }
    /**
     * Country link card component.
     */
    interface BsCountryCard {
        /**
          * The list of links to be rendered.
         */
        "brands"?: { label: string; href: string }[] | string;
        /**
          * The country name.
         */
        "countryTitle"?: BsTitle | string;
        /**
          * The flag image.
         */
        "flag"?: BsImage | string;
    }
    /**
     * CTA Banner component.
     */
    interface BsCtaBanner {
        /**
          * The (json)object containing the bs-title element properties
         */
        "bannerTitle"?: BsTitle | string;
        /**
          * The (json)object containing the bs-button element properties.
         */
        "button"?: BsButton | string;
        /**
          * Should the background be filled up?
         */
        "filled"?: boolean;
        /**
          * The banner subtitle
         */
        "subtitle"?: string;
        /**
          * The banner variant.
         */
        "variant"?: ButtonVariant;
    }
    /**
     * Dark-theme overlay component.
     */
    interface BsDarkOverlay {
        /**
          * The logo to be displayed in the footer.
         */
        "logo"?: BsImage | string;
        /**
          * The title of the carousel displayed in the footer.
         */
        "mainTitle"?: string;
        /**
          * Does the content contain multiple screens?
         */
        "screens"?: boolean;
    }
    /**
     * Date component.
     */
    interface BsDate {
        /**
          * Raw date string in yyyy-mm-dd format
         */
        "date"?: string;
        /**
          * Has white text?
         */
        "isWhite"?: boolean;
        /**
          * Language's iso code
         */
        "languageIsoCode"?: string;
    }
    /**
     * Default layout component.
     */
    interface BsDefaultLayout {
        /**
          * Emitted when a swipe action is detected.
         */
        "onBsSwipeAction"?: (event: BsDefaultLayoutCustomEvent<{ direction: TouchDirections }>) => void;
        /**
          * Emitted when the youtube API script triggers the window.onYouTubeIframeAPIReady method.
         */
        "onBsYoutubeAPIReady"?: (event: BsDefaultLayoutCustomEvent<any>) => void;
        /**
          * Color theme
         */
        "theme"?: ColorTheme;
    }
    /**
     * The dot navigation component used to indicate the current index in a list of views.
     */
    interface BsDotNavigation {
        /**
          * The active dot index.
         */
        "index": number;
        /**
          * The amount of dots in the navigation.
         */
        "items": number;
        /**
          * Should the auto navigation be slow?
         */
        "slow"?: boolean;
    }
    /**
     * Experience Zone teaser component.
     */
    interface BsExperienceZone {
        /**
          * The Experience Zone contract.
         */
        "experienceZoneData"?: ExperienceZone | string;
        /**
          * The Experience Zone Teaser title.
         */
        "teaserTitle"?: BsTitle | string;
    }
    /**
     * Experience Zone card component.
     */
    interface BsExperienceZoneCard {
        /**
          * The Experience Zone card image.
         */
        "cardImage"?: BsImage | string;
        /**
          * The Experience Zone card title.
         */
        "cardTitle"?: string;
        /**
          * Should the layout for singular items be applied?
         */
        "singular"?: boolean;
        /**
          * Should the image have a play icon?
         */
        "video"?: boolean;
    }
    /**
     * Experience Zone modal component.
     */
    interface BsExperienceZoneModal {
        /**
          * State
         */
        "activeIndex"?: number;
        /**
          * The Experience Zone story data.
         */
        "experienceZoneData"?: ExperienceZone | string;
        /**
          * Events
         */
        "onBsPauseYoutubeAction"?: (event: BsExperienceZoneModalCustomEvent<YoutubeControlClickEvent>) => void;
    }
    /**
     * Experience Zone screen component.
     */
    interface BsExperienceZoneScreen {
        /**
          * Is this screen currently active?
         */
        "active"?: boolean;
        /**
          * The Experience Zone card image.
         */
        "components"?: ExperienceZoneComponent[] | string;
        /**
          * The Experience Zone screen disclaimer.
         */
        "disclaimer"?: string;
        /**
          * The Experience Zone screen layout name.
         */
        "layout": ExperienceZoneLayout;
        /**
          * Emits youtube control event action: 'play'
         */
        "onBsYoutubeControllerClick"?: (event: BsExperienceZoneScreenCustomEvent<YoutubeControlClickEvent>) => void;
    }
    /**
     * Experience Zone story component.
     */
    interface BsExperienceZoneStory {
        /**
          * Is this story currently active?
         */
        "active"?: boolean;
        /**
          * Should navigation arrows be hidden?
         */
        "hideNavigation"?: boolean;
        /**
          * The Experience Zone story data.
         */
        "storyData"?: ExperienceZoneStory | string;
    }
    /**
     * Follow us banner component.
     */
    interface BsFollowUsBanner {
        /**
          * Section's title
         */
        "sectionTitle"?: string;
        /**
          * The social media links.
         */
        "socialLinks"?: SocialLinks[] | string;
    }
    /**
     * The form checkbox component.
     */
    interface BsFormCheckbox {
        /**
          * The label displayed after the checkbox
         */
        "label"?: string;
        /**
          * The unique name to identify the form element
         */
        "name": string;
        /**
          * Description.
         */
        "options"?: CheckboxItem[] | string;
        /**
          * Wether or not the checkbox is required
         */
        "required"?: boolean;
        /**
          * The error message to be displayed when the required field remains empty
         */
        "requiredMessage"?: string;
    }
    /**
     * The form container component.
     */
    interface BsFormContainer {
        /**
          * The endpoint for the submit request.
         */
        "action"?: string;
        /**
          * Message to inform the user there are issues with the filled in values.
         */
        "invalidFormMessage"?: string;
        /**
          * The recaptcha Public site key
         */
        "recaptchaSiteKey"?: string;
        /**
          * Message to inform the usere something went wrong while submitting the form.
         */
        "submitErrorMessage"?: string;
        /**
          * The page the user is redirected to in case of a successfull submit.
         */
        "successRedirect"?: string;
    }
    /**
     * The form field component.
     */
    interface BsFormField {
        /**
          * A border styling for text input and select fields
         */
        "border"?: boolean;
        /**
          * Wether or not the form field is filled
         */
        "filled"?: boolean;
        /**
          * Wether or not the form field is focussed
         */
        "focused"?: boolean;
        /**
          * The icon to be displayed on the right hand side of the form field
         */
        "icon"?: IconName1;
        /**
          * Wether or not the form field is invalid
         */
        "invalid"?: boolean;
        /**
          * The error message to be displayed on the form field in case of invalidity
         */
        "invalidMessage"?: string;
        /**
          * The label describing the form field
         */
        "label"?: string;
        /**
          * The name of the form field
         */
        "name"?: string;
        /**
          * Wether or not the form field is required
         */
        "required"?: boolean;
        /**
          * The error message to be displayed on the form field when the required field is not populated
         */
        "requiredMessage"?: string;
        /**
          * The validator function name used to validate the form field
         */
        "validator"?: string | ValidatorEntry;
        /**
          * The value of the form field
         */
        "value"?: string;
    }
    /**
     * The form input component.
     */
    interface BsFormInput {
        /**
          * The icon to be displayed on the right hand side of the form field
         */
        "icon"?: IconName1;
        /**
          * The error message to be displayed when the field has an invalid input
         */
        "invalidMessage"?: string;
        /**
          * The label describing the form field
         */
        "label": string;
        /**
          * Wether or not the input field is required
         */
        "max"?: string;
        /**
          * Wether or not the input field is required
         */
        "min"?: string;
        /**
          * The unique name to identify the form element
         */
        "name": string;
        /**
          * Wether or not the input field is required
         */
        "required"?: boolean;
        /**
          * The error message to be displayed when the required field remains empty
         */
        "requiredMessage"?: string;
        /**
          * Wether or not the textarea is resizeable by the user
         */
        "resizeable"?: boolean;
        /**
          * The default amount of rows the textarea has
         */
        "rows"?: number;
        /**
          * The unique name to identify the form element
         */
        "type"?: InputType;
        /**
          * The value of the form field
         */
        "value"?: string;
    }
    /**
     * The form radio component.
     */
    interface BsFormRadioButton {
        /**
          * The label displayed after the checkbox
         */
        "label"?: string;
        /**
          * The unique name to identify the form element
         */
        "name": string;
        /**
          * A list of values for each radio button
         */
        "options"?: RadioButtonItem[] | string;
        /**
          * Wether or not the checkbox is required
         */
        "required"?: boolean;
        /**
          * The error message to be displayed when the required field remains empty
         */
        "requiredMessage"?: string;
    }
    /**
     * The form select component.
     */
    interface BsFormSelect {
        /**
          * The icon to be displayed on the right hand side of the form field
         */
        "icon"?: IconName1;
        /**
          * The label describing the form field
         */
        "label": string;
        /**
          * The unique name to identify the form element
         */
        "name": string;
        /**
          * The list of options that will populate the select field.
         */
        "options"?: SelectOption[] | string;
        /**
          * Wether or not the input field is required
         */
        "required"?: boolean;
        /**
          * The error message to be displayed when the required field remains empty
         */
        "requiredMessage"?: string;
    }
    /**
     * Header banner component.
     */
    interface BsHeaderBanner {
        /**
          * A (json)object string containing the bs-button elemement properties.
         */
        "button"?: BsButton | string;
        /**
          * A (json)object string containing the bs-title elemement properties.
         */
        "headerTitle"?: BsTitle | string;
        /**
          * A (json)object string containing the bs-image elemement properties.
         */
        "image"?: BsImage | string;
        /**
          * A label to be displayed on the top if there is no logo.
         */
        "label"?: string;
        /**
          * A (json)object string containing the bs-image that is used for the logo elemement properties.
         */
        "logo"?: BsImage | string;
        /**
          * The header banner subtitle.
         */
        "subtitle"?: string;
        /**
          * The header banner variant. Either 'image' or 'video'.
         */
        "variant"?: Variant;
        /**
          * A (json)object string containing the bs-video-card elemement properties.
         */
        "video"?: BsVideoCard | string;
    }
    /**
     * Header navigation component.
     */
    interface BsHeaderNavigation {
        /**
          * The .
         */
        "headerNavigation"?: HeaderNavigation | string;
    }
    /**
     * The icon component.
     */
    interface BsIcon {
        /**
          * Icon's name
         */
        "name"?: IconName;
    }
    /**
     * Description of the component.
     */
    interface BsImage {
        /**
          * Image's alternative text
         */
        "altText"?: string;
        /**
          * Image's caption
         */
        "caption"?: string;
        /**
          * Determine if text under or on image
         */
        "captionCover"?: boolean;
        /**
          * Determine if image is stretching to fill its container's size
         */
        "cover"?: boolean;
        /**
          * Image's height
         */
        "height"?: string | number;
        /**
          * Image's sizes
         */
        "imageSizes"?: string;
        /**
          * "itemprop" attribute
         */
        "itemprop"?: string;
        /**
          * Enable lazy loading?
         */
        "lazy"?: boolean;
        /**
          * Source image
         */
        "source"?: string;
        /**
          * Image's src
         */
        "src"?: string;
        /**
          * Image's srcset
         */
        "srcset"?: string;
        /**
          * Image's width
         */
        "width"?: string | number;
    }
    /**
     * The image carousel component.
     */
    interface BsImageCarousel {
        /**
          * Should autoplay be enabled?
         */
        "autoplay"?: boolean;
        /**
          * The title of the carousel displayed in the footer.
         */
        "carouselTitle"?: string;
        /**
          * The list of images to be shown in the carousel.
         */
        "imageCollection"?: BsImage[] | string;
        /**
          * The index of the featured image.
         */
        "index"?: number;
        /**
          * The logo to be displayed in the footer.
         */
        "logo"?: BsImage | string;
        /**
          * Should the autoplay be slow?
         */
        "slow"?: boolean;
    }
    /**
     * Lark-theme overlay component.
     */
    interface BsLightOverlay {
        /**
          * Does the content contain multiple screens?
         */
        "screens"?: boolean;
    }
    /**
     * Share banner component.
     */
    interface BsLogoBar {
        /**
          * The logo to be displayed .
         */
        "logo"?: BsImage | string;
    }
    /**
     * Newsletter banner component.
     */
    interface BsNewsletterBanner {
        /**
          * Description.
         */
        "button"?: BsButton | string;
        /**
          * Section's title
         */
        "sectionTitle"?: string;
        /**
          * Subtitle
         */
        "subtitle"?: string;
    }
    /**
     * Overlay menu component.
     */
    interface BsOverlayMenu {
        /**
          * The header navigation data.
         */
        "headerNavigation"?: HeaderNavigation | string;
    }
    /**
     * Product card component.
     */
    interface BsProductCard {
        /**
          * The product card image.
         */
        "cardImage"?: BsImage | string;
        /**
          * The cta label.
         */
        "cardText"?: string;
        /**
          * The product card title.
         */
        "cardTitle"?: string;
    }
    /**
     * The Quote component is used for indicating that a particular section of text is being taken from another website or other source.
     */
    interface BsQuote {
        /**
          * Prop for adding an image
         */
        "authorImage"?: BsImage | string;
        /**
          * Author's name
         */
        "authorName"?: string;
        /**
          * Author's job position
         */
        "authorPosition"?: string;
        /**
          * A URL that designates a source document or message for the information quoted. Used for SEO purposes.
         */
        "source"?: string;
        /**
          * The quote text copied from an external source.
         */
        "text": string;
    }
    /**
     * Related articles component.
     */
    interface BsRelatedArticles {
        /**
          * The article related image.
         */
        "articlesData"?: BsArticleCard[] | string;
        /**
          * Description.
         */
        "relatedArticlesTitle"?: BsTitle | string;
    }
    /**
     * Share banner component.
     */
    interface BsShareBanner {
        /**
          * Section's title
         */
        "sectionTitle"?: string;
    }
    /**
     * The Slider component.
     */
    interface BsSlider {
    }
    /**
     * The Quote component is used for indicating that a particular section of text is being taken from another website or other source.
     */
    interface BsStoryQuote {
        /**
          * Prop for adding an image
         */
        "authorImage"?: BsImage | string;
        /**
          * Author's name
         */
        "authorName"?: string;
        /**
          * Author's job position
         */
        "authorPosition"?: string;
        /**
          * A URL that designates a source document or message for the information quoted. Used for SEO purposes.
         */
        "source"?: string;
        /**
          * The quote text copied from an external source.
         */
        "text": string;
    }
    /**
     * Test badge card component.
     */
    interface BsTestBadgeCard {
        /**
          * The test badge image.
         */
        "cardImage"?: BsImage | string;
        /**
          * The test badge description.
         */
        "cardText"?: string;
        /**
          * The test badge title.
         */
        "cardTitle"?: string;
    }
    /**
     * Test badge detail component.
     */
    interface BsTestBadgeDetail {
        /**
          * The badge CTA.
         */
        "badgeCta"?: BsButton | string;
        /**
          * The test badge image.
         */
        "badgeImages"?: BsImage[] | string;
        /**
          * The badge content.
         */
        "badgeText"?: string;
        /**
          * The badge title.
         */
        "badgeTitle"?: string;
    }
    /**
     * The test badge modal component.
     */
    interface BsTestBadgeModal {
        /**
          * The index of the featured image.
         */
        "index"?: number;
        /**
          * The list of images to be shown in the carousel.
         */
        "testBadgeCollection"?: | (BsTestBadgeDetail & { cardTitle: string; cardText: string })[]
    | string;
    }
    /**
     * Test Badge component.
     */
    interface BsTestBadgeSlider {
        /**
          * The Experience Zone contract.
         */
        "testBadgeCollection"?: TestBadge[] | string;
    }
    /**
     * The text component.
     */
    interface BsText {
        /**
          * To set the title size
         */
        "size"?: TextSize;
        /**
          * To customize the text
         */
        "text"?: string;
        /**
          * To set the color
         */
        "textColor"?: TextColor;
    }
    /**
     * The title component.
     */
    interface BsTitle {
        /**
          * To set the color
         */
        "color"?: TitleColor;
        /**
          * To set the title size
         */
        "size"?: TitleSize;
        /**
          * To set the title tag
         */
        "tag"?: TitleTag;
        /**
          * To customize the text
         */
        "text"?: string;
        /**
          * To set the title variant
         */
        "variant"?: TitleVariant;
    }
    /**
     * Tooltip component.
     */
    interface BsTooltip {
        /**
          * Tooltip's text content
         */
        "contentText"?: string;
        /**
          * Tooltip's title
         */
        "titleText"?: string;
    }
    /**
     * Video card component.
     */
    interface BsVideoCard {
        /**
          * Should the player start automatically when the page is loaded?
         */
        "autoplay"?: boolean;
        /**
          * The image displayed on the card.
         */
        "image"?: BsImage | string;
        /**
          * Should the player be loaded inline?
         */
        "inline"?: boolean;
        /**
          * Should the video be muted initially?
         */
        "mute"?: boolean;
        /**
          * The youtube video ID.
         */
        "videoId": string;
    }
    /**
     * Youtube controls component.
     */
    interface BsYoutubeControl {
        /**
          * The video current progress time.
         */
        "currentTime"?: number;
        /**
          * Is the video muted.
         */
        "mute"?: boolean;
        /**
          * Youtube control event
         */
        "onBsYoutubeControllerClick"?: (event: BsYoutubeControlCustomEvent<YoutubeControlClickEvent>) => void;
        /**
          * The playing state of the youtube Player.
         */
        "playerState"?: PlayerState;
        /**
          * The video ID the controller belongs to.
         */
        "videoId": string;
    }
    /**
     * The youtube video component.
     */
    interface BsYoutubeVideo {
        /**
          * Should the player be loaded inline?
         */
        "inline"?: boolean;
        /**
          * Should the video be muted initially?
         */
        "mute"?: boolean;
        /**
          * Event for all user actions on the controller.
         */
        "onBsYoutubeControllerUpdate"?: (event: BsYoutubeVideoCustomEvent<YoutubeControlUpdateEvent>) => void;
        /**
          * The youtube video ID.
         */
        "videoId": string;
    }
    interface IntrinsicElements {
        "bs-accordion": BsAccordion;
        "bs-accordion-item": BsAccordionItem;
        "bs-article-card": BsArticleCard;
        "bs-author": BsAuthor;
        "bs-base-modal": BsBaseModal;
        "bs-blog-header": BsBlogHeader;
        "bs-breadcrumb": BsBreadcrumb;
        "bs-button": BsButton;
        "bs-callout-box": BsCalloutBox;
        "bs-carousel-card": BsCarouselCard;
        "bs-click-action": BsClickAction;
        "bs-container": BsContainer;
        "bs-country-card": BsCountryCard;
        "bs-cta-banner": BsCtaBanner;
        "bs-dark-overlay": BsDarkOverlay;
        "bs-date": BsDate;
        "bs-default-layout": BsDefaultLayout;
        "bs-dot-navigation": BsDotNavigation;
        "bs-experience-zone": BsExperienceZone;
        "bs-experience-zone-card": BsExperienceZoneCard;
        "bs-experience-zone-modal": BsExperienceZoneModal;
        "bs-experience-zone-screen": BsExperienceZoneScreen;
        "bs-experience-zone-story": BsExperienceZoneStory;
        "bs-follow-us-banner": BsFollowUsBanner;
        "bs-form-checkbox": BsFormCheckbox;
        "bs-form-container": BsFormContainer;
        "bs-form-field": BsFormField;
        "bs-form-input": BsFormInput;
        "bs-form-radio-button": BsFormRadioButton;
        "bs-form-select": BsFormSelect;
        "bs-header-banner": BsHeaderBanner;
        "bs-header-navigation": BsHeaderNavigation;
        "bs-icon": BsIcon;
        "bs-image": BsImage;
        "bs-image-carousel": BsImageCarousel;
        "bs-light-overlay": BsLightOverlay;
        "bs-logo-bar": BsLogoBar;
        "bs-newsletter-banner": BsNewsletterBanner;
        "bs-overlay-menu": BsOverlayMenu;
        "bs-product-card": BsProductCard;
        "bs-quote": BsQuote;
        "bs-related-articles": BsRelatedArticles;
        "bs-share-banner": BsShareBanner;
        "bs-slider": BsSlider;
        "bs-story-quote": BsStoryQuote;
        "bs-test-badge-card": BsTestBadgeCard;
        "bs-test-badge-detail": BsTestBadgeDetail;
        "bs-test-badge-modal": BsTestBadgeModal;
        "bs-test-badge-slider": BsTestBadgeSlider;
        "bs-text": BsText;
        "bs-title": BsTitle;
        "bs-tooltip": BsTooltip;
        "bs-video-card": BsVideoCard;
        "bs-youtube-control": BsYoutubeControl;
        "bs-youtube-video": BsYoutubeVideo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * The Accordion component.
             */
            "bs-accordion": LocalJSX.BsAccordion & JSXBase.HTMLAttributes<HTMLBsAccordionElement>;
            "bs-accordion-item": LocalJSX.BsAccordionItem & JSXBase.HTMLAttributes<HTMLBsAccordionItemElement>;
            /**
             * Article teaser card component.
             */
            "bs-article-card": LocalJSX.BsArticleCard & JSXBase.HTMLAttributes<HTMLBsArticleCardElement>;
            /**
             * Author component.
             */
            "bs-author": LocalJSX.BsAuthor & JSXBase.HTMLAttributes<HTMLBsAuthorElement>;
            /**
             * Component containing all the modals "focus trap" logic
             * This is a way to get around StencilJS not allowing class inheritance
             * Each modal that requires focus trap functionality
             * needs to be nested inside this base component
             */
            "bs-base-modal": LocalJSX.BsBaseModal & JSXBase.HTMLAttributes<HTMLBsBaseModalElement>;
            /**
             * Blog header component.
             */
            "bs-blog-header": LocalJSX.BsBlogHeader & JSXBase.HTMLAttributes<HTMLBsBlogHeaderElement>;
            /**
             * The breadcrumb component.
             */
            "bs-breadcrumb": LocalJSX.BsBreadcrumb & JSXBase.HTMLAttributes<HTMLBsBreadcrumbElement>;
            /**
             * Description of the component.
             */
            "bs-button": LocalJSX.BsButton & JSXBase.HTMLAttributes<HTMLBsButtonElement>;
            /**
             * Callout box component.
             */
            "bs-callout-box": LocalJSX.BsCalloutBox & JSXBase.HTMLAttributes<HTMLBsCalloutBoxElement>;
            /**
             * Carousel card component.
             */
            "bs-carousel-card": LocalJSX.BsCarouselCard & JSXBase.HTMLAttributes<HTMLBsCarouselCardElement>;
            /**
             * The click action component.
             */
            "bs-click-action": LocalJSX.BsClickAction & JSXBase.HTMLAttributes<HTMLBsClickActionElement>;
            /**
             * The container component.
             */
            "bs-container": LocalJSX.BsContainer & JSXBase.HTMLAttributes<HTMLBsContainerElement>;
            /**
             * Country link card component.
             */
            "bs-country-card": LocalJSX.BsCountryCard & JSXBase.HTMLAttributes<HTMLBsCountryCardElement>;
            /**
             * CTA Banner component.
             */
            "bs-cta-banner": LocalJSX.BsCtaBanner & JSXBase.HTMLAttributes<HTMLBsCtaBannerElement>;
            /**
             * Dark-theme overlay component.
             */
            "bs-dark-overlay": LocalJSX.BsDarkOverlay & JSXBase.HTMLAttributes<HTMLBsDarkOverlayElement>;
            /**
             * Date component.
             */
            "bs-date": LocalJSX.BsDate & JSXBase.HTMLAttributes<HTMLBsDateElement>;
            /**
             * Default layout component.
             */
            "bs-default-layout": LocalJSX.BsDefaultLayout & JSXBase.HTMLAttributes<HTMLBsDefaultLayoutElement>;
            /**
             * The dot navigation component used to indicate the current index in a list of views.
             */
            "bs-dot-navigation": LocalJSX.BsDotNavigation & JSXBase.HTMLAttributes<HTMLBsDotNavigationElement>;
            /**
             * Experience Zone teaser component.
             */
            "bs-experience-zone": LocalJSX.BsExperienceZone & JSXBase.HTMLAttributes<HTMLBsExperienceZoneElement>;
            /**
             * Experience Zone card component.
             */
            "bs-experience-zone-card": LocalJSX.BsExperienceZoneCard & JSXBase.HTMLAttributes<HTMLBsExperienceZoneCardElement>;
            /**
             * Experience Zone modal component.
             */
            "bs-experience-zone-modal": LocalJSX.BsExperienceZoneModal & JSXBase.HTMLAttributes<HTMLBsExperienceZoneModalElement>;
            /**
             * Experience Zone screen component.
             */
            "bs-experience-zone-screen": LocalJSX.BsExperienceZoneScreen & JSXBase.HTMLAttributes<HTMLBsExperienceZoneScreenElement>;
            /**
             * Experience Zone story component.
             */
            "bs-experience-zone-story": LocalJSX.BsExperienceZoneStory & JSXBase.HTMLAttributes<HTMLBsExperienceZoneStoryElement>;
            /**
             * Follow us banner component.
             */
            "bs-follow-us-banner": LocalJSX.BsFollowUsBanner & JSXBase.HTMLAttributes<HTMLBsFollowUsBannerElement>;
            /**
             * The form checkbox component.
             */
            "bs-form-checkbox": LocalJSX.BsFormCheckbox & JSXBase.HTMLAttributes<HTMLBsFormCheckboxElement>;
            /**
             * The form container component.
             */
            "bs-form-container": LocalJSX.BsFormContainer & JSXBase.HTMLAttributes<HTMLBsFormContainerElement>;
            /**
             * The form field component.
             */
            "bs-form-field": LocalJSX.BsFormField & JSXBase.HTMLAttributes<HTMLBsFormFieldElement>;
            /**
             * The form input component.
             */
            "bs-form-input": LocalJSX.BsFormInput & JSXBase.HTMLAttributes<HTMLBsFormInputElement>;
            /**
             * The form radio component.
             */
            "bs-form-radio-button": LocalJSX.BsFormRadioButton & JSXBase.HTMLAttributes<HTMLBsFormRadioButtonElement>;
            /**
             * The form select component.
             */
            "bs-form-select": LocalJSX.BsFormSelect & JSXBase.HTMLAttributes<HTMLBsFormSelectElement>;
            /**
             * Header banner component.
             */
            "bs-header-banner": LocalJSX.BsHeaderBanner & JSXBase.HTMLAttributes<HTMLBsHeaderBannerElement>;
            /**
             * Header navigation component.
             */
            "bs-header-navigation": LocalJSX.BsHeaderNavigation & JSXBase.HTMLAttributes<HTMLBsHeaderNavigationElement>;
            /**
             * The icon component.
             */
            "bs-icon": LocalJSX.BsIcon & JSXBase.HTMLAttributes<HTMLBsIconElement>;
            /**
             * Description of the component.
             */
            "bs-image": LocalJSX.BsImage & JSXBase.HTMLAttributes<HTMLBsImageElement>;
            /**
             * The image carousel component.
             */
            "bs-image-carousel": LocalJSX.BsImageCarousel & JSXBase.HTMLAttributes<HTMLBsImageCarouselElement>;
            /**
             * Lark-theme overlay component.
             */
            "bs-light-overlay": LocalJSX.BsLightOverlay & JSXBase.HTMLAttributes<HTMLBsLightOverlayElement>;
            /**
             * Share banner component.
             */
            "bs-logo-bar": LocalJSX.BsLogoBar & JSXBase.HTMLAttributes<HTMLBsLogoBarElement>;
            /**
             * Newsletter banner component.
             */
            "bs-newsletter-banner": LocalJSX.BsNewsletterBanner & JSXBase.HTMLAttributes<HTMLBsNewsletterBannerElement>;
            /**
             * Overlay menu component.
             */
            "bs-overlay-menu": LocalJSX.BsOverlayMenu & JSXBase.HTMLAttributes<HTMLBsOverlayMenuElement>;
            /**
             * Product card component.
             */
            "bs-product-card": LocalJSX.BsProductCard & JSXBase.HTMLAttributes<HTMLBsProductCardElement>;
            /**
             * The Quote component is used for indicating that a particular section of text is being taken from another website or other source.
             */
            "bs-quote": LocalJSX.BsQuote & JSXBase.HTMLAttributes<HTMLBsQuoteElement>;
            /**
             * Related articles component.
             */
            "bs-related-articles": LocalJSX.BsRelatedArticles & JSXBase.HTMLAttributes<HTMLBsRelatedArticlesElement>;
            /**
             * Share banner component.
             */
            "bs-share-banner": LocalJSX.BsShareBanner & JSXBase.HTMLAttributes<HTMLBsShareBannerElement>;
            /**
             * The Slider component.
             */
            "bs-slider": LocalJSX.BsSlider & JSXBase.HTMLAttributes<HTMLBsSliderElement>;
            /**
             * The Quote component is used for indicating that a particular section of text is being taken from another website or other source.
             */
            "bs-story-quote": LocalJSX.BsStoryQuote & JSXBase.HTMLAttributes<HTMLBsStoryQuoteElement>;
            /**
             * Test badge card component.
             */
            "bs-test-badge-card": LocalJSX.BsTestBadgeCard & JSXBase.HTMLAttributes<HTMLBsTestBadgeCardElement>;
            /**
             * Test badge detail component.
             */
            "bs-test-badge-detail": LocalJSX.BsTestBadgeDetail & JSXBase.HTMLAttributes<HTMLBsTestBadgeDetailElement>;
            /**
             * The test badge modal component.
             */
            "bs-test-badge-modal": LocalJSX.BsTestBadgeModal & JSXBase.HTMLAttributes<HTMLBsTestBadgeModalElement>;
            /**
             * Test Badge component.
             */
            "bs-test-badge-slider": LocalJSX.BsTestBadgeSlider & JSXBase.HTMLAttributes<HTMLBsTestBadgeSliderElement>;
            /**
             * The text component.
             */
            "bs-text": LocalJSX.BsText & JSXBase.HTMLAttributes<HTMLBsTextElement>;
            /**
             * The title component.
             */
            "bs-title": LocalJSX.BsTitle & JSXBase.HTMLAttributes<HTMLBsTitleElement>;
            /**
             * Tooltip component.
             */
            "bs-tooltip": LocalJSX.BsTooltip & JSXBase.HTMLAttributes<HTMLBsTooltipElement>;
            /**
             * Video card component.
             */
            "bs-video-card": LocalJSX.BsVideoCard & JSXBase.HTMLAttributes<HTMLBsVideoCardElement>;
            /**
             * Youtube controls component.
             */
            "bs-youtube-control": LocalJSX.BsYoutubeControl & JSXBase.HTMLAttributes<HTMLBsYoutubeControlElement>;
            /**
             * The youtube video component.
             */
            "bs-youtube-video": LocalJSX.BsYoutubeVideo & JSXBase.HTMLAttributes<HTMLBsYoutubeVideoElement>;
        }
    }
}
