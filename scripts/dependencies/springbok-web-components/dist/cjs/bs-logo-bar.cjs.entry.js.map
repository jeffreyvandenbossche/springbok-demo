{"file":"bs-logo-bar.entry.cjs.js","mappings":";;;;;;;;;AAAA,MAAM,UAAU,GAAG,y2OAAy2O;;;;;;;;;;;;MCY/2O,SAAS;;;;;EAOpB,IAAI,UAAU;IACZ,OAAOA,2BAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GACjC;EAED,MAAM;IACJ,QACEC,QAACC,UAAI,QACF,CAACC,eAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAC5BF,iBAAK,KAAK,EAAC,UAAU,IACnBA,iBAAK,KAAK,EAAC,UAAU,GAAO,EAC5BA,iBAAK,KAAK,EAAC,UAAU,IACnBA,sBACE,KAAK,EAAC,MAAM,EACZ,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,EACxB,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,EAChC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,EAC5B,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,GAC9B,CACE,CACF,CACP,CACI,EACP;GACH;;AAvBD;EADCG,eAAO,CAAC,MAAM,CAAC;2CAGf;;;;;","names":["parseIfString","h","Host","isEmpty","Memoize"],"sources":["./src/components/molecules/logo-bar/logo-bar.scss?tag=bs-logo-bar&encapsulation=shadow","./src/components/molecules/logo-bar/logo-bar.tsx"],"sourcesContent":[":host {\n  @include reset-host;\n  --bar-height: 56px;\n}\n\n:host .logo-bar {\n  display: flex;\n  justify-content: end;\n  width: 100%;\n  height: rem(56);\n  overflow: hidden;\n  background: linear-gradient(90deg, transparent, $gray-200);\n}\n\n:host .gradient {\n  flex: 1;\n  height: 100%;\n}\n\n:host .logo-box {\n  position: relative;\n  z-index: 2;\n  display: flex;\n  align-items: center;\n  width: fit-content;\n  max-width: 75vw;\n  height: 100%;\n  padding: 0 rem(50);\n  background-color: $black;\n\n  &:before {\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: -1;\n    height: 100%;\n    content: '';\n    border-bottom: rem(56) solid $black;\n    border-left: rem(16) solid transparent;\n    transform: translateX(-100%);\n  }\n}\n\n:host .logo {\n  display: flex;\n  align-items: center;\n  width: fit-content;\n  height: rem(27);\n\n  @include mq('min', 'md') {\n    height: rem(32);\n  }\n}\n","import { Component, Host, h, Prop } from '@stencil/core';\nimport { Memoize, parseIfString, isEmpty } from '@springbokagency/stencil-base';\nimport type { BsImage } from '../../atoms/image/image';\n\n/**\n * Share banner component.\n */\n@Component({\n  tag: 'bs-logo-bar',\n  styleUrl: 'logo-bar.scss',\n  shadow: true,\n})\nexport class BsLogoBar {\n  /**\n   * The logo to be displayed .\n   */\n  @Prop() logo?: BsImage | string;\n\n  @Memoize('logo')\n  get parsedLogo(): BsImage {\n    return parseIfString(this.logo);\n  }\n\n  render() {\n    return (\n      <Host>\n        {!isEmpty(this.parsedLogo.src) && (\n          <div class=\"logo-bar\">\n            <div class=\"gradient\"></div>\n            <div class=\"logo-box\">\n              <bs-image\n                class=\"logo\"\n                src={this.parsedLogo.src}\n                altText={this.parsedLogo.altText}\n                width={this.parsedLogo.width}\n                height={this.parsedLogo.height}\n              />\n            </div>\n          </div>\n        )}\n      </Host>\n    );\n  }\n}\n"],"version":3}