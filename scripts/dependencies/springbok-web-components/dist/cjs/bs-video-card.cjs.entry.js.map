{"file":"bs-video-card.entry.cjs.js","mappings":";;;;;;;;;AAAA,IAAY,WAOX;AAPD,WAAY,WAAW;EACrB,wDAAc,CAAA;EACd,+CAAS,CAAA;EACT,mDAAW,CAAA;EACX,iDAAU,CAAA;EACV,uDAAa,CAAA;EACb,6CAAQ,CAAA;AACV,CAAC,EAPW,WAAW,KAAX,WAAW;;ACAvB,MAAM,YAAY,GAAG,4hPAA4hP;;;;;;;;;;;;MCgBpiP,WAAW;;;;IAmDd,oBAAe,GAAG;MACxB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACpB,CAAC;kBAnDyB,KAAK;;gBAWP,KAAK;kBAKH,KAAK;oBAKH,KAAK;;;EAQlC,IAAI,WAAW;IACb,OAAOA,2BAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GAClC;;EAID,+BAA+B,CAAC,CAAwC;IACtE,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,KAAK,CAAC,EAAE;MACxD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACpB;GACF;EAGD,gCAAgC,CAAC,CAAyC;IACxE,IAAI,CAAC,MAAM,GAAG,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC,QAAQ,CACrF,CAAC,CAAC,MAAM,CAAC,WAAW,CACrB,CAAC;GACH;EAOD,gBAAgB;IACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;GAC7B;EAED,MAAM;IACJ,QACEC,QAACC,UAAI,IACH,KAAK,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,eAAe,GAAG,EAAE,IACrD,IAAI,CAAC,QAAQ,GAAG,eAAe,GAAG,EACpC,EAAE,IAED,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,IACzBD,iBAAK,KAAK,EAAC,cAAc,IACvBA,8BAAkB,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,GAAI,CACtE,KAENA,iBAAK,KAAK,EAAC,YAAY,IACrBA,6BACE,QAAQ,EAAC,QAAQ,EACjB,IAAI,EAAE,IAAI,CAAC,MAAM,GAAG,qBAAqB,GAAG,oBAAoB,EAChE,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,EACjD,eAAe,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,eAAe,IAEpDA,oCAAU,KAAK,EAAC,mBAAmB,IAAK,IAAI,CAAC,WAAW,IAAE,OAAO,EAAC,EAAE,IAAG,EACvEA,qBAAS,KAAK,EAAC,0BAA0B,EAAC,IAAI,EAAEE,mBAAQ,CAAC,IAAI,GAAI,CACjD,CACd,CACP,CACI,EACP;GACH;;AAtDD;EADCC,eAAO,CAAC,OAAO,CAAC;8CAGhB;;;;;","names":["parseIfString","h","Host","IconName","Memoize"],"sources":["./src/components/organisms/image-carousel/image-carousel.types.ts","./src/components/molecules/video-card/video-card.scss?tag=bs-video-card&encapsulation=shadow","./src/components/molecules/video-card/video-card.tsx"],"sourcesContent":["export enum PlayerState {\n  UNSTARTED = -1,\n  ENDED = 0,\n  PLAYING = 1,\n  PAUSED = 2,\n  BUFFERING = 3,\n  CUED = 5,\n}\n",":host {\n  @include reset-host;\n  width: 100%;\n}\n\n:host .video-card {\n  position: relative;\n  margin: 0 auto;\n  overflow: hidden;\n}\n\n:host(.is-background) .video-card {\n  position: static;\n}\n\n:host .inline-video {\n  position: absolute;\n  top: 0;\n  left: 50%;\n  width: 100%;\n  height: 100%;\n  transform: translateX(-50%);\n}\n\n:host .youtube-thumbnail-button {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  z-index: 1;\n  padding: 0.5em;\n  font-size: rem(32);\n  color: $white;\n  background: transparent;\n  border: 4px solid $white;\n  border-radius: 50%;\n  transition: $transition-smooth;\n  transition-property: transform;\n  transform: translate(-50%, -50%);\n\n  @include mq('max', 'md') {\n    font-size: rem(22);\n    border-width: 3px;\n  }\n\n  &:hover {\n    transform: translate(-50%, -50%) scale(1.07);\n  }\n}\n\n:host(.is-autoplayed) .youtube-thumbnail-button {\n  top: unset;\n  right: 1rem;\n  bottom: 1rem;\n  left: unset;\n  padding: 0.2rem;\n  font-size: rem(20);\n  border-width: 2px;\n  transform: none;\n}\n\n:host .button {\n  width: 100%;\n}\n","import { Component, Host, h, Prop, State, Listen } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { IconName } from '../../atoms/icon/icon.types';\nimport { BsImage } from '../../atoms/image/image';\nimport { YoutubeControlClickEvent } from '../youtube-control/youtube-control.types';\nimport { YoutubeControlUpdateEvent } from '../../organisms/youtube-video/youtube-video.types';\nimport { PlayerState } from '../../organisms/image-carousel/image-carousel.types';\n\n/**\n * Video card component.\n */\n@Component({\n  tag: 'bs-video-card',\n  styleUrl: 'video-card.scss',\n  shadow: true,\n})\nexport class BsVideoCard {\n  /** Stages */\n  @State() active: boolean = false;\n\n  /** Props */\n  /**\n   * The youtube video ID.\n   */\n  @Prop() videoId!: string;\n\n  /**\n   * Should the video be muted initially?\n   */\n  @Prop() mute?: boolean = false;\n\n  /**\n   * Should the player be loaded inline?\n   */\n  @Prop() inline?: boolean = false;\n\n  /**\n   * Should the player start automatically when the page is loaded?\n   */\n  @Prop() autoplay?: boolean = false;\n\n  /**\n   * The image displayed on the card.\n   */\n  @Prop() image: BsImage | string;\n\n  @Memoize('image')\n  get parsedImage(): BsImage {\n    return parseIfString(this.image);\n  }\n\n  /** Listeners */\n  @Listen('bsYoutubeControllerClick', { target: 'window' })\n  bsYoutubeControllerClickHandler(e: CustomEvent<YoutubeControlClickEvent>) {\n    if (this.videoId === e.detail.id && e.detail.value === 1) {\n      this.active = true;\n    }\n  }\n\n  @Listen('bsYoutubeControllerUpdate', { target: 'window' })\n  bsYoutubeControllerUpdateHandler(e: CustomEvent<YoutubeControlUpdateEvent>) {\n    this.active = [PlayerState.PLAYING, PlayerState.PAUSED, PlayerState.BUFFERING].includes(\n      e.detail.playerState\n    );\n  }\n\n  /** Methods */\n  private handlePlayVideo = () => {\n    this.active = true;\n  };\n\n  componentDidLoad() {\n    this.active = this.autoplay;\n  }\n\n  render() {\n    return (\n      <Host\n        class={`${this.parsedImage.cover ? 'is-background' : ''} ${\n          this.autoplay ? 'is-autoplayed' : ''\n        }`}\n      >\n        {this.inline && this.active ? (\n          <div class=\"inline-video\">\n            <bs-youtube-video videoId={this.videoId} mute={this.mute} inline={true} />\n          </div>\n        ) : (\n          <div class=\"video-card\">\n            <bs-click-action\n              tagClass=\"button\"\n              name={this.inline ? 'open-youtube-inline' : 'open-youtube-modal'}\n              value={{ videoId: this.videoId, mute: this.mute }}\n              onBsClickAction={this.inline && this.handlePlayVideo}\n            >\n              <bs-image class=\"youtube-thumbnail\" {...this.parsedImage} caption=\"\" />\n              <bs-icon class=\"youtube-thumbnail-button\" name={IconName.Play} />\n            </bs-click-action>\n          </div>\n        )}\n      </Host>\n    );\n  }\n}\n"],"version":3}