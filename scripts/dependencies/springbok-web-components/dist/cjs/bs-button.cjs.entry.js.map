{"file":"bs-button.entry.cjs.js","mappings":";;;;;;;;AAAA,MAAM,SAAS,GAAG,03SAA03S;;MCa/3S,QAAQ;;;;;;;;gBAwBSA,uBAAU,CAAC,MAAM;;;;iBAoBnB,KAAK;;;;;;EA2BvB,WAAW;IACjB,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;IAEnD,IAAI,IAAI,IAAI,MAAM,KAAK,QAAQ;MAAE,OAAO;IAExC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;GAChE;EAED,MAAM;IACJ,MAAM,OAAO,GAAGC,eAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,QAAQ,GAAG,GAAG,CAAC;IAEpD,MAAM,UAAU,GACd,OAAO,KAAK,QAAQ;QAChB,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;QACnB;QACE,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,MAAM,EAAE,IAAI,CAAC,MAAM,KAAK,UAAU,GAAG,OAAO,GAAG,IAAI,CAAC,MAAM;QAC1D,GAAG,EAAE,IAAI,CAAC,MAAM,KAAK,QAAQ,GAAG,YAAY,GAAG,EAAE;OAClD,CAAC;IAER,QACEC,QAACC,UAAI,IAAC,KAAK,EAAE,GAAG,IAAI,CAAC,WAAW,GAAG,eAAe,GAAG,EAAE,EAAE,IACvDD,QAAC,OAAO,kBACN,KAAK,EAAE;cACH,IAAI,CAAC,QAAQ;iBACV,IAAI,CAAC,OAAO;cACf,IAAI,CAAC,KAAK,GAAG,UAAU,GAAG,EAAE;cAC5B,IAAI,CAAC,WAAW,GAAG,eAAe,GAAG,EAAE;cACvC,IAAI,CAAC,UAAU,GAAG,aAAa,GAAG,EAAE,EAAE,IACtC,UAAU,IACd,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,gBACxB,IAAI,CAAC,IAAI,KAGpB,IAAI,CAAC,QAAQ,KACZA,kBAAM,KAAK,EAAC,MAAM,IAChBA,qBAAS,IAAI,EAAE,IAAI,CAAC,QAAQ,GAAI,CAC3B,CACR,EAGA,CAACD,eAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAIC,kBAAM,KAAK,EAAC,MAAM,IAAE,IAAI,CAAC,IAAI,CAAQ,EAG5D,IAAI,CAAC,SAAS,KACbA,kBAAM,KAAK,EAAC,kBAAkB,IAC5BA,qBAAS,IAAI,EAAE,IAAI,CAAC,SAAS,GAAI,CAC5B,CACR,CACO,CACL,EACP;GACH;;;;;;","names":["ButtonType","isEmpty","h","Host"],"sources":["./src/components/atoms/button/button.scss?tag=bs-button&encapsulation=shadow","./src/components/atoms/button/button.tsx"],"sourcesContent":[":host(.is-full-width) {\n  display: inline-block;\n  width: 100%;\n}\n\n:host .button {\n  --button-bg-color: #{$red-100};\n  --button-border-color: #{$red-100};\n  --button-text-color: #{$white};\n  @include font(cta-label-default);\n  position: relative;\n  box-sizing: border-box;\n  display: inline-flex;\n  gap: rem(10);\n  align-items: center;\n  justify-content: space-between;\n  min-width: rem(288);\n  height: rem(50);\n  padding: rem(20) rem(20) rem(20) rem(24);\n  color: var(--button-text-color);\n  text-decoration: none;\n  text-transform: uppercase;\n  cursor: pointer;\n  background-color: var(--button-bg-color);\n  border: 1px solid var(--button-border-color);\n  border-radius: rem(1000);\n  transition: $transition;\n\n  &:hover {\n    --button-bg-color: #{$red-200};\n    --button-border-color: #{$red-200};\n  }\n\n  &:active {\n    --button-bg-color: #{$red-300};\n    --button-border-color: #{$red-300};\n  }\n\n  &:disabled {\n    --button-bg-color: #{$gray-800};\n    --button-border-color: #{$gray-800};\n    --button-text-color: #{$white};\n  }\n\n  &:focus {\n    outline: 2px solid #{$red-300};\n    outline-offset: 3px;\n  }\n\n  &.is-ghost {\n    --button-bg-color: inherit;\n    --button-text-color: #{$black};\n    --button-border-color: #{$red-100};\n\n    .icon--right:before {\n      position: absolute;\n      top: 0;\n      right: rem(50);\n      width: 1px;\n      height: rem(48);\n      // content: '';\n      background-color: var(--button-bg-color);\n      transition: $transition;\n      transform: skewX(-15deg);\n    }\n\n    &:hover {\n      --button-bg-color: #{$red-100};\n      --button-border-color: #{$red-100};\n      --button-text-color: #{$white};\n    }\n\n    &:active {\n      --button-bg-color: #{$red-200};\n      --button-border-color: #{$red-200};\n      --button-text-color: #{$white};\n    }\n\n    &:disabled {\n      --button-border-color: #{$gray-800};\n    }\n  }\n\n  &.is-secondary-variant {\n    justify-content: center;\n    border-radius: rem(4);\n  }\n\n  &.is-text-variant {\n    --button-text-color: inherit;\n    --button-border-color: transparent;\n    --button-bg-color: transparent;\n    @include font(cta-label-secondary);\n    min-width: unset;\n    height: unset;\n    min-height: unset;\n    padding: 0;\n    text-transform: unset;\n    border: 0;\n\n    &:disabled {\n      color: $gray-800;\n    }\n\n    &:hover,\n    &:focus,\n    &:active {\n      --button-text-color: #{$red-300};\n      text-decoration: underline;\n      outline: 0;\n    }\n  }\n\n  &.has-left-icon {\n    flex-direction: row-reverse;\n  }\n\n  &.is-full-width {\n    width: 100%;\n    min-width: unset;\n  }\n\n  &.is-full-width {\n    .text {\n      flex: none;\n    }\n  }\n\n  bs-icon {\n    font-size: rem(24);\n    line-height: font-height(loose);\n    color: currentColor;\n    transition: $transition;\n  }\n\n  &.is-primary-variant.is-ghost {\n    .icon {\n      color: var(--button-border-color);\n    }\n\n    &:hover .icon,\n    &:active .icon {\n      color: var(--button-text-color);\n    }\n  }\n}\n","import { isEmpty } from '@springbokagency/stencil-base';\nimport { Component, Host, h, Prop, Event, EventEmitter } from '@stencil/core';\nimport { ButtonTarget, ButtonType, ButtonVariant, ButtonClickEvent } from './button.types';\nimport { IconName } from '../icon/icon.types';\n\n/**\n * Description of the component.\n */\n@Component({\n  tag: 'bs-button',\n  styleUrl: 'button.scss',\n  shadow: true,\n})\nexport class BsButton {\n  /**\n   * Button's text\n   */\n  @Prop() text: string;\n\n  /**\n   * Links's href\n   */\n  @Prop() href?: string;\n\n  /**\n   * Link's target\n   */\n  @Prop() target?: ButtonTarget;\n\n  /**\n   * The value for the bsClickEvent.\n   */\n  @Prop() value?: any;\n\n  /**\n   * Button's type\n   */\n  @Prop() type?: ButtonType = ButtonType.Button;\n\n  /**\n   * Define what kind of action the button will be used for (i.e. \"open-video-modal\")\n   */\n  @Prop() action?: string;\n\n  /**\n   * The class of the button or link.\n   */\n  @Prop() tagClass?: string;\n\n  /**\n   * Button's style variant\n   */\n  @Prop() variant?: ButtonVariant;\n\n  /**\n   * Button's style variant\n   */\n  @Prop() ghost?: boolean = false;\n\n  /**\n   * Button's icon\n   */\n  @Prop() iconLeft?: IconName;\n\n  /**\n   * Second button's icon\n   */\n  @Prop() iconRight?: IconName;\n\n  /**\n   * Make the button take the full-width\n   */\n  @Prop() isFullWidth?: boolean;\n\n  /**\n   * Disable button interactions\n   */\n  @Prop() isDisabled?: boolean;\n\n  /**\n   * Button's custom click event\n   */\n  @Event() bsButtonClick: EventEmitter<ButtonClickEvent>;\n\n  private handleClick() {\n    const { type, href, target, action, value } = this;\n\n    if (href && target === '_blank') return;\n\n    this.bsButtonClick.emit({ type, href, target, action, value });\n  }\n\n  render() {\n    const TagType = isEmpty(this.href) ? 'button' : 'a';\n\n    const attributes =\n      TagType === 'button'\n        ? { type: this.type }\n        : {\n            href: this.href,\n            target: this.target === 'internal' ? '_self' : this.target,\n            rel: this.target === '_blank' ? 'noreferrer' : '',\n          };\n\n    return (\n      <Host class={`${this.isFullWidth ? 'is-full-width' : ''}`}>\n        <TagType\n          class={`button\n            ${this.tagClass}\n            is-${this.variant}-variant\n            ${this.ghost ? 'is-ghost' : ''}\n            ${this.isFullWidth ? 'is-full-width' : ''}\n            ${this.isDisabled ? 'is-disabled' : ''}`}\n          {...attributes}\n          onClick={this.handleClick.bind(this)}\n          aria-label={this.text}\n        >\n          {/* iconsec */}\n          {this.iconLeft && (\n            <span class=\"icon\">\n              <bs-icon name={this.iconLeft} />\n            </span>\n          )}\n\n          {/* text */}\n          {!isEmpty(this.text) && <span class=\"text\">{this.text}</span>}\n\n          {/* icon */}\n          {this.iconRight && (\n            <span class=\"icon icon--right\">\n              <bs-icon name={this.iconRight} />\n            </span>\n          )}\n        </TagType>\n      </Host>\n    );\n  }\n}\n"],"version":3}