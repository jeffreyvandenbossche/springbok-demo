{"file":"bs-experience-zone-modal.bs-image-carousel.bs-overlay-menu.bs-test-badge-modal.entry.cjs.js","mappings":"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","names":["parseIfString","h","Host","index","__decorate","Memoize","compareBreakpoint","Breakpoint","throttle","TouchDirections","BaseModalId","IconName","isEmpty"],"sources":["./src/components/molecules/experience-zone-modal/experience-zone-modal.scss?tag=bs-experience-zone-modal&encapsulation=shadow","./src/components/molecules/experience-zone-modal/experience-zone-modal.tsx","./src/components/organisms/image-carousel/image-carousel.scss?tag=bs-image-carousel&encapsulation=shadow","./src/components/organisms/image-carousel/image-carousel.tsx","./src/components/organisms/overlay-menu/overlay-menu.scss?tag=bs-overlay-menu","./src/components/organisms/overlay-menu/overlay-menu.tsx","./src/components/organisms/test-badge-modal/test-badge-modal.scss?tag=bs-test-badge-modal&encapsulation=shadow","./src/components/organisms/test-badge-modal/test-badge-modal.tsx"],"sourcesContent":[":host {\n  @include reset-host;\n  @include z-index('modal');\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n\n:host .experience-zone-modal {\n  display: flex;\n  flex-wrap: nowrap;\n  width: 100vw;\n  height: 100vh;\n\n  * {\n    flex: 0 0 100%;\n  }\n}\n","import { Component, Host, h, Prop, Listen, Event, EventEmitter } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { ExperienceZone } from '../experience-zone/experience-zone.types';\nimport { YoutubeControlClickEvent } from '../youtube-control/youtube-control.types';\n\n/**\n * Experience Zone modal component.\n */\n@Component({\n  tag: 'bs-experience-zone-modal',\n  styleUrl: 'experience-zone-modal.scss',\n  shadow: true,\n})\nexport class BsExperienceZoneModal {\n  private experienceZoneModalRef: HTMLDivElement;\n\n  /** State */\n  @Prop() activeIndex? = 0;\n\n  /**\n   * The Experience Zone story data.\n   */\n  @Prop() experienceZoneData: ExperienceZone | string;\n\n  @Memoize('experienceZoneData')\n  get parsedExperienceZoneData(): ExperienceZone {\n    return parseIfString(this.experienceZoneData);\n  }\n\n  /** Events */\n  @Event() bsPauseYoutubeAction: EventEmitter<YoutubeControlClickEvent>;\n\n  /** Listeners */\n  @Listen('bsNextSlideAction')\n  bsNextSlideActionHandler() {\n    this.updateIndex(this.activeIndex + 1);\n  }\n\n  @Listen('bsPreviousSlideAction')\n  bsPreviousSlideActionHandler() {\n    this.updateIndex(this.activeIndex - 1);\n  }\n\n  private updateIndex = (newValue: number) => {\n    if (newValue > this.parsedExperienceZoneData.stories.length - 1) {\n      this.activeIndex = 0;\n    } else if (newValue < 0) {\n      this.activeIndex = this.parsedExperienceZoneData.stories.length - 1;\n    } else {\n      this.activeIndex = newValue;\n    }\n\n    this.experienceZoneModalRef.style.transform = `translateX(-${this.activeIndex * 100}vw)`;\n  };\n\n  componentDidLoad() {\n    this.experienceZoneModalRef.style.transform = `translateX(-${this.activeIndex * 100}vw)`;\n    this.experienceZoneModalRef.style.transition = `transform 0.5s ease-in-out`;\n  }\n\n  render() {\n    return (\n      <Host>\n        <div\n          class=\"experience-zone-modal\"\n          ref={(el) => {\n            this.experienceZoneModalRef = el;\n          }}\n        >\n          {this.parsedExperienceZoneData.stories.map((story, index) => (\n            <bs-experience-zone-story\n              active={index === this.activeIndex}\n              hideNavigation={this.parsedExperienceZoneData.stories.length < 2}\n              storyData={story}\n            ></bs-experience-zone-story>\n          ))}\n        </div>\n      </Host>\n    );\n  }\n}\n",":host {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  @include z-index('modal');\n}\n\n:host .image-carousel {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  margin: auto;\n  overflow: hidden;\n}\n\n:host .carousel-body {\n  position: relative;\n  display: flex;\n  flex: 1 1 100%;\n  flex-direction: column;\n  justify-content: center;\n}\n\n:host .focused-image {\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  opacity: 0;\n  animation: fade-in 0.2s linear 0.1s forwards;\n  --image--height: 240px;\n\n  @include mq('min', 'xs') {\n    --image--height: 350px;\n  }\n\n  @include mq('min', 'md') {\n    height: 100%;\n    --image--height: 100%;\n  }\n\n  @include mq('max', 'md') {\n    @media (orientation: landscape) {\n      --image--height: 100vh;\n      --image--width: 100vw;\n    }\n  }\n}\n\n:host .counter {\n  padding-left: rem(24);\n  color: $gray-800;\n\n  @include mq('min', 'md') {\n    position: absolute;\n    right: rem(16);\n    bottom: rem(16);\n    padding: rem(8) rem(12);\n    font-size: rem(16);\n    color: $white;\n    background-color: rgba($color: $black, $alpha: 0.5);\n  }\n\n  @include mq('max', 'md') {\n    @media (orientation: landscape) {\n      position: absolute;\n      right: rem(16);\n      bottom: rem(16);\n      padding: rem(12);\n    }\n  }\n}\n\n:host .carousel-footer {\n  display: none;\n  width: 100%;\n  min-height: 103px;\n  margin-top: rem(32);\n  overflow: hidden;\n\n  @include mq('min', 'md') {\n    display: block;\n  }\n\n  @include mq('max', 'lg') {\n    @media (orientation: landscape) {\n      display: none;\n    }\n  }\n}\n\n:host .thumbnail-wrap {\n  display: flex;\n  flex: 1 1;\n  gap: rem(15);\n  width: fit-content;\n}\n\n:host .thumbnail {\n  position: relative;\n  width: rem(160);\n  height: rem(103);\n  color: $white;\n  opacity: 0.5;\n\n  &--active {\n    opacity: 1;\n  }\n}\n\n:host .fade-out {\n  animation: fade-out 0.1s linear forwards;\n}\n\n@keyframes fade-out {\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n}\n\n@keyframes fade-in {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n}\n","import { Component, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport type { BsImage } from '../../atoms/image/image';\nimport { Breakpoint, compareBreakpoint } from '../../../utils/breakpoints';\nimport { throttle } from '../../../utils/throttle';\nimport { TouchDirections } from '../../layouts/default-layout/default-layout.types';\n\n/**\n * The image carousel component.\n */\n@Component({\n  tag: 'bs-image-carousel',\n  styleUrl: 'image-carousel.scss',\n  shadow: true,\n})\nexport class BsImageCarousel {\n  private timeout: NodeJS.Timeout;\n\n  private focusedImageRef: HTMLBsImageElement;\n\n  private thumbnailWrapRef: HTMLDivElement;\n\n  private overlayRef: HTMLBsDarkOverlayElement;\n\n  @State() desktop: boolean = compareBreakpoint('min', Breakpoint.md);\n\n  /** Props */\n  /**\n   * The list of images to be shown in the carousel.\n   */\n  @Prop() imageCollection: BsImage[] | string;\n\n  @Memoize('imageCollection')\n  get parsedImageCollection(): BsImage[] {\n    return parseIfString(this.imageCollection);\n  }\n\n  /**\n   * The index of the featured image.\n   */\n  @Prop() index: number = 0;\n\n  @Watch('index')\n  handleIndexChange() {\n    clearTimeout(this.timeout);\n    this.setTimer();\n    this.autoscrollThumbnails();\n  }\n\n  /**\n   * Should autoplay be enabled?\n   */\n  @Prop() autoplay?: boolean = false;\n\n  /**\n   * Should the autoplay be slow?\n   */\n  @Prop() slow?: boolean = false;\n\n  /**\n   * The title of the carousel displayed in the footer.\n   */\n  @Prop() carouselTitle?: string;\n\n  /**\n   * The logo to be displayed in the footer.\n   */\n  @Prop() logo?: BsImage | string;\n\n  /** methods */\n\n  private onResize = () => {\n    this.desktop = compareBreakpoint('min', Breakpoint.md);\n  };\n\n  private throttleMethod = throttle(this.onResize, 1000);\n\n  private updateIndex = (newValue) => {\n    this.focusedImageRef.classList.add('fade-out');\n\n    this.focusedImageRef.addEventListener('animationend', () => {\n      if (newValue > this.parsedImageCollection.length - 1) {\n        this.index = 0;\n      } else if (newValue < 0) {\n        this.index = this.parsedImageCollection.length - 1;\n      } else {\n        this.index = newValue;\n      }\n\n      this.focusedImageRef.classList.remove('fade-out');\n    });\n  };\n\n  private setTimer = () => {\n    if (this.autoplay) {\n      this.timeout = setTimeout(\n        () => {\n          this.updateIndex(this.index + 1);\n        },\n        this.slow ? 30000 : 15000\n      );\n    }\n  };\n\n  private autoscrollThumbnails() {\n    this.thumbnailWrapRef\n      .getElementsByClassName('thumbnail--active')[0]\n      .scrollIntoView({ behavior: 'smooth', inline: 'center' });\n  }\n\n  /** Listeners */\n  @Listen('bsSwipeAction', { target: 'window' })\n  handleBsSwipeAction(e: CustomEvent) {\n    if (e.detail.direction === TouchDirections.Left) {\n      this.overlayRef.nextSlide();\n    }\n\n    if (e.detail.direction === TouchDirections.Right) {\n      this.overlayRef.previousSlide();\n    }\n  }\n\n  @Listen('resize', { target: 'window' })\n  handleScreenResized() {\n    this.throttleMethod();\n  }\n\n  @Listen('bsNextSlideAction')\n  handleNextMedia() {\n    this.updateIndex(this.index + 1);\n  }\n\n  @Listen('bsPreviousSlideAction')\n  handlePreviousMedia() {\n    this.updateIndex(this.index - 1);\n  }\n\n  render() {\n    return (\n      <Host>\n        <bs-dark-overlay\n          ref={(el) => {\n            this.overlayRef = el;\n          }}\n          mainTitle={this.carouselTitle}\n          screens={this.parsedImageCollection.length > 1}\n          logo={this.logo}\n        >\n          <div slot=\"media\" class=\"image-carousel\">\n            <div class=\"carousel-body\">\n              <bs-image\n                ref={(el) => {\n                  this.focusedImageRef = el;\n                }}\n                class=\"focused-image\"\n                src={this.parsedImageCollection[this.index].src}\n                srcset={this.parsedImageCollection[this.index].srcset}\n                width={this.parsedImageCollection[this.index].width}\n                height={this.parsedImageCollection[this.index].height}\n                altText={this.parsedImageCollection[this.index].altText}\n                itemprop={this.parsedImageCollection[this.index].itemprop}\n                caption={this.parsedImageCollection[this.index].caption}\n                captionCover={this.desktop}\n                cover={this.desktop}\n              />\n              <div class=\"counter\">\n                {this.index + 1}/{this.parsedImageCollection.length}\n              </div>\n            </div>\n            <div\n              class=\"carousel-footer\"\n              ref={(el) => {\n                this.thumbnailWrapRef = el;\n              }}\n            >\n              <div class=\"thumbnail-wrap\">\n                {this.parsedImageCollection.map((thumbnail, index) => (\n                  <bs-image\n                    class={`thumbnail ${index === this.index && 'thumbnail--active'}`}\n                    src={thumbnail.src}\n                    srcset={thumbnail.srcset}\n                    width={thumbnail.width}\n                    height={thumbnail.height}\n                    image-sizes=\"200px, 400px\"\n                    alt-text={thumbnail.altText}\n                    itemprop={this.parsedImageCollection[this.index].itemprop}\n                    cover={true}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        </bs-dark-overlay>\n      </Host>\n    );\n  }\n}\n","// Utilizing the BEM methodology due to the disabling of shadow DOM for this component.\n\n.base-modal {\n  position: fixed;\n  top: 0;\n  right: 0;\n  @include z-index('modal');\n}\n\n.overlay-menu,\n.overlay-menu > * {\n  box-sizing: border-box;\n}\n\n.overlay-menu {\n  position: absolute;\n  top: 0;\n  right: 0;\n\n  width: 100vw;\n  height: 100%;\n\n  background-color: $black-opacity-60;\n  backdrop-filter: blur(3px);\n\n  &__container {\n    @include font('body-default');\n    position: absolute;\n    top: 0;\n    right: 0;\n    height: 100%;\n    padding: 50px;\n    padding-right: 10vw;\n    overflow: auto;\n    background: $white;\n\n    animation: slide-in $transition-smooth;\n\n    @media screen and (max-height: #{vertical-breakpoints(\"md\")}) {\n      padding-top: 27px;\n      padding-bottom: 27px;\n    }\n\n    @include mq('max', 'xl') {\n      padding-right: 50px;\n    }\n\n    @include mq('max', 'sm') {\n      gap: rem(22);\n      width: 100%;\n      padding: 27px;\n    }\n\n    &.is-closing {\n      animation: slide-out $transition-smooth;\n    }\n  }\n\n  &__head {\n    position: relative;\n    display: flex;\n    justify-content: center;\n    margin-bottom: rem(50);\n\n    @media screen and (max-height: #{vertical-breakpoints(\"md\")}) {\n      margin-bottom: 0;\n    }\n  }\n\n  &__logo {\n    --image--height: #{rem(45)};\n    --image--fit: 'contain';\n\n    @include mq('max', 'md') {\n      --image--height: #{rem(32)};\n    }\n  }\n\n  &__close-button {\n    position: absolute;\n    top: 50%;\n    right: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: rem(34);\n    height: rem(34);\n    font-size: rem(20);\n    cursor: pointer;\n    border: 0;\n    border-radius: 50%;\n    outline: none;\n    transform: translateY(-50%);\n\n    @include mq('min', 'md') {\n      font-size: rem(24);\n    }\n  }\n\n  &__content {\n    display: flex;\n    flex-direction: column;\n    gap: rem(40);\n    width: rem(440);\n    min-height: 1px; // to resize content when there's no enough space vertically\n\n    bs-accordion-item {\n      font-size: rem(16);\n    }\n\n    @include mq('max', 'sm') {\n      width: unset;\n    }\n  }\n\n  &__thumbnail-item {\n    display: flex;\n    gap: rem(16);\n    --image--height: 65px;\n    --image--width: 65px;\n  }\n\n  &__accordion-child {\n    margin-left: rem(20);\n    font-size: rem(12);\n  }\n\n  &__link {\n    flex: 1;\n    width: 100%;\n    padding: 0;\n    font: inherit;\n    pointer-events: all;\n  }\n\n  &__content-panel {\n    display: none;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n\n    // hide scrollbar\n    -ms-overflow-style: none; /* IE and Edge */\n    scrollbar-width: none; /* Firefox */\n\n    &::-webkit-scrollbar {\n      display: none; /* Chrome, Safari and Opera */\n    }\n\n    &.is-visible {\n      display: block;\n    }\n  }\n\n  &__panel-switch {\n    display: flex;\n    flex-shrink: 0;\n    gap: 4px;\n    align-self: center;\n    padding: 4px;\n    margin-top: auto;\n    border: 1.5px solid $gray-400;\n    border-radius: rem(8);\n  }\n\n  &__switch-button {\n    padding: 0.75em 1.8em;\n    font-family: $font-family;\n    font-size: font-size('medium');\n    font-weight: font-weight('bold');\n    color: $black;\n    cursor: pointer;\n    background: transparent;\n    border: 0;\n    border-radius: rem(4);\n    opacity: 0.38;\n\n    transition: $transition;\n    transition-property: background, opacity;\n\n    @include mq('max', 'md') {\n      font-size: font-size('x-small');\n    }\n\n    &:not([aria-selected='true']):hover {\n      background: $gray-400;\n    }\n\n    &[aria-selected='true'] {\n      color: $primary;\n      background: $white;\n      opacity: 1;\n    }\n  }\n}\n\n@keyframes slide-in {\n  from {\n    transform: translateX(100%);\n  }\n\n  to {\n    transform: translateX(0);\n  }\n}\n\n@keyframes slide-out {\n  from {\n    transform: translateX(0);\n  }\n\n  to {\n    transform: translateX(100%);\n  }\n}\n","import { Component, Host, h, Prop, State, Listen } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { IconName } from '../../atoms/icon/icon.types';\nimport { BaseModalId } from '../base-modal/base-modal.types';\nimport { HeaderNavigation } from './overlay-menu.types';\nimport { Breakpoint, compareBreakpoint } from '../../../utils/breakpoints';\n\n/**\n * Overlay menu component.\n */\n@Component({\n  tag: 'bs-overlay-menu',\n  styleUrl: 'overlay-menu.scss',\n  shadow: false, // no shadow DOM to make focus-trap work with slots\n})\nexport class BsOverlayMenu {\n  private modalRef: HTMLBsBaseModalElement;\n\n  private modalId: BaseModalId = BaseModalId.OverlayMenu;\n\n  @State() isClosing: boolean = false;\n\n  /**\n   * The header navigation data.\n   */\n  @Prop() headerNavigation: HeaderNavigation | string;\n\n  @Memoize('headerNavigation')\n  get parsedHeaderNavigation(): HeaderNavigation {\n    return parseIfString(this.headerNavigation);\n  }\n\n  /**\n   * Events\n   */\n  @Listen('bsModalIsClosing')\n  bsModalIsClosingHandler(e: CustomEvent) {\n    if (e.detail.modalId === this.modalId) {\n      this.isClosing = true;\n    }\n  }\n\n  /**\n   * Methods\n   */\n  private handleCloseButtonClick = () => {\n    this.modalRef.close();\n  };\n\n  render() {\n    return (\n      <Host>\n        <bs-base-modal\n          class=\"base-modal\"\n          ref={(el) => {\n            this.modalRef = el;\n          }}\n          modalId={this.modalId}\n          transitionType=\"fade\"\n        >\n          <div class=\"overlay-menu\">\n            <div class={`overlay-menu__container ${this.isClosing ? 'is-closing' : ''}`}>\n              {/* Menu head */}\n              <div class=\"overlay-menu__head\">\n                {/* Logo */}\n                {compareBreakpoint('max', Breakpoint.md) ? (\n                  <bs-image\n                    class=\"overlay-menu__logo\"\n                    {...this.parsedHeaderNavigation.mobileMainLogo}\n                    caption=\"\"\n                  />\n                ) : (\n                  <bs-image\n                    class=\"overlay-menu__logo\"\n                    {...this.parsedHeaderNavigation.mainLogo}\n                    caption=\"\"\n                  />\n                )}\n\n                {/* Close button */}\n                <button\n                  class=\"overlay-menu__close-button\"\n                  aria-label=\"Close\"\n                  onClick={this.handleCloseButtonClick.bind(this)}\n                >\n                  <bs-icon name={IconName.Close} />\n                </button>\n              </div>\n\n              {/* Content */}\n              <div class=\"overlay-menu__content\">\n                <bs-accordion>\n                  {/* Secondary navigation */}\n                  {this.parsedHeaderNavigation.navigation.secondary &&\n                    this.parsedHeaderNavigation.navigation.secondary.map((item, index) => (\n                      <bs-click-action\n                        slot=\"accordion-item\"\n                        tagClass=\"overlay-menu__link\"\n                        href={isEmpty(item.children) ? item.href : ''}\n                        target={item.target}\n                        disabled={!isEmpty(item.children)}\n                      >\n                        <bs-accordion-item\n                          identifier={`primary-navigation-item-${index}`}\n                          accordion-item-title={item.title}\n                          expandable={Boolean(item.children && item.children.length > 0)}\n                        >\n                          <bs-accordion slot=\"accordion-content\">\n                            {item.children &&\n                              item.children.map((child, childIndex) => (\n                                <bs-click-action\n                                  slot=\"accordion-item\"\n                                  class=\"overlay-menu__link\"\n                                  tagClass=\"overlay-menu__link\"\n                                  target={item.target}\n                                  href={isEmpty(child.children) ? child.href : ''}\n                                  disabled={!isEmpty(child.children)}\n                                >\n                                  <div class=\"overlay-menu__thumbnail-item\">\n                                    <bs-image {...child.thumbnail} caption=\"\" />\n                                    <bs-accordion-item\n                                      identifier={`primary-navigation-child-item-${childIndex}`}\n                                      accordion-item-title={child.title}\n                                      expandable={Boolean(\n                                        child.children && child.children.length > 0\n                                      )}\n                                    />\n                                  </div>\n                                </bs-click-action>\n                              ))}\n                          </bs-accordion>\n                        </bs-accordion-item>\n                      </bs-click-action>\n                    ))}\n                  {/* Primary navigation */}\n                  {this.parsedHeaderNavigation.navigation.primary &&\n                    this.parsedHeaderNavigation.navigation.primary.map((item, index) => (\n                      <bs-click-action\n                        slot=\"accordion-item\"\n                        tagClass=\"overlay-menu__link\"\n                        href={isEmpty(item.children) ? item.href : ''}\n                        target={item.target}\n                        disabled={!isEmpty(item.children)}\n                      >\n                        <bs-accordion-item\n                          identifier={`secondary-navigation-item-${index}`}\n                          accordion-item-title={item.title}\n                          expandable={Boolean(item.children && item.children.length > 0)}\n                        >\n                          <bs-accordion\n                            class=\"overlay-menu__accordion-child\"\n                            slot=\"accordion-content\"\n                          >\n                            {item.children &&\n                              item.children.map((child, childIndex) => (\n                                <bs-click-action\n                                  slot=\"accordion-item\"\n                                  tagClass=\"overlay-menu__link\"\n                                  href={isEmpty(child.children) ? child.href : ''}\n                                  target={item.target}\n                                  disabled={!isEmpty(item.children)}\n                                >\n                                  <bs-accordion-item\n                                    identifier={`primary-navigation-child-item-${childIndex}`}\n                                    accordion-item-title={child.title}\n                                    expandable={Boolean(\n                                      child.children && child.children.length > 0\n                                    )}\n                                  />\n                                </bs-click-action>\n                              ))}\n                          </bs-accordion>\n                        </bs-accordion-item>\n                      </bs-click-action>\n                    ))}\n                </bs-accordion>\n\n                {/* Sticky CTA */}\n                {this.parsedHeaderNavigation.stickyButton &&\n                  this.parsedHeaderNavigation.stickyButton.text && (\n                    <bs-button\n                      {...this.parsedHeaderNavigation.stickyButton}\n                      isFullWidth={true}\n                      iconRight={IconName.ArrowForward}\n                    />\n                  )}\n\n                {/* Product slider */}\n                {this.parsedHeaderNavigation.navigation.sliderItems && (\n                  <bs-slider class=\"overlay-menu__slider\">\n                    {this.parsedHeaderNavigation.navigation.sliderItems.map((item) => (\n                      <bs-click-action\n                        class=\"overlay-menu__slider-item\"\n                        slot=\"slider-item\"\n                        href={item.href}\n                        target={item.target}\n                      >\n                        <bs-product-card\n                          card-image={JSON.stringify(item.thumbnail)}\n                          card-title={item.title}\n                          card-text={item.description}\n                        />\n                      </bs-click-action>\n                    ))}\n                  </bs-slider>\n                )}\n              </div>\n            </div>\n          </div>\n        </bs-base-modal>\n      </Host>\n    );\n  }\n}\n",":host {\n  @include reset-host;\n  @include z-index('modal');\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n","import { Component, Host, Listen, Prop, h } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { BsTestBadgeDetail } from '../../molecules/test-badge-detail/test-badge-detail';\n\n/**\n * The test badge modal component.\n */\n@Component({\n  tag: 'bs-test-badge-modal',\n  styleUrl: 'test-badge-modal.scss',\n  shadow: true,\n})\nexport class BsTestBadgeModal {\n  private overlayRef: HTMLBsLightOverlayElement;\n\n  /** Props */\n  /**\n   * The index of the featured image.\n   */\n  @Prop() index: number = 0;\n\n  /**\n   * The list of images to be shown in the carousel.\n   */\n  @Prop() testBadgeCollection:\n    | (BsTestBadgeDetail & { cardTitle: string; cardText: string })[]\n    | string;\n\n  @Memoize('testBadgeCollection')\n  get parsedtestBadgeCollection(): (BsTestBadgeDetail & { cardTitle: string; cardText: string })[] {\n    return parseIfString(this.testBadgeCollection);\n  }\n\n  /** Listeners */\n  @Listen('bsNextSlideAction')\n  bsNextSlideActionHandler() {\n    this.updateIndex(this.index + 1);\n  }\n\n  @Listen('bsPreviousSlideAction')\n  bsPreviousSlideActionHandler() {\n    this.updateIndex(this.index - 1);\n  }\n\n  /** methods */\n  private updateIndex = (newIndex: number) => {\n    if (!isEmpty(this.parsedtestBadgeCollection[newIndex])) {\n      this.index = newIndex;\n    } else {\n      this.overlayRef.closeOverlay();\n    }\n  };\n\n  render() {\n    return (\n      <Host>\n        <bs-light-overlay\n          ref={(el) => {\n            this.overlayRef = el;\n          }}\n          screens={this.parsedtestBadgeCollection.length > 1}\n        >\n          <bs-test-badge-detail\n            {...this.parsedtestBadgeCollection[this.index]}\n            slot=\"media\"\n          ></bs-test-badge-detail>\n        </bs-light-overlay>\n      </Host>\n    );\n  }\n}\n"],"version":3}