{"file":"bs-light-overlay.bs-test-badge-detail.entry.cjs.js","mappings":"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","names":["h","Host","BaseModalId","IconName","parseIfString","TitleTag","TitleSize","TextSize","Memoize"],"sources":["./src/components/organisms/light-theme-overlay/light-theme-overlay.scss?tag=bs-light-overlay","./src/components/organisms/light-theme-overlay/light-theme-overlay.tsx","./src/components/molecules/test-badge-detail/test-badge-detail.scss?tag=bs-test-badge-detail&encapsulation=shadow","./src/components/molecules/test-badge-detail/test-badge-detail.tsx"],"sourcesContent":[".light-overlay {\n  height: 100vh;\n  overflow: auto;\n  background-color: $black-opacity-60;\n  backdrop-filter: blur(3px);\n\n  .light-overlay__content {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    max-width: rem(1032);\n    min-height: 100vh;\n    margin: 0 auto;\n  }\n\n  .light-overlay__head {\n    @include mq('min', 'lg') {\n      position: relative;\n      flex-grow: 1;\n    }\n  }\n\n  .light-overlay__close-icon {\n    @include z-index('header');\n    position: absolute;\n    top: rem(10);\n    right: rem(10);\n    padding: rem(6);\n    font-size: rem(20);\n    color: $black;\n    background-color: transparent;\n    border: 0;\n    border-radius: 50%;\n    outline: none;\n\n    @include mq('min', 'md') {\n      top: rem(20);\n      right: rem(20);\n      font-size: rem(24);\n    }\n\n    @include mq('min', 'lg') {\n      top: unset;\n      right: 0;\n      bottom: rem(20);\n      padding: rem(7);\n      font-size: rem(24);\n      color: $white;\n      border: 1px solid currentColor;\n    }\n\n    &:focus {\n      background-color: rgba($gray-800, 0.5);\n    }\n  }\n\n  .light-overlay__navigation-icon {\n    position: absolute;\n    top: 50%;\n    padding: rem(7);\n    font-size: rem(24);\n    color: $white;\n    background-color: transparent;\n    border: 1px solid currentColor;\n    border-radius: 50%;\n    @include z-index('base');\n    outline: none;\n\n    &:focus {\n      background-color: rgba($gray-800, 0.5);\n    }\n\n    &--previous {\n      left: rem(-12);\n      transform: rotate(180deg) translateY(50%);\n      transform-origin: left center;\n    }\n\n    &--next {\n      right: rem(-12);\n      transform: translateY(-50%) translateX(100%);\n    }\n\n    @include mq('max', 'lg') {\n      display: none;\n    }\n  }\n\n  .light-overlay__body {\n    position: relative;\n    display: flex;\n    flex-grow: 1;\n    align-items: top;\n    width: 100%;\n    height: 100%;\n    padding: rem(40) 0;\n    background-color: $white;\n\n    @include mq('min', 'lg') {\n      box-sizing: border-box;\n      flex-grow: 0;\n      padding: rem(64);\n    }\n  }\n\n  .light-overlay__footer {\n    @include mq('min', 'lg') {\n      flex-grow: 1;\n    }\n  }\n}\n","import { Component, Host, Method, Prop, h } from '@stencil/core';\nimport { IconName } from '../../atoms/icon/icon.types';\nimport { BaseModalId } from '../base-modal/base-modal.types';\n\n/**\n * Lark-theme overlay component.\n */\n@Component({\n  tag: 'bs-light-overlay',\n  styleUrl: 'light-theme-overlay.scss',\n  shadow: false, // no shadow DOM to make focus-trap work with slots\n})\nexport class BsLightOverlay {\n  private modalRef: HTMLBsBaseModalElement;\n\n  /** Props */\n\n  /**\n   * Does the content contain multiple screens?\n   */\n  @Prop() screens?: boolean = false;\n\n  /** Methods */\n  /**\n   * This method triggers the close method on the modal.\n   */\n  @Method()\n  async closeOverlay() {\n    this.modalRef.close();\n  }\n\n  /**\n   * This method triggers the previous slide method on the modal.\n   */\n  @Method()\n  async previousSlide() {\n    this.modalRef.previousSlide();\n  }\n\n  /**\n   * This method triggers the next slide method on the modal.\n   */\n  @Method()\n  async nextSlide() {\n    this.modalRef.nextSlide();\n  }\n\n  /**\n   * This method triggers the handle focus method on the modal.\n   */\n  @Method()\n  async focusTrap() {\n    this.modalRef.handleFocus();\n  }\n\n  render() {\n    return (\n      <Host>\n        <bs-base-modal\n          ref={(el) => {\n            this.modalRef = el;\n          }}\n          modalId={BaseModalId.Media}\n          transitionType=\"fade\"\n        >\n          <div class=\"light-overlay\">\n            <div class=\"light-overlay__content\">\n              {/* Head */}\n              <bs-container class=\"light-overlay__head\" contained={true}>\n                <bs-click-action\n                  name=\"close-light-overlay\"\n                  tagClass=\"light-overlay__close-icon\"\n                  onBsClickAction={this.closeOverlay.bind(this)}\n                >\n                  <bs-icon name={IconName.Close} />\n                </bs-click-action>\n              </bs-container>\n\n              {/* Body */}\n              <div class=\"light-overlay__body\">\n                {this.screens && (\n                  <bs-click-action\n                    name=\"previous-media\"\n                    tagClass=\"light-overlay__navigation-icon light-overlay__navigation-icon--previous\"\n                    onBsClickAction={this.previousSlide.bind(this)}\n                  >\n                    <bs-icon name={IconName.CaretForward} />\n                  </bs-click-action>\n                )}\n                <bs-container contained={true}>\n                  <slot name=\"media\"></slot>\n                </bs-container>\n                {this.screens && (\n                  <bs-click-action\n                    name=\"next-media\"\n                    tagClass=\"light-overlay__navigation-icon light-overlay__navigation-icon--next\"\n                    onBsClickAction={this.nextSlide.bind(this)}\n                  >\n                    <bs-icon name={IconName.CaretForward} />\n                  </bs-click-action>\n                )}\n              </div>\n\n              {/* Footer */}\n              <bs-container class=\"light-overlay__footer\" contained={true}></bs-container>\n            </div>\n          </div>\n        </bs-base-modal>\n      </Host>\n    );\n  }\n}\n",":host {\n  @include reset-host;\n  --grid-main-image-height: 250px;\n  --grid-main-image-padding: 20px;\n  --grid-support-image-height: 0;\n  --grid-gap: 0;\n\n  @include mq('min', 'lg') {\n    --grid-main-image-height: 435px;\n    --grid-main-image-padding: 90px;\n    --grid-support-image-height: 0;\n    --grid-gap: 0;\n  }\n}\n\n:host .badge-detail {\n  display: flex;\n  flex-direction: column;\n  gap: rem(20);\n\n  @include mq('min', 'lg') {\n    flex-direction: row-reverse;\n    gap: rem(40);\n    height: calc(\n      var(--grid-main-image-height) + var(--grid-support-image-height) + var(--grid-gap)\n    );\n  }\n}\n\n:host .image-grid {\n  display: grid;\n  grid-template-areas:\n    'one one'\n    'two three';\n  grid-template-rows: var(--grid-main-image-height) var(--grid-support-image-height);\n  grid-template-columns: 1fr 1fr;\n  gap: var(--grid-gap);\n  width: 100%;\n\n  @include mq('min', 'lg') {\n    width: rem(420);\n  }\n}\n\n:host .image {\n  --image--fit: contain;\n  --image--height: calc(var(--grid-support-image-height) - 20px);\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: rem(20);\n  overflow: hidden;\n  background-color: #eff1f1;\n\n  &:nth-child(1) {\n    --image--height: calc(var(--grid-main-image-height) - (2 * var(--grid-main-image-padding)));\n    grid-area: one;\n  }\n\n  &:nth-child(2) {\n    grid-area: two;\n  }\n\n  &:nth-child(3) {\n    grid-area: three;\n  }\n}\n\n:host .content {\n  position: relative;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  overflow: auto;\n}\n\n:host .cover {\n  @include mq('min', 'lg') {\n    @include cover;\n    padding-right: rem(10);\n  }\n}\n\n:host .button {\n  color: $red-50;\n}\n","import { Component, Host, Prop, h } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { TitleSize, TitleTag } from '../../atoms/title/title.types';\nimport { TextSize } from '../../atoms/text/text.types';\nimport { BsImage } from '../../atoms/image/image';\nimport { BsButton } from '../../atoms/button/button';\n\n/**\n * Test badge detail component.\n */\n@Component({\n  tag: 'bs-test-badge-detail',\n  styleUrl: 'test-badge-detail.scss',\n  shadow: true,\n})\nexport class BsTestBadgeDetail {\n  /** Props */\n  /** The badge title. */\n  @Prop() badgeTitle: string;\n\n  /** The badge content. */\n  @Prop() badgeText: string;\n\n  /** The badge CTA. */\n  @Prop() badgeCta: BsButton | string;\n\n  @Memoize('badgeCta')\n  get parsedBadgeCta(): BsButton {\n    return parseIfString(this.badgeCta);\n  }\n\n  /**\n   * The test badge image.\n   */\n  @Prop() badgeImages: BsImage[] | string;\n\n  @Memoize('badgeImages')\n  get parsedbadgeImages(): BsImage[] {\n    return parseIfString(this.badgeImages);\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"badge-detail\">\n          <div class=\"content\">\n            <div class=\"cover\">\n              <bs-title\n                class=\"title\"\n                text={this.badgeTitle}\n                tag={TitleTag.Span}\n                size={TitleSize.Head3}\n              ></bs-title>\n              <bs-text class=\"text\" text={this.badgeText} size={TextSize.Default}></bs-text>\n              {this.parsedBadgeCta.text && (\n                <bs-button class=\"button\" {...this.parsedBadgeCta}></bs-button>\n              )}\n            </div>\n          </div>\n          <div class=\"media\">\n            <div class=\"image-grid\">\n              <div class=\"image\">\n                <bs-image class=\"relative\" {...this.parsedbadgeImages[0]} caption=\"\"></bs-image>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}