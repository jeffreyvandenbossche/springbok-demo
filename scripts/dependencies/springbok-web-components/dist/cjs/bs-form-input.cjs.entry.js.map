{"file":"bs-form-input.entry.cjs.js","mappings":"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","names":["ValidatorNames","isEmpty","h","Host"],"sources":["./src/components/molecules/form-input/form-input.types.ts","./src/components/molecules/form-input/form-input.scss?tag=bs-form-input&encapsulation=shadow","./src/components/molecules/form-input/form-input.tsx"],"sourcesContent":["export enum InputType {\n  Text = 'text',\n  Email = 'email',\n  Number = 'number',\n  Textarea = 'textarea',\n  Tel = 'tel',\n  Date = 'date',\n  Time = 'time',\n  DateTime = 'datetime-local',\n  Password = 'password',\n  Hidden = 'hidden',\n}\n",":host {\n  @include reset-host;\n}\n\n:host .form-input {\n  width: 100%;\n  min-height: rem(48);\n  padding: rem(24) rem(24) 0;\n  resize: none;\n  border: 0;\n  outline: none;\n\n  &.is-resizeable {\n    resize: vertical;\n  }\n}\n\ninput:-webkit-autofill,\ninput:-webkit-autofill:focus {\n  transition:\n    background-color 0s 600000s,\n    color 0s 600000s;\n}\n\ninput::-webkit-inner-spin-button,\ninput::-webkit-calendar-picker-indicator {\n  display: none;\n  appearance: none;\n}\n","import { Component, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { isEmpty } from '@springbokagency/stencil-base';\nimport { IconName } from '../../../components';\nimport { ValidatorEntry, ValidatorNames } from '../../../validators/validators.types';\nimport { InputType } from './form-input.types';\n\n/**\n * The form input component.\n */\n@Component({\n  tag: 'bs-form-input',\n  styleUrl: 'form-input.scss',\n  shadow: true,\n})\nexport class BsFormInput {\n  private formFieldRef: HTMLBsFormFieldElement;\n\n  /**\n   * Wether or not the input field is filled\n   */\n  @State() filled: boolean = false;\n\n  /**\n   * Wether or not the input field is focused\n   */\n  @State() focused: boolean = false;\n\n  /**\n   * Wether or not the input field is invalid\n   */\n  @State() invalid: boolean = false;\n\n  /**\n   * The unique name to identify the form element\n   */\n  @Prop() name!: string;\n\n  /**\n   * The unique name to identify the form element\n   */\n  @Prop() type: InputType = InputType.Text;\n\n  /**\n   * The label describing the form field\n   */\n  @Prop() label!: string;\n\n  /**\n   * The value of the form field\n   */\n  @Prop() value?: string = '';\n\n  @Watch('value')\n  validateValue(newValue: string) {\n    const isBlank = typeof newValue !== 'string' || newValue === '';\n\n    this.filled = !isBlank;\n  }\n\n  /**\n   * Wether or not the input field is required\n   */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Wether or not the input field is required\n   */\n  @Prop() min?: string;\n\n  /**\n   * Wether or not the input field is required\n   */\n  @Prop() max?: string;\n\n  /**\n   * The error message to be displayed when the required field remains empty\n   */\n  @Prop() requiredMessage: string;\n\n  /**\n   * The error message to be displayed when the field has an invalid input\n   */\n  @Prop() invalidMessage?: string;\n\n  /**\n   * The icon to be displayed on the right hand side of the form field\n   */\n  @Prop() icon?: IconName;\n\n  /**\n   * The default amount of rows the textarea has\n   */\n  @Prop() rows?: number;\n\n  /**\n   * Wether or not the textarea is resizeable by the user\n   */\n  @Prop() resizeable?: boolean;\n\n  private inputEl: HTMLInputElement;\n\n  private focus = () => {\n    this.focused = true;\n\n    if (this.inputEl !== undefined && this.placeholderInputTypes.includes(this.type)) {\n      this.inputEl.showPicker();\n    }\n  };\n\n  private focusout = (e: FocusEvent) => {\n    this.value = (e.target as HTMLInputElement | HTMLTextAreaElement).value;\n    this.formFieldRef.value = this.value;\n    this.focused = false;\n  };\n\n  private getValidator = (): string | ValidatorEntry => {\n    if (this.type === InputType.Email) {\n      return ValidatorNames.Email;\n    }\n\n    if (!isEmpty(this.min) || !isEmpty(this.max)) {\n      if (this.charInputTypes.includes(this.type as InputType)) {\n        return { name: ValidatorNames.Length, options: { min: this.min, max: this.max } };\n      }\n\n      return { name: ValidatorNames.MinMax, options: { min: this.min, max: this.max } };\n    }\n\n    return this.type;\n  };\n\n  private charInputTypes = [\n    InputType.Text,\n    InputType.Email,\n    InputType.Password,\n    InputType.Tel,\n    InputType.Textarea,\n  ];\n\n  private placeholderInputTypes = [InputType.Date, InputType.DateTime, InputType.Time];\n\n  render() {\n    const minMaxArg = this.charInputTypes.includes(this.type as InputType)\n      ? { minlength: this.min, maxlength: this.max }\n      : { min: this.min, max: this.max };\n\n    return (\n      <Host>\n        <bs-form-field\n          ref={(el) => {\n            this.formFieldRef = el;\n          }}\n          value={this.value}\n          name={this.name}\n          hidden={this.type === 'hidden'}\n          focused={this.placeholderInputTypes.includes(this.type) ? true : this.focused}\n          filled={this.filled}\n          invalid={this.invalid}\n          required={this.required}\n          invalidMessage={this.invalidMessage}\n          requiredMessage={this.requiredMessage}\n          label={this.label}\n          icon={this.icon}\n          validator={this.getValidator()}\n          onClick={this.focus}\n        >\n          {this.type === 'textarea' ? (\n            <textarea\n              rows={this.rows}\n              slot=\"form-element\"\n              class={{ 'form-input': true, 'is-resizeable': this.resizeable }}\n              required={this.required}\n              id={this.name}\n              minlength={this.min}\n              maxlength={this.max}\n              value={this.value}\n              name={this.name}\n              onFocus={this.focus}\n              onFocusout={this.focusout}\n            ></textarea>\n          ) : (\n            <input\n              ref={(el) => {\n                this.inputEl = el;\n              }}\n              slot=\"form-element\"\n              class=\"form-input\"\n              required={this.required}\n              id={this.name}\n              type={this.type}\n              {...minMaxArg}\n              value={this.value}\n              name={this.name}\n              onFocus={this.focus}\n              onFocusout={this.focusout}\n            />\n          )}\n          <label slot=\"form-label\" class=\"form-label\" htmlFor={this.name} title={this.label}>\n            {this.label}\n            {this.required ? <span aria-hidden=\"true\">&nbsp;*</span> : ''}\n          </label>\n        </bs-form-field>\n      </Host>\n    );\n  }\n}\n"],"version":3}