{"file":"bs-form-radio-button.entry.cjs.js","mappings":";;;;;;;;;AAAA,MAAM,kBAAkB,GAAG,2qOAA2qO;;;;;;;;;;;;MCYzrO,iBAAiB;;;;;;IA+CpB,mBAAc,GAAG,CAAC,CAAe;MACvC,MAAM,EAAE,GAAG,CAAC,CAAC,MAA0B,CAAC;MAExC,IAAI,EAAE,CAAC,OAAO,EAAE;QACd,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC;QACtB,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;OACtC;KACF,CAAC;mBA/C0B,KAAK;mBAEL,KAAK;;;;oBAiBJ,IAAI;iBAKR,EAAE;;;EAQ3B,IAAI,aAAa;IACf,OAAOA,2BAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;GACpC;EAeD,gBAAgB;IACd,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI;MAC9B,IAAI,IAAI,CAAC,QAAQ,EAAE;QACjB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;OACtC;KACF,CAAC,CAAC;GACJ;EAED,MAAM;IACJ,QACEC,QAACC,UAAI,QACHD,sBAAU,KAAK,EAAC,eAAe,IAC7BA,oBAAQ,KAAK,EAAC,aAAa,IACxB,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,QAAQ,IAAI,CAACE,eAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAGF,iCAAkB,MAAM,cAAe,GAAG,EAAE,CAC9E,EACTA,2BACE,GAAG,EAAE,CAAC,EAAE;QACN,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;OACxB,EACD,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,eAAe,EAAE,IAAI,CAAC,eAAe,EACrC,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,MAAM,EAAE,KAAK,IAEZ,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,KAAK,EAAEG,OAAK,MACnCH,iBAAK,IAAI,EAAC,cAAc,EAAC,KAAK,EAAC,YAAY,IACzCA,mBACE,KAAK,EAAC,YAAY,EAClB,EAAE,EAAE,SAASG,OAAK,EAAE,EACpB,IAAI,EAAC,OAAO,EACZ,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,OAAO,EAAE,KAAK,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,cAAc,GAC7B,EACFH,mBAAO,KAAK,EAAC,YAAY,EAAC,OAAO,EAAE,SAASG,OAAK,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,IAAI,IACnE,KAAK,CAAC,IAAI,CACL,CACJ,CACP,CAAC,CACY,CACP,CACN,EACP;GACH;;AAnED;EADCC,eAAO,CAAC,SAAS,CAAC;sDAGlB;;;;;","names":["parseIfString","h","Host","isEmpty","index","Memoize"],"sources":["./src/components/molecules/form-radio-button/form-radio-button.scss?tag=bs-form-radio-button&encapsulation=shadow","./src/components/molecules/form-radio-button/form-radio-button.tsx"],"sourcesContent":[":host {\n  @include reset-host;\n}\n\n:host .form-fieldset {\n  border: 0;\n}\n\n:host .form-legend {\n  margin-bottom: 0.5rem;\n}\n\n:host .form-group {\n  display: flex;\n  margin-bottom: 0.5rem;\n}\n\n:host .form-input {\n  width: rem(22);\n  height: rem(22);\n  padding: 1px;\n  border: 1px solid $gray-500;\n  border-radius: 4px;\n\n  + .form-label {\n    @include font(label);\n    top: 0;\n    margin-right: rem(10);\n    margin-left: rem(10);\n    line-height: rem(22);\n  }\n\n  &:focus {\n    outline: 1px solid $gray-400;\n  }\n}\n","import { Component, Host, Prop, State, h } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { RadioButtonItem } from './form-radio-button.types';\n\n/**\n * The form radio component.\n */\n@Component({\n  tag: 'bs-form-radio-button',\n  styleUrl: 'form-radio-button.scss',\n  shadow: true,\n})\nexport class BsFormRadioButton {\n  private formFieldRef: HTMLBsFormFieldElement;\n\n  /**\n   * State\n   */\n\n  @State() invalid: boolean = false;\n\n  @State() focused: boolean = false;\n\n  @State() value: string;\n\n  /**\n   * The unique name to identify the form element\n   */\n  @Prop() name!: string;\n\n  /**\n   * The error message to be displayed when the required field remains empty\n   */\n  @Prop() requiredMessage: string;\n\n  /**\n   * Wether or not the checkbox is required\n   */\n  @Prop() required?: boolean = true;\n\n  /**\n   * The label displayed after the checkbox\n   */\n  @Prop() label?: string = '';\n\n  /**\n   * A list of values for each radio button\n   */\n  @Prop() options: RadioButtonItem[] | string;\n\n  @Memoize('options')\n  get parsedOptions(): RadioButtonItem[] {\n    return parseIfString(this.options);\n  }\n\n  /**\n   * Methods\n   */\n\n  private handleOnChange = (e: PointerEvent) => {\n    const el = e.target as HTMLInputElement;\n\n    if (el.checked) {\n      this.value = el.value;\n      this.formFieldRef.value = this.value;\n    }\n  };\n\n  componentDidLoad() {\n    this.parsedOptions.forEach((item) => {\n      if (item.selected) {\n        this.value = item.value;\n        this.formFieldRef.value = this.value;\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Host>\n        <fieldset class=\"form-fieldset\">\n          <legend class=\"form-legend\">\n            {this.label}\n            {this.required && !isEmpty(this.label) ? <span aria-hidden=\"true\">&nbsp;*</span> : ''}\n          </legend>\n          <bs-form-field\n            ref={(el) => {\n              this.formFieldRef = el;\n            }}\n            value={this.value}\n            name={this.name}\n            invalid={this.invalid}\n            required={this.required}\n            requiredMessage={this.requiredMessage}\n            label={this.label}\n            border={false}\n          >\n            {this.parsedOptions.map((radio, index) => (\n              <div slot=\"form-element\" class=\"form-group\">\n                <input\n                  class=\"form-input\"\n                  id={`radio-${index}`}\n                  type=\"radio\"\n                  name={this.name}\n                  value={radio.value}\n                  disabled={radio.disabled}\n                  checked={radio.selected}\n                  onChange={this.handleOnChange}\n                />\n                <label class=\"form-label\" htmlFor={`radio-${index}`} title={radio.text}>\n                  {radio.text}\n                </label>\n              </div>\n            ))}\n          </bs-form-field>\n        </fieldset>\n      </Host>\n    );\n  }\n}\n"],"version":3}