{"file":"bs-share-banner.entry.cjs.js","mappings":";;;;;;;;AAQO,MAAM,cAAc,GAAoB;EAC7C;IACE,IAAI,EAAEA,mBAAQ,CAAC,cAAc;IAC7B,IAAI,EAAE,UAAU;IAChB,EAAE,EAAE,UAAU;GACf;EACD;IACE,IAAI,EAAEA,mBAAQ,CAAC,cAAc;IAC7B,IAAI,EAAE,UAAU;IAChB,EAAE,EAAE,UAAU;GACf;EACD;IACE,IAAI,EAAEA,mBAAQ,CAAC,WAAW;IAC1B,IAAI,EAAE,OAAO;IACb,EAAE,EAAE,OAAO;GACZ;EACD;IACE,IAAI,EAAEA,mBAAQ,CAAC,aAAa;IAC5B,IAAI,EAAE,GAAG;IACT,EAAE,EAAE,SAAS;GACd;CACF;;AC7BD,MAAM,cAAc,GAAG,s1OAAs1O;;MCah2O,aAAa;;;;;;;EAUhB,gBAAgB,CAAC,IAAkB;IACzC,IAAI,IAAI,KAAK,OAAO,EAAE;MACpB,IAAI,CAAC,YAAY,EAAE,CAAC;KACrB;SAAM;MACL,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;KAC3B;GACF;EAEO,YAAY;IAClB,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAE9D,MAAM,CAAC,IAAI,CACT,gBAAgB,iBAAiB,EAAE,EACnC,QAAQ;KACT,CAAC;GACH;EAEO,cAAc,CAAC,UAAwB;IAC7C,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC9D,IAAI,cAAsB,CAAC;IAE3B,QAAQ,UAAU;MAChB,KAAK,UAAU;QACb,cAAc,GAAG,gDAAgD,iBAAiB,EAAE,CAAC;QACrF,MAAM;MAER,KAAK,SAAS;QACZ,cAAc,GAAG,wCAAwC,iBAAiB,EAAE,CAAC;QAC7E,MAAM;MAER,KAAK,UAAU;QACb,cAAc,GAAG,uDAAuD,iBAAiB,EAAE,CAAC;QAC5F,MAAM;KAIT;IAED,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,UAAU,EAAE,uBAAuB,CAAC,CAAC;GAClE;;EAGD,gBAAgB;IACd,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;GACxC;EAED,MAAM;IACJ,QACEC,QAACC,UAAI,QACHD,iBAAK,KAAK,EAAC,cAAc,IAEvBA,sBAAU,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,GAAG,EAAEE,oBAAQ,CAAC,EAAE,EAAE,IAAI,EAAEC,qBAAS,CAAC,KAAK,GAAI,EAG9EH,iBAAK,KAAK,EAAC,gBAAgB,IACxB,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,MACvBA,6BAAiB,KAAK,EAAC,MAAM,EAAC,eAAe,EAAE,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,IACjFA,qBAAS,IAAI,EAAE,IAAI,CAAC,IAAI,GAAI,CACZ,CACnB,CAAC,CACE,CACF,CACD,EACP;GACH;;;;;;","names":["IconName","h","Host","TitleTag","TitleSize"],"sources":["./src/components/molecules/share-banner/share-banner.data.ts","./src/components/molecules/share-banner/share-banner.scss?tag=bs-share-banner&encapsulation=shadow","./src/components/molecules/share-banner/share-banner.tsx"],"sourcesContent":["import { Components } from '../../../components';\nimport { SharingButton } from './share-banner.types';\nimport { IconName } from '../../atoms/icon/icon.types';\n\nexport const shareBannerData: Components.BsShareBanner = {\n  sectionTitle: 'Share this story',\n};\n\nexport const sharingButtons: SharingButton[] = [\n  {\n    icon: IconName.SocialFacebook,\n    text: 'Facebook',\n    id: 'facebook',\n  },\n  {\n    icon: IconName.SocialLinkedin,\n    text: 'Linkedin',\n    id: 'linkedin',\n  },\n  {\n    icon: IconName.SocialEmail,\n    text: 'Email',\n    id: 'email',\n  },\n  {\n    icon: IconName.SocialTwitter,\n    text: 'X',\n    id: 'twitter',\n  },\n];\n",":host {\n  @include reset-host;\n}\n\n:host .share-banner {\n  display: flex;\n  gap: rem(24);\n  align-items: flex-start;\n  justify-content: space-between;\n  padding: rem(44) 0;\n\n  @include mq('max', 'sm') {\n    flex-direction: column;\n    align-items: center;\n  }\n}\n\n:host .button-wrapper {\n  display: grid;\n  flex-wrap: wrap;\n  grid-template-columns: repeat(4, 1fr);\n  gap: rem(16);\n  align-items: center;\n  justify-content: flex-start;\n\n  @include mq('max', 'sm') {\n    gap: rem(27);\n  }\n\n  bs-icon {\n    padding: rem(7);\n    font-size: rem(24);\n    color: $gray-700;\n    border: 1px solid $gray-800;\n    border-radius: 50%;\n  }\n}\n\n:host .social-section {\n  display: flex;\n  flex-direction: column;\n  gap: rem(12);\n}\n\n:host .social-item {\n  display: flex;\n  gap: rem(12);\n  align-items: center;\n}\n\n:host .text {\n  flex: 1;\n}\n","import { Component, Host, h, Prop, State } from '@stencil/core';\nimport { TitleSize, TitleTag } from '../../atoms/title/title.types';\nimport { sharingButtons } from './share-banner.data';\nimport { SharingTypes } from './share-banner.types';\n\n/**\n * Share banner component.\n */\n@Component({\n  tag: 'bs-share-banner',\n  styleUrl: 'share-banner.scss',\n  shadow: true,\n})\nexport class BsShareBanner {\n  /** State */\n  @State() currentUrl: string;\n\n  /**\n   * Section's title\n   */\n  @Prop() sectionTitle: string;\n\n  /** Methods */\n  private handleShareClick(type: SharingTypes) {\n    if (type === 'email') {\n      this.shareByEmail();\n    } else {\n      this.shareToSocials(type);\n    }\n  }\n\n  private shareByEmail() {\n    const encodedCurrentUrl = encodeURIComponent(this.currentUrl);\n\n    window.open(\n      `mailto:?body=${encodedCurrentUrl}`,\n      '_blank' // <- This is what makes it open in a new window.\n    );\n  }\n\n  private shareToSocials(socialType: SharingTypes) {\n    const encodedCurrentUrl = encodeURIComponent(this.currentUrl);\n    let sharingLinkUrl: string;\n\n    switch (socialType) {\n      case 'facebook':\n        sharingLinkUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodedCurrentUrl}`;\n        break;\n\n      case 'twitter':\n        sharingLinkUrl = `https://twitter.com/intent/tweet?url=${encodedCurrentUrl}`;\n        break;\n\n      case 'linkedin':\n        sharingLinkUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodedCurrentUrl}`;\n        break;\n\n      default:\n        break;\n    }\n\n    window.open(sharingLinkUrl, 'myWindow', 'width=550, height=400');\n  }\n\n  /** Lifecycle Hooks */\n  componentDidLoad() {\n    this.currentUrl = window.location.href;\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"share-banner\">\n          {/* Title */}\n          <bs-title text={this.sectionTitle} tag={TitleTag.H2} size={TitleSize.Head3} />\n\n          {/* Sharing buttons */}\n          <div class=\"button-wrapper\">\n            {sharingButtons.map((item) => (\n              <bs-click-action class=\"icon\" onBsClickAction={() => this.handleShareClick(item.id)}>\n                <bs-icon name={item.icon} />\n              </bs-click-action>\n            ))}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}