{"version":3,"names":["accordionCss","BsAccordion","parsedMainTitle","parseIfString","this","mainTitle","bsAccordionStateHandler","event","target","active","render","h","Host","class","isEmpty","text","variant","color","tag","size","name","__decorate","Memoize","accordionItemCss","BsAccordionItem","validateIdentifier","newValue","isBlank","Error","bsAccordionStateActionHandler","state","bsAccordionStateAction","emit","itemIdentifier","identifier","replace","toLowerCase","expandable","type","toString","id","onClick","tabIndex","disabled","accordionItemTitle","IconName","CaretDownward","role","productCardCss","BsProductCard","parsedCardImage","cardImage","Object","assign","caption","TitleTag","Span","TitleSize","Head4","cardTitle","TitleColor","Black","cardText","isInViewport","el","container","rect","getBoundingClientRect","containerRect","top","left","bottom","right","window","innerHeight","document","documentElement","clientHeight","innerWidth","clientWidth","sliderCss","BsSlider","onResize","slides","teaserSliderRef","scrollWidth","offsetWidth","handleOverlay","scrollLeft","navigationRef","style","maxWidth","throttleMethod","throttle","onPreviousSlide","cards","getCards","i","length","scrollTo","behavior","offsetLeft","onNextSlide","offset","containerWidth","itemsVisible","slotElement","querySelector","assignedNodes","handleScreenResized","componentDidLoad","addEventListener","ref","onBsClickAction","tagClass","ariaLabelText","ArrowBackward","ArrowForward"],"sources":["./src/components/organisms/accordion/accordion.scss?tag=bs-accordion&encapsulation=shadow","./src/components/organisms/accordion/accordion.tsx","./src/components/molecules/accordion-item/accordion-item.scss?tag=bs-accordion-item&encapsulation=shadow","./src/components/molecules/accordion-item/accordion-item.tsx","./src/components/molecules/product-card/product-card.scss?tag=bs-product-card&encapsulation=shadow","./src/components/molecules/product-card/product-card.tsx","./src/utils/inViewport.ts","./src/components/organisms/slider/slider.scss?tag=bs-slider&encapsulation=shadow","./src/components/organisms/slider/slider.tsx"],"sourcesContent":[":host {\n  @include reset-host;\n}\n\n:host .accordion {\n  font-size: rem(20);\n  list-style: none;\n}\n","import { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { Component, Host, h, Prop, Listen } from '@stencil/core';\nimport { BsTitle } from '../../atoms/title/title';\n\n/**\n * The Accordion component.\n */\n@Component({\n  tag: 'bs-accordion',\n  styleUrl: 'accordion.scss',\n  shadow: true,\n})\nexport class BsAccordion {\n  /**\n   * Section's title.\n   */\n  @Prop() mainTitle?: BsTitle | string;\n\n  @Memoize('mainTitle')\n  get parsedMainTitle(): BsTitle {\n    return parseIfString(this.mainTitle);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  @Listen('bsAccordionStateAction')\n  bsAccordionStateHandler(event: CustomEvent<boolean>) {\n    const target = event.target as HTMLBsAccordionItemElement;\n\n    target.active = !target.active;\n  }\n\n  render() {\n    return (\n      <Host>\n        <section class=\"accordion-wrapper\">\n          {/* Main title */}\n          {!isEmpty(this.parsedMainTitle) && !isEmpty(this.parsedMainTitle.text) && (\n            <bs-title\n              variant={this.parsedMainTitle.variant}\n              color={this.parsedMainTitle.color}\n              tag={this.parsedMainTitle.tag}\n              text={this.parsedMainTitle.text}\n              size={this.parsedMainTitle.size}\n            />\n          )}\n          <ul class=\"accordion\" aria-label=\"Accordion Control Group\">\n            <slot name=\"accordion-item\" />\n          </ul>\n        </section>\n      </Host>\n    );\n  }\n}\n",":host {\n  @include reset-host;\n  flex: 1;\n}\n\n:host .accordion-item {\n  margin-bottom: rem(-1);\n  list-style: none;\n  border-bottom: rem(1) solid $gray-800;\n\n  &.is-active .accordion-panel {\n    display: block;\n  }\n\n  &.is-active .accordion-trigger-icon {\n    transform: scaleY(-100%);\n  }\n}\n\n:host .accordion-trigger {\n  display: flex;\n  gap: rem(20);\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  padding: rem(24) 0;\n  font: inherit;\n  line-height: line-height(default);\n  color: inherit;\n\n  text-align: left;\n  cursor: pointer;\n\n  background-color: transparent;\n  border: 0;\n\n  &:disabled {\n    pointer-events: none;\n    cursor: default;\n  }\n}\n\n:host .accordion-trigger-icon {\n  font-size: rem(24);\n}\n\n:host .accordion-panel {\n  display: none;\n}\n","import { Component, Event, EventEmitter, Host, Prop, Watch, h } from '@stencil/core';\n\nimport { IconName } from '../../atoms/icon/icon.types';\n\n@Component({\n  tag: 'bs-accordion-item',\n  styleUrl: 'accordion-item.scss',\n  shadow: true,\n})\nexport class BsAccordionItem {\n  /**\n   * Accordion's unique identifier used for accessibility.\n   */\n  @Prop() identifier!: string;\n\n  // eslint-disable-next-line class-methods-use-this\n  @Watch('identifier')\n  validateIdentifier(newValue: string) {\n    // don't allow `thingToDo` to be the empty string\n    const isBlank = typeof newValue !== 'string' || newValue === '';\n\n    if (isBlank) {\n      throw new Error('BsAccordionItem identifier is a required property and cannot be empty');\n    }\n  }\n\n  /**\n   * Accordion's title.\n   */\n  @Prop() accordionItemTitle: string;\n\n  /**\n   * Accordion's active state\n   */\n  @Prop() active?: boolean;\n\n  /**\n   * Is the accordion expandable?\n   */\n  @Prop({ reflect: true }) expandable?: boolean = true;\n\n  /**\n   * Accordion's event emitter\n   */\n  @Event() bsAccordionStateAction: EventEmitter<Boolean>;\n\n  private bsAccordionStateActionHandler(state: Boolean) {\n    this.bsAccordionStateAction.emit(state);\n  }\n\n  render() {\n    const itemIdentifier = this.identifier.replace(/\\s+/g, '-').toLowerCase();\n\n    return (\n      <Host>\n        <li class={`accordion-item ${this.expandable && this.active ? 'is-active' : ''}`}>\n          {/* Button */}\n          <button\n            class=\"accordion-trigger\"\n            type=\"button\"\n            aria-controls={itemIdentifier}\n            aria-expanded={this.expandable && this.active && this.active.toString()}\n            id={`accordion-${itemIdentifier}`}\n            onClick={() => {\n              this.bsAccordionStateActionHandler(this.active);\n            }}\n            tabIndex={this.expandable ? 1 : -1}\n            disabled={!this.expandable}\n          >\n            <span class=\"accordion-trigger-title\">{this.accordionItemTitle}</span>\n\n            {this.expandable && (\n              <bs-icon\n                aria-hidden=\"true\"\n                class=\"accordion-trigger-icon\"\n                name={IconName.CaretDownward}\n              />\n            )}\n          </button>\n          {/* Content */}\n          <div\n            class=\"accordion-panel\"\n            role=\"region\"\n            aria-hidden={(!this.active).toString()}\n            id={itemIdentifier}\n          >\n            <div class=\"accordion-panel-content\">\n              <slot name=\"accordion-content\" />\n            </div>\n          </div>\n        </li>\n      </Host>\n    );\n  }\n}\n",":host {\n  @include reset-host;\n}\n\n:host .card {\n  display: flex;\n  flex-direction: column;\n  gap: rem(16);\n  align-items: center;\n  height: 100%;\n  padding: rem(10);\n  border: 1px solid $gray-800;\n  border-radius: rem(8);\n\n  @include mq('min', 'xs') {\n    width: rem(285);\n  }\n\n  @include mq('min', 'md') {\n    width: rem(330);\n  }\n}\n\n.image {\n  display: flex;\n}\n\n.content {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: flex-start;\n  width: 100%;\n  max-height: 100%;\n  overflow: hidden;\n\n  .title {\n    margin-bottom: rem(10);\n    line-height: 1.1;\n  }\n\n  .text {\n    font-size: rem(12);\n  }\n}\n","import { Component, Host, h, Prop } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport type { BsImage } from '../../atoms/image/image';\nimport { TitleColor, TitleSize, TitleTag } from '../../atoms/title/title.types';\n\n/**\n * Product card component.\n */\n@Component({\n  tag: 'bs-product-card',\n  styleUrl: 'product-card.scss',\n  shadow: true,\n})\nexport class BsProductCard {\n  /** Props */\n  /**\n   * The product card title.\n   */\n  @Prop() cardTitle: string;\n\n  /**\n   * The cta label.\n   */\n  @Prop() cardText: string;\n\n  /**\n   * The product card image.\n   */\n  @Prop() cardImage: BsImage | string;\n\n  @Memoize('cardImage')\n  get parsedCardImage(): BsImage {\n    return parseIfString(this.cardImage);\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"card\">\n          <div class=\"image\">\n            <bs-image {...this.parsedCardImage} caption=\"\" />\n          </div>\n          <div class=\"content\">\n            <bs-title\n              class=\"title\"\n              tag={TitleTag.Span}\n              size={TitleSize.Head4}\n              text={this.cardTitle}\n              color={TitleColor.Black}\n            />\n            <bs-text class=\"text\" text={this.cardText} />\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n","import { isEmpty } from '@springbokagency/stencil-base';\n\nexport function isInViewport(el: HTMLElement, container?: HTMLElement) {\n  if (!isEmpty(el)) {\n    const rect = el.getBoundingClientRect();\n\n    if (container && !isEmpty(container.getBoundingClientRect())) {\n      const containerRect = container.getBoundingClientRect();\n\n      return (\n        rect.top >= containerRect.top &&\n        rect.left >= containerRect.left &&\n        rect.bottom <= containerRect.bottom &&\n        rect.right <= containerRect.right\n      );\n    }\n\n    return (\n      rect.top >= 0 &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n  }\n\n  return false;\n}\n","/* stylelint-disable property-no-vendor-prefix */\n:host {\n  @include reset-host;\n  position: relative;\n}\n\n:host .overlay {\n  @include z-index('base');\n  @include cover;\n  display: flex;\n  height: calc(100% - rem(20));\n  pointer-events: none;\n\n  @include mq('max', 'md') {\n    display: none;\n  }\n}\n\n:host .navigation {\n  position: relative;\n  width: 100%;\n  transition: max-width 0.2s ease;\n\n  @include mq('max', 'md') {\n    display: none;\n  }\n}\n\n:host .fade {\n  flex: 1;\n  width: 100%;\n  background: linear-gradient(90deg, rgba($white, 0.5) 20%, $white);\n}\n\n:host .navigation-back {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  transform: translate(-50%, -50%);\n}\n\n:host .navigation-forward {\n  position: absolute;\n  top: 50%;\n  right: 0;\n  transform: translate(50%, -50%);\n}\n\n:host .teaser-slider {\n  display: flex;\n  gap: rem(12);\n  overflow: auto;\n\n  @include mq('min', 'md') {\n    gap: rem(24);\n    padding-bottom: rem(20);\n  }\n\n  &::-webkit-scrollbar-track {\n    background-color: $gray-900;\n  }\n\n  &::-webkit-scrollbar {\n    height: 2px;\n    background-color: transparent;\n\n    @include mq('max', 'md') {\n      display: none;\n    }\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: $primary;\n  }\n}\n\n:host .navigation-button {\n  padding: rem(8);\n  font-size: rem(24);\n  pointer-events: all;\n  background-color: $white;\n  border: 1px solid $gray-800;\n  border-radius: 50%;\n\n  &:focus {\n    background-color: $gray-800;\n    outline: 0;\n  }\n}\n","import { Component, Host, h, State, Listen } from '@stencil/core';\nimport { isEmpty } from '@springbokagency/stencil-base';\nimport { IconName } from '../../atoms/icon/icon.types';\nimport { isInViewport } from '../../../utils/inViewport';\nimport { throttle } from '../../../utils/throttle';\n\n/**\n * The Slider component.\n */\n@Component({\n  tag: 'bs-slider',\n  styleUrl: 'slider.scss',\n  shadow: true,\n})\nexport class BsSlider {\n  private teaserSliderRef: HTMLDivElement;\n\n  private navigationRef: HTMLDivElement;\n\n  private itemsVisible: number;\n\n  /** States */\n  @State() slides: boolean = true;\n\n  /** listeners */\n  @Listen('resize', { target: 'window' })\n  handleScreenResized() {\n    this.throttleMethod();\n  }\n\n  /** Methods */\n  private onResize = () => {\n    this.slides = this.teaserSliderRef.scrollWidth > this.teaserSliderRef.offsetWidth;\n\n    if (this.slides) {\n      this.handleOverlay();\n\n      if (\n        this.teaserSliderRef.scrollLeft + this.teaserSliderRef.offsetWidth >=\n        this.teaserSliderRef.scrollWidth\n      ) {\n        this.navigationRef.style.maxWidth = '100%';\n      }\n    }\n  };\n\n  private throttleMethod = throttle(this.onResize, 1000);\n\n  private onPreviousSlide = () => {\n    const cards = this.getCards();\n\n    for (let i = 0; i < cards.length; i += 1) {\n      if (isInViewport(cards[i], this.teaserSliderRef)) {\n        this.teaserSliderRef.scrollTo({\n          behavior: 'smooth',\n          left: cards[i - 1] && cards[i - 1].offsetLeft,\n        });\n        break;\n      }\n    }\n\n    this.handleOverlay();\n  };\n\n  private onNextSlide = () => {\n    const cards = this.getCards();\n\n    for (let i = 0; i < cards.length; i += 1) {\n      if (isInViewport(cards[i], this.teaserSliderRef)) {\n        const offset =\n          cards[i].offsetLeft === this.teaserSliderRef.scrollLeft\n            ? cards[i + 1].offsetLeft\n            : cards[i].offsetLeft;\n\n        this.teaserSliderRef.scrollTo({\n          behavior: 'smooth',\n          left: offset,\n        });\n        break;\n      }\n    }\n  };\n\n  private handleOverlay = () => {\n    const cards = this.getCards();\n    const containerWidth = this.teaserSliderRef.clientWidth;\n\n    for (let i = 0; i < cards.length; i += 1) {\n      if (cards[i].offsetLeft + cards[i].offsetWidth > containerWidth) {\n        this.itemsVisible = i;\n        break;\n      }\n    }\n\n    this.navigationRef.style.maxWidth = `${\n      cards[this.itemsVisible - 1].getBoundingClientRect().right -\n      cards[0].getBoundingClientRect().left\n    }px`;\n  };\n\n  private getCards = (): HTMLElement[] => {\n    const slotElement = this.teaserSliderRef.querySelector(\n      'slot[name=\"slider-item\"]'\n    ) as HTMLSlotElement;\n\n    if (isEmpty(slotElement)) return [];\n\n    const assignedNodes = slotElement.assignedNodes();\n\n    return assignedNodes as HTMLElement[];\n  };\n\n  /** lifecycle hooks */\n  componentDidLoad() {\n    this.slides = this.teaserSliderRef.scrollWidth > this.teaserSliderRef.offsetWidth;\n\n    if (this.slides) {\n      this.handleOverlay();\n      this.teaserSliderRef.addEventListener(\n        'scroll',\n        throttle(() => {\n          if (\n            this.teaserSliderRef.scrollLeft + this.teaserSliderRef.offsetWidth >=\n            this.teaserSliderRef.scrollWidth\n          ) {\n            this.navigationRef.style.maxWidth = '100%';\n          } else {\n            this.handleOverlay();\n          }\n        }, 200)\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.slides && (\n          <div class=\"overlay\">\n            <div\n              class=\"navigation\"\n              ref={(el) => {\n                this.navigationRef = el;\n              }}\n            >\n              <div class=\"navigation-back\">\n                <bs-click-action\n                  name=\"previous\"\n                  onBsClickAction={this.onPreviousSlide}\n                  tagClass=\"navigation-button\"\n                  ariaLabelText=\"backward\"\n                >\n                  <bs-icon name={IconName.ArrowBackward} />\n                </bs-click-action>\n              </div>\n              <div class=\"navigation-forward\">\n                <bs-click-action\n                  name=\"next\"\n                  onBsClickAction={this.onNextSlide}\n                  tagClass=\"navigation-button\"\n                  ariaLabelText=\"forward\"\n                >\n                  <bs-icon name={IconName.ArrowForward} />\n                </bs-click-action>\n              </div>\n            </div>\n            <div class=\"fade\" />\n          </div>\n        )}\n        <div\n          class=\"teaser-slider\"\n          ref={(el) => {\n            this.teaserSliderRef = el;\n          }}\n        >\n          <slot name=\"slider-item\" />\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"+RAAA,MAAMA,EAAe,+nN,iXCYRC,EAAW,M,kDAOlBC,sBACF,OAAOC,EAAcC,KAAKC,U,CAK5BC,wBAAwBC,GACtB,MAAMC,EAASD,EAAMC,OAErBA,EAAOC,QAAUD,EAAOC,M,CAG1BC,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,WAASE,MAAM,sBAEXC,EAAQV,KAAKF,mBAAqBY,EAAQV,KAAKF,gBAAgBa,OAC/DJ,EAAA,YACEK,QAASZ,KAAKF,gBAAgBc,QAC9BC,MAAOb,KAAKF,gBAAgBe,MAC5BC,IAAKd,KAAKF,gBAAgBgB,IAC1BH,KAAMX,KAAKF,gBAAgBa,KAC3BI,KAAMf,KAAKF,gBAAgBiB,OAG/BR,EAAA,MAAIE,MAAM,YAAW,aAAY,2BAC/BF,EAAA,QAAMS,KAAK,qB,GA3BrBC,GADCC,EAAQ,c,8CClBX,MAAMC,EAAmB,stO,MCSZC,EAAe,M,0LA8BsB,I,CAtBhDC,mBAAmBC,GAEjB,MAAMC,SAAiBD,IAAa,UAAYA,IAAa,GAE7D,GAAIC,EAAS,CACX,MAAM,IAAIC,MAAM,wE,EAwBZC,8BAA8BC,GACpC1B,KAAK2B,uBAAuBC,KAAKF,E,CAGnCpB,SACE,MAAMuB,EAAiB7B,KAAK8B,WAAWC,QAAQ,OAAQ,KAAKC,cAE5D,OACEzB,EAACC,EAAI,KACHD,EAAA,MAAIE,MAAO,kBAAkBT,KAAKiC,YAAcjC,KAAKK,OAAS,YAAc,MAE1EE,EAAA,UACEE,MAAM,oBACNyB,KAAK,SAAQ,gBACEL,EAAc,gBACd7B,KAAKiC,YAAcjC,KAAKK,QAAUL,KAAKK,OAAO8B,WAC7DC,GAAI,aAAaP,IACjBQ,QAAS,KACPrC,KAAKyB,8BAA8BzB,KAAKK,OAAO,EAEjDiC,SAAUtC,KAAKiC,WAAa,GAAK,EACjCM,UAAWvC,KAAKiC,YAEhB1B,EAAA,QAAME,MAAM,2BAA2BT,KAAKwC,oBAE3CxC,KAAKiC,YACJ1B,EAAA,yBACc,OACZE,MAAM,yBACNO,KAAMyB,EAASC,iBAKrBnC,EAAA,OACEE,MAAM,kBACNkC,KAAK,SAAQ,gBACE3C,KAAKK,QAAQ8B,WAC5BC,GAAIP,GAEJtB,EAAA,OAAKE,MAAM,2BACTF,EAAA,QAAMS,KAAK,yB,6ECvFzB,MAAM4B,EAAiB,+lO,iXCaVC,EAAa,M,mGAkBpBC,sBACF,OAAO/C,EAAcC,KAAK+C,U,CAG5BzC,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,OAAKE,MAAM,QACTF,EAAA,OAAKE,MAAM,SACTF,EAAA,WAAAyC,OAAAC,OAAA,GAAcjD,KAAK8C,gBAAe,CAAEI,QAAQ,OAE9C3C,EAAA,OAAKE,MAAM,WACTF,EAAA,YACEE,MAAM,QACNK,IAAKqC,EAASC,KACdrC,KAAMsC,EAAUC,MAChB3C,KAAMX,KAAKuD,UACX1C,MAAO2C,EAAWC,QAEpBlD,EAAA,WAASE,MAAM,OAAOE,KAAMX,KAAK0D,a,GAnB3CzC,EAAA,CADCC,EAAQ,c,uDC5BKyC,EAAaC,EAAiBC,GAC5C,IAAKnD,EAAQkD,GAAK,CAChB,MAAME,EAAOF,EAAGG,wBAEhB,GAAIF,IAAcnD,EAAQmD,EAAUE,yBAA0B,CAC5D,MAAMC,EAAgBH,EAAUE,wBAEhC,OACED,EAAKG,KAAOD,EAAcC,KAC1BH,EAAKI,MAAQF,EAAcE,MAC3BJ,EAAKK,QAAUH,EAAcG,QAC7BL,EAAKM,OAASJ,EAAcI,K,CAIhC,OACEN,EAAKG,KAAO,GACZH,EAAKI,MAAQ,GACbJ,EAAKK,SAAWE,OAAOC,aAAeC,SAASC,gBAAgBC,eAC/DX,EAAKM,QAAUC,OAAOK,YAAcH,SAASC,gBAAgBG,Y,CAIjE,OAAO,KACT,CC1BA,MAAMC,EAAY,s6P,MCcLC,EAAQ,M,yBAiBX7E,KAAA8E,SAAW,KACjB9E,KAAK+E,OAAS/E,KAAKgF,gBAAgBC,YAAcjF,KAAKgF,gBAAgBE,YAEtE,GAAIlF,KAAK+E,OAAQ,CACf/E,KAAKmF,gBAEL,GACEnF,KAAKgF,gBAAgBI,WAAapF,KAAKgF,gBAAgBE,aACvDlF,KAAKgF,gBAAgBC,YACrB,CACAjF,KAAKqF,cAAcC,MAAMC,SAAW,M,IAKlCvF,KAAAwF,eAAiBC,EAASzF,KAAK8E,SAAU,KAEzC9E,KAAA0F,gBAAkB,KACxB,MAAMC,EAAQ3F,KAAK4F,WAEnB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,GAAK,EAAG,CACxC,GAAIlC,EAAagC,EAAME,GAAI7F,KAAKgF,iBAAkB,CAChDhF,KAAKgF,gBAAgBe,SAAS,CAC5BC,SAAU,SACV9B,KAAMyB,EAAME,EAAI,IAAMF,EAAME,EAAI,GAAGI,aAErC,K,EAIJjG,KAAKmF,eAAe,EAGdnF,KAAAkG,YAAc,KACpB,MAAMP,EAAQ3F,KAAK4F,WAEnB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,GAAK,EAAG,CACxC,GAAIlC,EAAagC,EAAME,GAAI7F,KAAKgF,iBAAkB,CAChD,MAAMmB,EACJR,EAAME,GAAGI,aAAejG,KAAKgF,gBAAgBI,WACzCO,EAAME,EAAI,GAAGI,WACbN,EAAME,GAAGI,WAEfjG,KAAKgF,gBAAgBe,SAAS,CAC5BC,SAAU,SACV9B,KAAMiC,IAER,K,IAKEnG,KAAAmF,cAAgB,KACtB,MAAMQ,EAAQ3F,KAAK4F,WACnB,MAAMQ,EAAiBpG,KAAKgF,gBAAgBL,YAE5C,IAAK,IAAIkB,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,GAAK,EAAG,CACxC,GAAIF,EAAME,GAAGI,WAAaN,EAAME,GAAGX,YAAckB,EAAgB,CAC/DpG,KAAKqG,aAAeR,EACpB,K,EAIJ7F,KAAKqF,cAAcC,MAAMC,SAAW,GAClCI,EAAM3F,KAAKqG,aAAe,GAAGtC,wBAAwBK,MACrDuB,EAAM,GAAG5B,wBAAwBG,QAC/B,EAGElE,KAAA4F,SAAW,KACjB,MAAMU,EAActG,KAAKgF,gBAAgBuB,cACvC,4BAGF,GAAI7F,EAAQ4F,GAAc,MAAO,GAEjC,MAAME,EAAgBF,EAAYE,gBAElC,OAAOA,CAA8B,E,YAvFZ,I,CAI3BC,sBACEzG,KAAKwF,gB,CAsFPkB,mBACE1G,KAAK+E,OAAS/E,KAAKgF,gBAAgBC,YAAcjF,KAAKgF,gBAAgBE,YAEtE,GAAIlF,KAAK+E,OAAQ,CACf/E,KAAKmF,gBACLnF,KAAKgF,gBAAgB2B,iBACnB,SACAlB,GAAS,KACP,GACEzF,KAAKgF,gBAAgBI,WAAapF,KAAKgF,gBAAgBE,aACvDlF,KAAKgF,gBAAgBC,YACrB,CACAjF,KAAKqF,cAAcC,MAAMC,SAAW,M,KAC/B,CACLvF,KAAKmF,e,IAEN,K,EAKT7E,SACE,OACEC,EAACC,EAAI,KACFR,KAAK+E,QACJxE,EAAA,OAAKE,MAAM,WACTF,EAAA,OACEE,MAAM,aACNmG,IAAMhD,IACJ5D,KAAKqF,cAAgBzB,CAAE,GAGzBrD,EAAA,OAAKE,MAAM,mBACTF,EAAA,mBACES,KAAK,WACL6F,gBAAiB7G,KAAK0F,gBACtBoB,SAAS,oBACTC,cAAc,YAEdxG,EAAA,WAASS,KAAMyB,EAASuE,kBAG5BzG,EAAA,OAAKE,MAAM,sBACTF,EAAA,mBACES,KAAK,OACL6F,gBAAiB7G,KAAKkG,YACtBY,SAAS,oBACTC,cAAc,WAEdxG,EAAA,WAASS,KAAMyB,EAASwE,kBAI9B1G,EAAA,OAAKE,MAAM,UAGfF,EAAA,OACEE,MAAM,gBACNmG,IAAMhD,IACJ5D,KAAKgF,gBAAkBpB,CAAE,GAG3BrD,EAAA,QAAMS,KAAK,iB"}