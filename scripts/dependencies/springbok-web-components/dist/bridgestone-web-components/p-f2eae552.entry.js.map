{"version":3,"names":["PlayerState","videoCardCss","BsVideoCard","this","handlePlayVideo","active","parsedImage","parseIfString","image","bsYoutubeControllerClickHandler","e","videoId","detail","id","value","bsYoutubeControllerUpdateHandler","PLAYING","PAUSED","BUFFERING","includes","playerState","componentDidLoad","autoplay","render","h","Host","class","cover","inline","mute","tagClass","name","onBsClickAction","Object","assign","caption","IconName","Play","__decorate","Memoize"],"sources":["./src/components/organisms/image-carousel/image-carousel.types.ts","./src/components/molecules/video-card/video-card.scss?tag=bs-video-card&encapsulation=shadow","./src/components/molecules/video-card/video-card.tsx"],"sourcesContent":["export enum PlayerState {\n  UNSTARTED = -1,\n  ENDED = 0,\n  PLAYING = 1,\n  PAUSED = 2,\n  BUFFERING = 3,\n  CUED = 5,\n}\n",":host {\n  @include reset-host;\n  width: 100%;\n}\n\n:host .video-card {\n  position: relative;\n  margin: 0 auto;\n  overflow: hidden;\n}\n\n:host(.is-background) .video-card {\n  position: static;\n}\n\n:host .inline-video {\n  position: absolute;\n  top: 0;\n  left: 50%;\n  width: 100%;\n  height: 100%;\n  transform: translateX(-50%);\n}\n\n:host .youtube-thumbnail-button {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  z-index: 1;\n  padding: 0.5em;\n  font-size: rem(32);\n  color: $white;\n  background: transparent;\n  border: 4px solid $white;\n  border-radius: 50%;\n  transition: $transition-smooth;\n  transition-property: transform;\n  transform: translate(-50%, -50%);\n\n  @include mq('max', 'md') {\n    font-size: rem(22);\n    border-width: 3px;\n  }\n\n  &:hover {\n    transform: translate(-50%, -50%) scale(1.07);\n  }\n}\n\n:host(.is-autoplayed) .youtube-thumbnail-button {\n  top: unset;\n  right: 1rem;\n  bottom: 1rem;\n  left: unset;\n  padding: 0.2rem;\n  font-size: rem(20);\n  border-width: 2px;\n  transform: none;\n}\n\n:host .button {\n  width: 100%;\n}\n","import { Component, Host, h, Prop, State, Listen } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { IconName } from '../../atoms/icon/icon.types';\nimport { BsImage } from '../../atoms/image/image';\nimport { YoutubeControlClickEvent } from '../youtube-control/youtube-control.types';\nimport { YoutubeControlUpdateEvent } from '../../organisms/youtube-video/youtube-video.types';\nimport { PlayerState } from '../../organisms/image-carousel/image-carousel.types';\n\n/**\n * Video card component.\n */\n@Component({\n  tag: 'bs-video-card',\n  styleUrl: 'video-card.scss',\n  shadow: true,\n})\nexport class BsVideoCard {\n  /** Stages */\n  @State() active: boolean = false;\n\n  /** Props */\n  /**\n   * The youtube video ID.\n   */\n  @Prop() videoId!: string;\n\n  /**\n   * Should the video be muted initially?\n   */\n  @Prop() mute?: boolean = false;\n\n  /**\n   * Should the player be loaded inline?\n   */\n  @Prop() inline?: boolean = false;\n\n  /**\n   * Should the player start automatically when the page is loaded?\n   */\n  @Prop() autoplay?: boolean = false;\n\n  /**\n   * The image displayed on the card.\n   */\n  @Prop() image: BsImage | string;\n\n  @Memoize('image')\n  get parsedImage(): BsImage {\n    return parseIfString(this.image);\n  }\n\n  /** Listeners */\n  @Listen('bsYoutubeControllerClick', { target: 'window' })\n  bsYoutubeControllerClickHandler(e: CustomEvent<YoutubeControlClickEvent>) {\n    if (this.videoId === e.detail.id && e.detail.value === 1) {\n      this.active = true;\n    }\n  }\n\n  @Listen('bsYoutubeControllerUpdate', { target: 'window' })\n  bsYoutubeControllerUpdateHandler(e: CustomEvent<YoutubeControlUpdateEvent>) {\n    this.active = [PlayerState.PLAYING, PlayerState.PAUSED, PlayerState.BUFFERING].includes(\n      e.detail.playerState\n    );\n  }\n\n  /** Methods */\n  private handlePlayVideo = () => {\n    this.active = true;\n  };\n\n  componentDidLoad() {\n    this.active = this.autoplay;\n  }\n\n  render() {\n    return (\n      <Host\n        class={`${this.parsedImage.cover ? 'is-background' : ''} ${\n          this.autoplay ? 'is-autoplayed' : ''\n        }`}\n      >\n        {this.inline && this.active ? (\n          <div class=\"inline-video\">\n            <bs-youtube-video videoId={this.videoId} mute={this.mute} inline={true} />\n          </div>\n        ) : (\n          <div class=\"video-card\">\n            <bs-click-action\n              tagClass=\"button\"\n              name={this.inline ? 'open-youtube-inline' : 'open-youtube-modal'}\n              value={{ videoId: this.videoId, mute: this.mute }}\n              onBsClickAction={this.inline && this.handlePlayVideo}\n            >\n              <bs-image class=\"youtube-thumbnail\" {...this.parsedImage} caption=\"\" />\n              <bs-icon class=\"youtube-thumbnail-button\" name={IconName.Play} />\n            </bs-click-action>\n          </div>\n        )}\n      </Host>\n    );\n  }\n}\n"],"mappings":"8JAAA,IAAYA,GAAZ,SAAYA,GACVA,IAAA,6BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,4BACAA,IAAA,iBACD,EAPD,CAAYA,MAAW,KCAvB,MAAMC,EAAe,m9O,iXCgBRC,EAAW,M,yBAmDdC,KAAAC,gBAAkB,KACxBD,KAAKE,OAAS,IAAI,E,YAlDO,M,iCAWF,M,YAKE,M,cAKE,M,qBAQzBC,kBACF,OAAOC,EAAcJ,KAAKK,M,CAK5BC,gCAAgCC,GAC9B,GAAIP,KAAKQ,UAAYD,EAAEE,OAAOC,IAAMH,EAAEE,OAAOE,QAAU,EAAG,CACxDX,KAAKE,OAAS,I,EAKlBU,iCAAiCL,GAC/BP,KAAKE,OAAS,CAACL,EAAYgB,QAAShB,EAAYiB,OAAQjB,EAAYkB,WAAWC,SAC7ET,EAAEE,OAAOQ,Y,CASbC,mBACElB,KAAKE,OAASF,KAAKmB,Q,CAGrBC,SACE,OACEC,EAACC,EAAI,CACHC,MAAO,GAAGvB,KAAKG,YAAYqB,MAAQ,gBAAkB,MACnDxB,KAAKmB,SAAW,gBAAkB,MAGnCnB,KAAKyB,QAAUzB,KAAKE,OACnBmB,EAAA,OAAKE,MAAM,gBACTF,EAAA,oBAAkBb,QAASR,KAAKQ,QAASkB,KAAM1B,KAAK0B,KAAMD,OAAQ,QAGpEJ,EAAA,OAAKE,MAAM,cACTF,EAAA,mBACEM,SAAS,SACTC,KAAM5B,KAAKyB,OAAS,sBAAwB,qBAC5Cd,MAAO,CAAEH,QAASR,KAAKQ,QAASkB,KAAM1B,KAAK0B,MAC3CG,gBAAiB7B,KAAKyB,QAAUzB,KAAKC,iBAErCoB,EAAA,WAAAS,OAAAC,OAAA,CAAUR,MAAM,qBAAwBvB,KAAKG,YAAW,CAAE6B,QAAQ,MAClEX,EAAA,WAASE,MAAM,2BAA2BK,KAAMK,EAASC,S,GAhDrEC,EAAA,CADCC,EAAQ,U"}