{"version":3,"names":["Variant","headerBannerCss","BsHeaderBanner","this","onResize","isMobile","compareBreakpoint","Breakpoint","md","throttleMethod","throttle","parsedImage","parseIfString","image","parsedLogo","logo","parsedHeaderTitle","headerTitle","parsedButton","button","parsedvideo","video","handleScreenResized","render","h","Host","class","isEmpty","src","Object","assign","size","TitleSize","Head2","tag","TitleTag","Span","text","label","subtitle","isFullWidth","variant","Image","caption","__decorate","Memoize"],"sources":["./src/components/organisms/header-banner/header-banner.types.ts","./src/components/organisms/header-banner/header-banner.scss?tag=bs-header-banner&encapsulation=shadow","./src/components/organisms/header-banner/header-banner.tsx"],"sourcesContent":["export enum Variant {\n  Image = 'image',\n  Video = 'video',\n}\n",":host {\n  @include reset-host;\n  overflow: hidden;\n}\n\n:host .header-banner {\n  display: flex;\n  flex-direction: column;\n  gap: rem(24);\n  background-color: $light-gray;\n\n  @include mq('min', 'md') {\n    flex-direction: row;\n    gap: 0;\n    height: rem(425);\n  }\n}\n\n:host .content {\n  position: relative;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  gap: rem(16);\n  padding: rem(40) rem(24) 0;\n\n  @include mq('min', 'md') {\n    gap: 0;\n    padding: rem(40);\n    padding-right: 0;\n    margin-right: 1px;\n\n    &:before {\n      @include z-index('base');\n      position: absolute;\n      top: 0;\n      right: 0;\n      width: 3px;\n      height: 100%;\n      content: '';\n      border-top: 425px solid $light-gray;\n      border-right: 99px solid transparent;\n      transform: translateX(100%);\n    }\n\n    &:after {\n      @include z-index('base');\n      position: absolute;\n      top: 0;\n      right: 0;\n      width: 2px;\n      height: 100%;\n      content: '';\n      background-color: $red-50;\n      transform: skew(-13deg) translateX(1px);\n      transform-origin: right bottom;\n    }\n  }\n}\n\n:host .image {\n  position: relative;\n  flex: 2;\n  width: 100%;\n  aspect-ratio: 16/9;\n\n  @include mq('min', 'md') {\n    --image--height: 425px;\n    width: 756px;\n    max-width: 756px;\n    aspect-ratio: auto;\n  }\n}\n\n:host .logo {\n  --image--max-width: 180px;\n  --image--max-height: 60px;\n  margin-bottom: rem(8);\n}\n\n:host .label {\n  margin-bottom: rem(8);\n\n  @include mq('min', 'md') {\n    margin-bottom: rem(42);\n  }\n}\n\n:host .title + .button {\n  margin-top: rem(20);\n}\n\n:host .center {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n}\n","import { Component, Host, h, Prop, State, Listen } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { BsTitle } from '../../atoms/title/title';\nimport { BsImage } from '../../atoms/image/image';\nimport { BsButton } from '../../atoms/button/button';\nimport { Variant } from './header-banner.types';\nimport { TitleSize, TitleTag } from '../../atoms/title/title.types';\nimport { Breakpoint, compareBreakpoint } from '../../../utils/breakpoints';\nimport { throttle } from '../../../utils/throttle';\nimport { BsVideoCard } from '../../molecules/video-card/video-card';\n\n/**\n * Header banner component.\n */\n@Component({\n  tag: 'bs-header-banner',\n  styleUrl: 'header-banner.scss',\n  shadow: true,\n})\nexport class BsHeaderBanner {\n  /** States */\n  @State() isMobile: boolean = compareBreakpoint('max', Breakpoint.md);\n\n  /**\n   * A (json)object string containing the bs-image elemement properties.\n   */\n  @Prop() image?: BsImage | string;\n\n  @Memoize('image')\n  get parsedImage(): BsImage {\n    return parseIfString(this.image);\n  }\n\n  /**\n   * A (json)object string containing the bs-image that is used for the logo elemement properties.\n   */\n  @Prop() logo?: BsImage | string;\n\n  @Memoize('logo')\n  get parsedLogo(): BsImage {\n    return parseIfString(this.logo);\n  }\n\n  /** A label to be displayed on the top if there is no logo. */\n  @Prop() label?: string;\n\n  /**\n   * A (json)object string containing the bs-title elemement properties.\n   */\n  @Prop() headerTitle: BsTitle | string;\n\n  @Memoize('headerTitle')\n  get parsedHeaderTitle(): BsTitle {\n    return parseIfString(this.headerTitle);\n  }\n\n  /** The header banner subtitle. */\n  @Prop() subtitle?: string;\n\n  /**\n   * A (json)object string containing the bs-button elemement properties.\n   */\n  @Prop() button?: BsButton | string;\n\n  @Memoize('button')\n  get parsedButton(): BsButton {\n    return parseIfString(this.button);\n  }\n\n  /** The header banner variant. Either 'image' or 'video'. */\n  @Prop() variant: Variant;\n\n  /**\n   * A (json)object string containing the bs-video-card elemement properties.\n   */\n  @Prop() video?: BsVideoCard | string;\n\n  @Memoize('video')\n  get parsedvideo(): BsVideoCard {\n    return parseIfString(this.video);\n  }\n\n  /** Listeners */\n  @Listen('resize', { target: 'window' })\n  handleScreenResized() {\n    this.throttleMethod();\n  }\n\n  /** Methods */\n  private onResize = () => {\n    this.isMobile = compareBreakpoint('max', Breakpoint.md);\n  };\n\n  private throttleMethod = throttle(this.onResize, 1000);\n\n  render() {\n    return (\n      <Host>\n        <header class=\"header-banner\">\n          <div class=\"content\">\n            {!isEmpty(this.parsedLogo) ? (\n              this.parsedLogo.src && <bs-image class=\"logo\" {...this.parsedLogo} />\n            ) : (\n              <bs-title\n                size={TitleSize.Head2}\n                tag={TitleTag.Span}\n                class=\"label\"\n                text={this.label}\n              />\n            )}\n            <div class=\"center\">\n              <bs-title class=\"title\" {...this.parsedHeaderTitle} />\n              {this.subtitle && <bs-text class=\"sub\" text={this.subtitle} />}\n              {this.parsedButton && this.parsedButton.text && (\n                <bs-button class=\"button\" {...this.parsedButton} isFullWidth={!!this.isMobile} />\n              )}\n            </div>\n          </div>\n          <div class=\"image\">\n            {this.variant === Variant.Image ? (\n              <bs-image {...this.parsedImage} caption=\"\" />\n            ) : (\n              <bs-video-card {...this.parsedvideo} />\n            )}\n          </div>\n        </header>\n      </Host>\n    );\n  }\n}\n"],"mappings":"wRAAA,IAAYA,GAAZ,SAAYA,GACVA,EAAA,iBACAA,EAAA,gBACD,EAHD,CAAYA,MAAO,KCAnB,MAAMC,EAAkB,84P,iXCmBXC,EAAc,M,yBAsEjBC,KAAAC,SAAW,KACjBD,KAAKE,SAAWC,EAAkB,MAAOC,EAAWC,GAAG,EAGjDL,KAAAM,eAAiBC,EAASP,KAAKC,SAAU,K,cAxEpBE,EAAkB,MAAOC,EAAWC,I,mLAQ7DG,kBACF,OAAOC,EAAcT,KAAKU,M,CASxBC,iBACF,OAAOF,EAAcT,KAAKY,K,CAYxBC,wBACF,OAAOJ,EAAcT,KAAKc,Y,CAYxBC,mBACF,OAAON,EAAcT,KAAKgB,O,CAYxBC,kBACF,OAAOR,EAAcT,KAAKkB,M,CAK5BC,sBACEnB,KAAKM,gB,CAUPc,SACE,OACEC,EAACC,EAAI,KACHD,EAAA,UAAQE,MAAM,iBACZF,EAAA,OAAKE,MAAM,YACPC,EAAQxB,KAAKW,YACbX,KAAKW,WAAWc,KAAOJ,EAAA,WAAAK,OAAAC,OAAA,CAAUJ,MAAM,QAAWvB,KAAKW,aAEvDU,EAAA,YACEO,KAAMC,EAAUC,MAChBC,IAAKC,EAASC,KACdV,MAAM,QACNW,KAAMlC,KAAKmC,QAGfd,EAAA,OAAKE,MAAM,UACTF,EAAA,WAAAK,OAAAC,OAAA,CAAUJ,MAAM,SAAYvB,KAAKa,oBAChCb,KAAKoC,UAAYf,EAAA,WAASE,MAAM,MAAMW,KAAMlC,KAAKoC,WACjDpC,KAAKe,cAAgBf,KAAKe,aAAamB,MACtCb,EAAA,YAAAK,OAAAC,OAAA,CAAWJ,MAAM,UAAavB,KAAKe,aAAY,CAAEsB,cAAerC,KAAKE,cAI3EmB,EAAA,OAAKE,MAAM,SACRvB,KAAKsC,UAAYzC,EAAQ0C,MACxBlB,EAAA,WAAAK,OAAAC,OAAA,GAAc3B,KAAKQ,YAAW,CAAEgC,QAAQ,MAExCnB,EAAA,gBAAAK,OAAAC,OAAA,GAAmB3B,KAAKiB,gB,GA7FpCwB,EAAA,CADCC,EAAQ,U,gCAWTD,EAAA,CADCC,EAAQ,S,+BAcTD,EAAA,CADCC,EAAQ,gB,sCAcTD,EAAA,CADCC,EAAQ,W,iCAcTD,EAAA,CADCC,EAAQ,U"}