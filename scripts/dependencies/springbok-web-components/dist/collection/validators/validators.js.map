{"version":3,"file":"validators.js","sourceRoot":"","sources":["../../src/validators/validators.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,gBAAgB,GAAmB;EAC9C,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI;CACrB,CAAC;AAEF,MAAM,UAAU,eAAe,CAAC,GAAW,EAAE,GAAW;EACtD,OAAO;IACL,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE;MAC1B,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,EAAE,IAAI,CAAC,CAAC;MAE1D,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IACD,YAAY,EAAE,aAAa;GAC5B,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,GAAW,EAAE,GAAW;EACtD,OAAO;IACL,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE;MAC1B,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,EAAE;QAC9C,OAAO,KAAK,CAAC;OACd;MAED,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,EAAE;QAC9C,OAAO,KAAK,CAAC;OACd;MAED,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,YAAY,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE;QACpE,OAAO,KAAK,CAAC;OACd;MAED,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,YAAY,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE;QACpE,OAAO,KAAK,CAAC;OACd;MAED,OAAO,IAAI,CAAC;IACd,CAAC;IACD,YAAY,EAAE,aAAa;GAC5B,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,cAAc;EAC5B,OAAO;IACL,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE;MAC1B,MAAM,KAAK,GACT,qOAAqO,CAAC;MAExO,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IACD,YAAY,EAAE,YAAY;GAC3B,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,MAAM,iBAAiB,GAAsB;EAClD,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE;IAC1B,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;IAElC,IAAI,SAAS,YAAY,IAAI,EAAE;MAC7B,OAAO,IAAI,CAAC;KACb;IAED,OAAO,KAAK,CAAC;EACf,CAAC;EACD,YAAY,EAAE,eAAe;CAC9B,CAAC","sourcesContent":["import type { Validator } from './validators.types';\n\nexport const defaultValidator: Validator<any> = {\n  validate: () => true,\n};\n\nexport function LengthValidator(min: string, max: string): Validator<string> {\n  return {\n    validate: (value: string) => {\n      const regex = new RegExp(`^.{${min || 0},${max || ''}}$`);\n\n      return regex.test(value);\n    },\n    errorMessage: 'LengthError',\n  };\n}\n\nexport function MinMaxValidator(min: string, max: string): Validator<string> {\n  return {\n    validate: (value: string) => {\n      if (Number(min) && Number(value) < Number(min)) {\n        return false;\n      }\n\n      if (Number(max) && Number(value) > Number(max)) {\n        return false;\n      }\n\n      if (new Date(min) instanceof Date && new Date(value) < new Date(min)) {\n        return false;\n      }\n\n      if (new Date(max) instanceof Date && new Date(value) > new Date(max)) {\n        return false;\n      }\n\n      return true;\n    },\n    errorMessage: 'numberError',\n  };\n}\n\nexport function EmailValidator(): Validator<string> {\n  return {\n    validate: (value: string) => {\n      const regex =\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\u0600-\\u06FF\\u0400-\\u04FF\\u0370-\\u03ff\\-0-9]+\\.)+[a-zA-Z\\u0600-\\u06FF\\u0400-\\u04FF\\u0370-\\u03ff]{2,}))$/;\n\n      return regex.test(value);\n    },\n    errorMessage: 'emailError',\n  };\n}\n\nexport const DateTimeValidator: Validator<string> = {\n  validate: (value: string) => {\n    const dateValue = new Date(value);\n\n    if (dateValue instanceof Date) {\n      return true;\n    }\n\n    return false;\n  },\n  errorMessage: 'dateTimeError',\n};\n"]}