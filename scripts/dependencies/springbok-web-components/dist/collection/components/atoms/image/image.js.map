{"version":3,"file":"image.js","sourceRoot":"","sources":["../../../../src/components/atoms/image/image.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AACxD,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,4BAA4B,CAAC;AAExD;;GAEG;AAMH,MAAM,OAAO,OAAO;;;;;;sBAwBY;kBACd,UAAU,CAAC,EAAE,OAAO,UAAU,CAAC,EAAE;kBACjC,UAAU,CAAC,EAAE,OAAO,UAAU,CAAC,EAAE;kBACjC,UAAU,CAAC,EAAE,OAAO,UAAU,CAAC,EAAE;WACxC;;oBAUmB,YAAY;;;;;gBAyBf,IAAI;;EAE7B,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,cAAQ,KAAK,EAAC,QAAQ;QAEpB,WACE,KAAK,EAAE,SAAS,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,EAAE,EACzD,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,KAAK,EAAE,IAAI,CAAC,UAAU,EACtB,GAAG,EAAE,IAAI,CAAC,OAAO,EACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,iBACxB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAClC;QAGA,aAAa;QACb,IAAI,CAAC,OAAO,IAAI,CACd,kBAAY,KAAK,EAAE,WAAW,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,EAAE;UACrE,IAAI,CAAC,OAAO;UACb,aAAM;UACN,YAAM,KAAK,EAAC,QAAQ,IAAE,IAAI,CAAC,MAAM,CAAQ,CAC9B,CACd,CAEI,CACJ,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { isEmpty } from '@springbokagency/stencil-base';\nimport { Component, Host, h, Prop } from '@stencil/core';\nimport { Breakpoint } from '../../../utils/breakpoints';\n\n/**\n * Description of the component.\n */\n@Component({\n  tag: 'bs-image',\n  styleUrl: 'image.scss',\n  shadow: true,\n})\nexport class BsImage {\n  /**\n   * Image's src\n   */\n  @Prop() src: string;\n\n  /**\n   * Image's srcset\n   */\n  @Prop() srcset?: string;\n\n  /**\n   * Image's width\n   */\n  @Prop() width: string | number;\n\n  /**\n   * Image's height\n   */\n  @Prop() height: string | number;\n\n  /**\n   * Image's sizes\n   */\n  @Prop() imageSizes?: string = `\n    (max-width: ${Breakpoint.xs}px) ${Breakpoint.xs}px,\n    (max-width: ${Breakpoint.md}px) ${Breakpoint.md}px,\n    (max-width: ${Breakpoint.xl}px) ${Breakpoint.xl}px,\n    1920px`;\n\n  /**\n   * Image's alternative text\n   */\n  @Prop() altText?: string;\n\n  /**\n   * \"itemprop\" attribute\n   */\n  @Prop() itemprop?: string = 'contentUrl';\n\n  /**\n   * Image's caption\n   */\n  @Prop() caption?: string;\n\n  /**\n   * Determine if text under or on image\n   */\n  @Prop() captionCover?: boolean;\n\n  /**\n   * Determine if image is stretching to fill its container's size\n   */\n  @Prop() cover?: boolean;\n\n  /**\n   * Source image\n   */\n  @Prop() source?: string;\n\n  /**\n   * Enable lazy loading?\n   */\n  @Prop() lazy?: boolean = true;\n\n  render() {\n    return (\n      <Host>\n        <figure class=\"figure\">\n          {/* Image */}\n          <img\n            class={`image ${this.cover ? 'is-background-image' : ''}`}\n            src={this.src}\n            srcset={this.srcset}\n            width={this.width}\n            height={this.height}\n            sizes={this.imageSizes}\n            alt={this.altText}\n            itemprop={this.itemprop}\n            loading={this.lazy ? 'lazy' : 'eager'}\n            aria-hidden={isEmpty(this.altText)}\n          />\n\n          {\n            /* Caption */\n            this.caption && (\n              <figcaption class={`caption ${this.captionCover ? 'is-caption-on' : ''}`}>\n                {this.caption}\n                <br />\n                <span class=\"source\">{this.source}</span>\n              </figcaption>\n            )\n          }\n        </figure>\n      </Host>\n    );\n  }\n}\n"]}