{"version":3,"file":"story-quote.js","sourceRoot":"","sources":["../../../../src/components/atoms/story-quote/story-quote.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AACvE,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAGvE;;GAEG;AAMH,MAAM,OAAO,YAAY;;;;;;;;EA2BvB,IAAI,iBAAiB;IACnB,OAAO,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;EACzC,CAAC;EAED,MAAM;IACJ,MAAM,MAAM,GAAG;MACb,UAAU,EAAE,qBAAqB;MACjC,OAAO,EAAE,WAAW;MACpB,OAAO,EAAE;QACP,OAAO,EAAE,QAAQ;QACjB,IAAI,EAAE,IAAI,CAAC,UAAU;OACtB;MACD,IAAI,EAAE,IAAI,CAAC,IAAI;KAChB,CAAC;IAEF,OAAO,CACL,EAAC,IAAI;MACH,kBAAY,KAAK,EAAC,YAAY,EAAC,IAAI,EAAE,IAAI,CAAC,MAAM;QAC9C,SAAG,KAAK,EAAC,YAAY;UACnB,gBAAU,KAAK,EAAC,MAAM,iBAAa,MAAM,EAAC,GAAG,EAAE,YAAY,CAAC,kBAAkB,CAAC,GAAI,CACjF;QACJ,SAAG,KAAK,EAAC,OAAO;;UAAQ,IAAI,CAAC,IAAI;eAAW;QAC5C,WAAK,KAAK,EAAC,MAAM;UAEf,WAAK,KAAK,EAAC,cAAc;YACvB,8BAAU,KAAK,EAAC,OAAO,IAAK,IAAI,CAAC,iBAAiB,IAAE,KAAK,UAAG,CACxD;UAEN,UAAI,KAAK,EAAC,aAAa;YACrB,cAAK,IAAI,CAAC,UAAU,CAAM;YAC1B,cAAK,IAAI,CAAC,cAAc,CAAM,CAC3B,CACD,CACK;MAEb,cAAQ,IAAI,EAAC,qBAAqB,IAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAU,CAC/D,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AAvCC;EADC,OAAO,CAAC,aAAa,CAAC;qDAGtB","sourcesContent":["import { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { Component, getAssetPath, h, Host, Prop } from '@stencil/core';\nimport { BsImage } from '../image/image';\n\n/**\n * The Quote component is used for indicating that a particular section of text is being taken from another website or other source.\n */\n@Component({\n  tag: 'bs-story-quote',\n  styleUrl: 'story-quote.scss',\n  shadow: true,\n})\nexport class BsStoryQuote {\n  /**\n   * The quote text copied from an external source.\n   */\n  @Prop() text!: string;\n\n  /**\n   * Author's name\n   */\n  @Prop() authorName: string;\n\n  /**\n   * Author's job position\n   */\n  @Prop() authorPosition: string;\n\n  /**\n   * A URL that designates a source document or message for the information quoted. Used for SEO purposes.\n   */\n  @Prop() source?: string;\n\n  /**\n   *  Prop for adding an image\n   */\n  @Prop() authorImage: BsImage | string;\n\n  @Memoize('authorImage')\n  get parsedAuthorImage(): BsImage {\n    return parseIfString(this.authorImage);\n  }\n\n  render() {\n    const schema = {\n      '@context': 'https://schema.org/',\n      '@type': 'Quotation',\n      creator: {\n        '@type': 'Person',\n        name: this.authorName,\n      },\n      text: this.text,\n    };\n\n    return (\n      <Host>\n        <blockquote class=\"blockquote\" cite={this.source}>\n          <p class=\"quote-mark\">\n            <ion-icon class=\"icon\" aria-hidden=\"true\" src={getAssetPath(`assets/quote.svg`)} />\n          </p>\n          <p class=\"quote\">&quot;{this.text}&quot;</p>\n          <div class=\"info\">\n            {/* Image */}\n            <div class=\"author-image\">\n              <bs-image class=\"image\" {...this.parsedAuthorImage} cover />\n            </div>\n            {/* Author info */}\n            <dl class=\"author-info\">\n              <dt>{this.authorName}</dt>\n              <dd>{this.authorPosition}</dd>\n            </dl>\n          </div>\n        </blockquote>\n\n        <script type=\"application/ld+json\">{JSON.stringify(schema)}</script>\n      </Host>\n    );\n  }\n}\n"]}