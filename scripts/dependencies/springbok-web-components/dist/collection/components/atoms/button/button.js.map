{"version":3,"file":"button.js","sourceRoot":"","sources":["../../../../src/components/atoms/button/button.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AACxD,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAgB,MAAM,eAAe,CAAC;AAC9E,OAAO,EAAgB,UAAU,EAAmC,MAAM,gBAAgB,CAAC;AAG3F;;GAEG;AAMH,MAAM,OAAO,QAAQ;;;;;;gBAwBS,UAAU,CAAC,MAAM;;;;iBAoBnB,KAAK;;;;;;EA2BvB,WAAW;IACjB,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;IAEnD,IAAI,IAAI,IAAI,MAAM,KAAK,QAAQ;MAAE,OAAO;IAExC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;EACjE,CAAC;EAED,MAAM;IACJ,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC;IAEpD,MAAM,UAAU,GACd,OAAO,KAAK,QAAQ;MAClB,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;MACrB,CAAC,CAAC;QACE,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,MAAM,EAAE,IAAI,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM;QAC1D,GAAG,EAAE,IAAI,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;OAClD,CAAC;IAER,OAAO,CACL,EAAC,IAAI,IAAC,KAAK,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,EAAE;MACvD,EAAC,OAAO,kBACN,KAAK,EAAE;cACH,IAAI,CAAC,QAAQ;iBACV,IAAI,CAAC,OAAO;cACf,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;cAC5B,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE;cACvC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,EAAE,IACtC,UAAU,IACd,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,gBACxB,IAAI,CAAC,IAAI;QAGpB,IAAI,CAAC,QAAQ,IAAI,CAChB,YAAM,KAAK,EAAC,MAAM;UAChB,eAAS,IAAI,EAAE,IAAI,CAAC,QAAQ,GAAI,CAC3B,CACR;QAGA,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,YAAM,KAAK,EAAC,MAAM,IAAE,IAAI,CAAC,IAAI,CAAQ;QAG5D,IAAI,CAAC,SAAS,IAAI,CACjB,YAAM,KAAK,EAAC,kBAAkB;UAC5B,eAAS,IAAI,EAAE,IAAI,CAAC,SAAS,GAAI,CAC5B,CACR,CACO,CACL,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { isEmpty } from '@springbokagency/stencil-base';\nimport { Component, Host, h, Prop, Event, EventEmitter } from '@stencil/core';\nimport { ButtonTarget, ButtonType, ButtonVariant, ButtonClickEvent } from './button.types';\nimport { IconName } from '../icon/icon.types';\n\n/**\n * Description of the component.\n */\n@Component({\n  tag: 'bs-button',\n  styleUrl: 'button.scss',\n  shadow: true,\n})\nexport class BsButton {\n  /**\n   * Button's text\n   */\n  @Prop() text: string;\n\n  /**\n   * Links's href\n   */\n  @Prop() href?: string;\n\n  /**\n   * Link's target\n   */\n  @Prop() target?: ButtonTarget;\n\n  /**\n   * The value for the bsClickEvent.\n   */\n  @Prop() value?: any;\n\n  /**\n   * Button's type\n   */\n  @Prop() type?: ButtonType = ButtonType.Button;\n\n  /**\n   * Define what kind of action the button will be used for (i.e. \"open-video-modal\")\n   */\n  @Prop() action?: string;\n\n  /**\n   * The class of the button or link.\n   */\n  @Prop() tagClass?: string;\n\n  /**\n   * Button's style variant\n   */\n  @Prop() variant?: ButtonVariant;\n\n  /**\n   * Button's style variant\n   */\n  @Prop() ghost?: boolean = false;\n\n  /**\n   * Button's icon\n   */\n  @Prop() iconLeft?: IconName;\n\n  /**\n   * Second button's icon\n   */\n  @Prop() iconRight?: IconName;\n\n  /**\n   * Make the button take the full-width\n   */\n  @Prop() isFullWidth?: boolean;\n\n  /**\n   * Disable button interactions\n   */\n  @Prop() isDisabled?: boolean;\n\n  /**\n   * Button's custom click event\n   */\n  @Event() bsButtonClick: EventEmitter<ButtonClickEvent>;\n\n  private handleClick() {\n    const { type, href, target, action, value } = this;\n\n    if (href && target === '_blank') return;\n\n    this.bsButtonClick.emit({ type, href, target, action, value });\n  }\n\n  render() {\n    const TagType = isEmpty(this.href) ? 'button' : 'a';\n\n    const attributes =\n      TagType === 'button'\n        ? { type: this.type }\n        : {\n            href: this.href,\n            target: this.target === 'internal' ? '_self' : this.target,\n            rel: this.target === '_blank' ? 'noreferrer' : '',\n          };\n\n    return (\n      <Host class={`${this.isFullWidth ? 'is-full-width' : ''}`}>\n        <TagType\n          class={`button\n            ${this.tagClass}\n            is-${this.variant}-variant\n            ${this.ghost ? 'is-ghost' : ''}\n            ${this.isFullWidth ? 'is-full-width' : ''}\n            ${this.isDisabled ? 'is-disabled' : ''}`}\n          {...attributes}\n          onClick={this.handleClick.bind(this)}\n          aria-label={this.text}\n        >\n          {/* iconsec */}\n          {this.iconLeft && (\n            <span class=\"icon\">\n              <bs-icon name={this.iconLeft} />\n            </span>\n          )}\n\n          {/* text */}\n          {!isEmpty(this.text) && <span class=\"text\">{this.text}</span>}\n\n          {/* icon */}\n          {this.iconRight && (\n            <span class=\"icon icon--right\">\n              <bs-icon name={this.iconRight} />\n            </span>\n          )}\n        </TagType>\n      </Host>\n    );\n  }\n}\n"]}