{"version":3,"file":"click-action.js","sourceRoot":"","sources":["../../../../src/components/atoms/click-action/click-action.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAgB,MAAM,eAAe,CAAC;AAC9E,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AACxD,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAyB,MAAM,sBAAsB,CAAC;AAEjG;;GAEG;AAMH,MAAM,OAAO,aAAa;;;;gBAcS,eAAe,CAAC,MAAM;;;;;;;EAgC/C,WAAW,CAAC,KAAiB;IACnC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC;IAEhE,IAAI,IAAI,IAAI,MAAM,KAAK,iBAAiB,CAAC,QAAQ,EAAE;MACjD,OAAO;KACR;IAED,aAAa,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IACxD,KAAK,CAAC,eAAe,EAAE,CAAC;IACxB,KAAK,CAAC,cAAc,EAAE,CAAC;EACzB,CAAC;EAED,MAAM;IACJ,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;IAC9C,MAAM,OAAO,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC;IAChD,MAAM,KAAK,GAAG,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC;IAErF,OAAO,CACL,EAAC,IAAI,IAAC,KAAK,EAAC,iBAAiB;MAC3B,EAAC,OAAO,kBACN,KAAK,EAAE,IAAI,CAAC,QAAQ,IAChB,KAAK,kBACG,IAAI,CAAC,aAAa,EAC9B,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;QAEpC,eAAQ,CACA,CACL,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Prop, Host, Event, EventEmitter } from '@stencil/core';\nimport { isEmpty } from '@springbokagency/stencil-base';\nimport { ClickActionTarget, ClickActionType, type ClickActionEvent } from './click-action.types';\n\n/**\n * The click action component.\n */\n@Component({\n  tag: 'bs-click-action',\n  styleUrl: 'click-action.scss',\n  shadow: false,\n})\nexport class BsClickAction {\n  /**\n   * The name for the bsClickAction event.\n   */\n  @Prop() name?: string;\n\n  /**\n   * The value for the bsClickAction event.\n   */\n  @Prop() value?: any;\n\n  /**\n   * The type of button for the bsClickAction component.\n   */\n  @Prop() type?: ClickActionType = ClickActionType.Button;\n\n  /**\n   * The href of bsClickAction component, will convert the button into a link.\n   */\n  @Prop() href?: string;\n\n  /**\n   * The target of the provided href.\n   */\n  @Prop() target?: ClickActionTarget;\n\n  /**\n   * The class of the button or link.\n   */\n  @Prop() tagClass?: string;\n\n  /**\n   * Disabled state of inner tag.\n   */\n  @Prop() disabled?: boolean;\n\n  /**\n   * Use aria-label attribute when link/button doesn't have any text\n   */\n  @Prop() ariaLabelText?: string;\n\n  /**\n   * Emitted when the component is clicked.\n   */\n  @Event() bsClickAction: EventEmitter<ClickActionEvent>;\n\n  private handleClick(event: MouseEvent) {\n    const { name, value, type, href, target, bsClickAction } = this;\n\n    if (href && target !== ClickActionTarget.Internal) {\n      return;\n    }\n\n    bsClickAction.emit({ name, value, type, href, target });\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  render() {\n    const { type, href, target, disabled } = this;\n    const TagType = !isEmpty(href) ? 'a' : 'button';\n    const attrs = TagType === 'button' ? { type, disabled } : { href, target, disabled };\n\n    return (\n      <Host class=\"bs-click-action\">\n        <TagType\n          class={this.tagClass}\n          {...attrs}\n          aria-label={this.ariaLabelText}\n          onClick={this.handleClick.bind(this)}\n        >\n          <slot />\n        </TagType>\n      </Host>\n    );\n  }\n}\n"]}