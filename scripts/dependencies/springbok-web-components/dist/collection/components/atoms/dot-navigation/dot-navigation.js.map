{"version":3,"file":"dot-navigation.js","sourceRoot":"","sources":["../../../../src/components/atoms/dot-navigation/dot-navigation.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAEvE;;GAEG;AAMH,MAAM,OAAO,eAAe;;IA2B1B,cAAc;IACN,kBAAa,GAAG,GAAG,EAAE;MAC3B,IAAI,IAAI,GAAG,CAAC,CAAC;MAEb,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;MAC3B,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;MAE7B,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE;QAC/B,IAAI,IAAI,GAAG,CAAC;QAEZ,IAAI,CAAC,QAAQ,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;MAChE,CAAC,EAAE,GAAG,CAAC,CAAC;MAER,IAAI,CAAC,OAAO,GAAG,UAAU,CACvB,GAAG,EAAE;QACH,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;MAC/B,CAAC,EACD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAC1B,CAAC;IACJ,CAAC,CAAC;oBAzC0B,CAAC;;;;;EAa7B,iBAAiB;IACf,IAAI,CAAC,aAAa,EAAE,CAAC;EACvB,CAAC;EA4BD,sBAAsB;EACtB,gBAAgB;IACd,IAAI,CAAC,aAAa,EAAE,CAAC;EACvB,CAAC;EAED,MAAM;IACJ,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IAElD,OAAO,CACL,EAAC,IAAI,IAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;MACrC,YAAM,KAAK,EAAC,SAAS,IAClB,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAClB,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CACrB,gBAAU,KAAK,EAAC,iBAAiB,EAAC,GAAG,EAAC,KAAK,EAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,GAAI,CACrE,CAAC,CAAC,CAAC,CACF,gBAAU,KAAK,EAAC,KAAK,EAAC,GAAG,EAAC,KAAK,EAAC,KAAK,EAAC,GAAG,GAAG,CAC7C,CACF,CACI,CACF,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, Prop, State, Watch, h } from '@stencil/core';\n\n/**\n * The dot navigation component used to indicate the current index in a list of views.\n */\n@Component({\n  tag: 'bs-dot-navigation',\n  styleUrl: 'dot-navigation.scss',\n  shadow: true,\n})\nexport class BsDotNavigation {\n  private timeout: NodeJS.Timeout;\n\n  private interval: NodeJS.Timeout;\n\n  @State() progress: number = 0;\n\n  /**\n   * The amount of dots in the navigation.\n   */\n  @Prop() items!: number;\n\n  /**\n   * The active dot index.\n   */\n  @Prop() index!: number;\n\n  @Watch('index')\n  handleIndexChange() {\n    this.startProgress();\n  }\n\n  /**\n   * Should the auto navigation be slow?\n   */\n  @Prop() slow?: boolean;\n\n  /** Methods */\n  private startProgress = () => {\n    let time = 0;\n\n    clearTimeout(this.timeout);\n    clearInterval(this.interval);\n\n    this.interval = setInterval(() => {\n      time += 100;\n\n      this.progress = (100 / (this.slow ? 30 : 15)) * (time / 1000);\n    }, 100);\n\n    this.timeout = setTimeout(\n      () => {\n        clearInterval(this.interval);\n      },\n      this.slow ? 30000 : 15000\n    );\n  };\n\n  /** lifecycle hooks */\n  componentDidLoad() {\n    this.startProgress();\n  }\n\n  render() {\n    const dots = Array.from(Array(this.items).keys());\n\n    return (\n      <Host class={this.slow ? 'is-slow' : ''}>\n        <span class=\"dot-nav\">\n          {dots.map((index) =>\n            index === this.index ? (\n              <progress class=\"dot dot--active\" max=\"100\" value={this.progress} />\n            ) : (\n              <progress class=\"dot\" max=\"100\" value=\"0\" />\n            )\n          )}\n        </span>\n      </Host>\n    );\n  }\n}\n"]}