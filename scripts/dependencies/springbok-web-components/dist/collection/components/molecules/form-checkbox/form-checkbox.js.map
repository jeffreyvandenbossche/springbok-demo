{"version":3,"file":"form-checkbox.js","sourceRoot":"","sources":["../../../../src/components/molecules/form-checkbox/form-checkbox.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, Prop, State, h } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { CheckboxItem } from './form-checkbox.types';\n\n/**\n * The form checkbox component.\n */\n@Component({\n  tag: 'bs-form-checkbox',\n  styleUrl: 'form-checkbox.scss',\n  shadow: true,\n})\nexport class BsFormCheckbox {\n  private formFieldRef: HTMLBsFormFieldElement;\n\n  /**\n   * State\n   */\n\n  @State() invalid: boolean = false;\n\n  @State() focused: boolean = false;\n\n  @State() value: string[] = [];\n\n  /**\n   * The unique name to identify the form element\n   */\n  @Prop() name!: string;\n\n  /**\n   * The error message to be displayed when the required field remains empty\n   */\n  @Prop() requiredMessage: string;\n\n  /**\n   * Wether or not the checkbox is required\n   */\n  @Prop() required?: boolean = true;\n\n  /**\n   * The label displayed after the checkbox\n   */\n  @Prop() label?: string = '';\n\n  /**\n   * Description.\n   */\n  @Prop() options: CheckboxItem[] | string;\n\n  @Memoize('options')\n  get parsedOptions(): CheckboxItem[] {\n    return parseIfString(this.options);\n  }\n\n  /**\n   * Methods\n   */\n\n  private handleOnChange = (e: PointerEvent) => {\n    const el = e.target as HTMLInputElement;\n\n    if (el.checked) {\n      this.value.push(el.value);\n      this.value = [...this.value];\n    } else {\n      this.value = this.value.filter((item) => item !== el.value);\n    }\n\n    this.formFieldRef.value = this.value.toString();\n  };\n\n  componentDidLoad() {\n    const selected = [] as string[];\n\n    this.parsedOptions.forEach((option) => {\n      if (option.selected) {\n        selected.push(option.value);\n      }\n    });\n\n    this.value = selected;\n    this.formFieldRef.value = this.value.toString();\n  }\n\n  render() {\n    return (\n      <Host>\n        <fieldset class=\"form-fieldset\">\n          <legend class=\"form-legend\">\n            {this.label}\n            {this.required && !isEmpty(this.label) ? <span aria-hidden=\"true\">&nbsp;*</span> : ''}\n          </legend>\n          <bs-form-field\n            ref={(el) => {\n              this.formFieldRef = el;\n            }}\n            value={this.value.toString()}\n            name={this.name}\n            invalid={this.invalid}\n            required={this.required}\n            requiredMessage={this.requiredMessage}\n            label={this.label}\n            border={false}\n          >\n            {this.parsedOptions.map((checkbox, index) => (\n              <div slot=\"form-element\" class=\"form-group\">\n                <input\n                  class=\"form-input\"\n                  id={`checkbox-${index}`}\n                  type=\"checkbox\"\n                  value={checkbox.value || 'true'}\n                  disabled={checkbox.disabled}\n                  checked={checkbox.selected}\n                  onChange={this.handleOnChange}\n                />\n                <label class=\"form-label\" htmlFor={`checkbox-${index}`} title={checkbox.text}>\n                  {checkbox.text}\n                </label>\n              </div>\n            ))}\n          </bs-form-field>\n        </fieldset>\n      </Host>\n    );\n  }\n}\n"]}