{"version":3,"file":"form-field.js","sourceRoot":"","sources":["../../../../src/components/molecules/form-field/form-field.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACxE,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AAExD,OAAO,EAAE,gBAAgB,EAAE,MAAM,gCAAgC,CAAC;AAElE,OAAO,EAAE,YAAY,EAAE,MAAM,wCAAwC,CAAC;AAEtE;;GAEG;AAMH,MAAM,OAAO,WAAW;;IACd,kBAAa,GAAsB,gBAAgB,CAAC;;;;;;;;;;;kBA8DjC,IAAI;;;EApD/B,cAAc;IACZ,IAAI,CAAC,QAAQ,EAAE,CAAC;EAClB,CAAC;EAyDD;;KAEG;EAEH,KAAK,CAAC,QAAQ,CAAC,QAAgB,IAAI,CAAC,KAAK;IACvC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IAEpB,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE;MACnC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC;KAC1C;SAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;MACnF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC;KACzC;SAAM;MACL,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;KACtB;EACH,CAAC;EAED,iBAAiB;IACf,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;MAC5B,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACnD;IAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;MACxB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;MACnB,IAAI,CAAC,QAAQ,EAAE,CAAC;KACjB;EACH,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,WAAK,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;QACzC,YAAM,IAAI,EAAC,cAAc,GAAG;QAC5B,YAAM,IAAI,EAAC,YAAY,GAAG;QAC1B,eAAS,KAAK,EAAC,WAAW,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,GAAI,CAC1C;MACN,YAAM,KAAK,EAAC,YAAY;QAAE,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,YAAY;iBAAc,CACpE,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Host, Method, Prop, Watch } from '@stencil/core';\nimport { isEmpty } from '@springbokagency/stencil-base';\nimport { IconName } from '../../../components';\nimport { defaultValidator } from '../../../validators/validators';\nimport { Validator, ValidatorEntry } from '../../../validators/validators.types';\nimport { getValidator } from '../../../validators/validators.factory';\n\n/**\n * The form field component.\n */\n@Component({\n  tag: 'bs-form-field',\n  styleUrl: 'form-field.scss',\n  shadow: true,\n})\nexport class BsFormField {\n  private validatorFunc: Validator<string> = defaultValidator;\n\n  private errorMessage: string;\n\n  /**\n   * The value of the form field\n   */\n  @Prop() value: string;\n\n  @Watch('value')\n  valueDidChange() {\n    this.validate();\n  }\n\n  /**\n   * The name of the form field\n   */\n  @Prop() name: string;\n\n  /**\n   * Wether or not the form field is filled\n   */\n  @Prop({ reflect: true }) filled: boolean;\n\n  /**\n   * Wether or not the form field is focussed\n   */\n  @Prop({ reflect: true }) focused: boolean;\n\n  /**\n   * Wether or not the form field is invalid\n   */\n  @Prop({ reflect: true }) invalid: boolean;\n\n  /**\n   * Wether or not the form field is required\n   */\n  @Prop() required: boolean;\n\n  /**\n   * The error message to be displayed on the form field in case of invalidity\n   */\n  @Prop() invalidMessage: string;\n\n  /**\n   * The error message to be displayed on the form field when the required field is not populated\n   */\n  @Prop() requiredMessage: string;\n\n  /**\n   * The icon to be displayed on the right hand side of the form field\n   */\n  @Prop() icon?: IconName;\n\n  /**\n   * The label describing the form field\n   */\n  @Prop() label?: string;\n\n  /**\n   * A border styling for text input and select fields\n   */\n  @Prop() border?: boolean = true;\n\n  /**\n   * The validator function name used to validate the form field\n   */\n  @Prop() validator?: string | ValidatorEntry;\n\n  /**\n   * A method to run the validation on the form input value\n   */\n  @Method()\n  async validate(value: string = this.value) {\n    this.invalid = true;\n\n    if (isEmpty(value) && this.required) {\n      this.errorMessage = this.requiredMessage;\n    } else if (!isEmpty(value) && this.validator && !this.validatorFunc.validate(value)) {\n      this.errorMessage = this.invalidMessage;\n    } else {\n      this.invalid = false;\n    }\n  }\n\n  componentWillLoad() {\n    if (!isEmpty(this.validator)) {\n      this.validatorFunc = getValidator(this.validator);\n    }\n\n    if (!isEmpty(this.value)) {\n      this.filled = true;\n      this.validate();\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={this.border ? 'form-field' : ''}>\n          <slot name=\"form-element\" />\n          <slot name=\"form-label\" />\n          <bs-icon class=\"form-icon\" name={this.icon} />\n        </div>\n        <span class=\"form-error\">{this.invalid && this.errorMessage}&nbsp;</span>\n      </Host>\n    );\n  }\n}\n"]}