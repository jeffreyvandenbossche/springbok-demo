{"version":3,"file":"experience-zone-card.js","sourceRoot":"","sources":["../../../../src/components/molecules/experience-zone-card/experience-zone-card.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AAEvE,OAAO,EAAE,SAAS,EAAE,MAAM,6BAA6B,CAAC;AACxD,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvD;;GAEG;AAMH,MAAM,OAAO,oBAAoB;;oBAIe,KAAK;;;iBAkBzB,KAAK;;EAL/B,IAAI,eAAe;IACjB,OAAO,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;EACvC,CAAC;EAKD,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,WAAK,KAAK,EAAC,sBAAsB;QAC/B,WAAK,KAAK,EAAC,YAAY;UACrB,eAAS,KAAK,EAAC,SAAS,EAAC,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC,OAAO,GAAI,CACvE;QACN,WAAK,KAAK,EAAC,YAAY;UACrB,gBACE,KAAK,EAAC,OAAO,EACb,KAAK,EAAE,IAAI,EACX,GAAG,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,EAC7B,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,EACnC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,UAAU,EAC3C,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,GACrC;UACD,IAAI,CAAC,KAAK,IAAI,eAAS,KAAK,EAAC,YAAY,EAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAI,CAC9D,CACF,CACD,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AA7BC;EADC,OAAO,CAAC,WAAW,CAAC;2DAGpB","sourcesContent":["import { Component, Host, h, Prop } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { BsImage } from '../../atoms/image/image';\nimport { TextColor } from '../../atoms/text/text.types';\nimport { IconName } from '../../atoms/icon/icon.types';\n\n/**\n * Experience Zone card component.\n */\n@Component({\n  tag: 'bs-experience-zone-card',\n  styleUrl: 'experience-zone-card.scss',\n  shadow: true,\n})\nexport class BsExperienceZoneCard {\n  /**\n   * Should the layout for singular items be applied?\n   */\n  @Prop({ reflect: true }) singular?: boolean = false;\n\n  /**\n   * The Experience Zone card title.\n   */\n  @Prop() cardTitle: string;\n\n  /**\n   * The Experience Zone card image.\n   */\n  @Prop() cardImage: BsImage | string;\n\n  @Memoize('cardImage')\n  get parsedCardImage(): BsImage {\n    return parseIfString(this.cardImage);\n  }\n\n  /** Should the image have a play icon? */\n  @Prop() video?: boolean = false;\n\n  render() {\n    return (\n      <Host>\n        <div class=\"experience-zone-card\">\n          <div class=\"card-title\">\n            <bs-text class=\"bs-text\" text={this.cardTitle} color={TextColor.Default} />\n          </div>\n          <div class=\"card-image\">\n            <bs-image\n              class=\"image\"\n              cover={true}\n              src={this.parsedCardImage.src}\n              srcset={this.parsedCardImage.srcset}\n              imageSizes={this.parsedCardImage.imageSizes}\n              altText={this.parsedCardImage.altText}\n            />\n            {this.video && <bs-icon class=\"video-icon\" name={IconName.Play} />}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}