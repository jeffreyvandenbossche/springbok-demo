{"version":3,"file":"form-select.js","sourceRoot":"","sources":["../../../../src/components/molecules/form-select/form-select.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { IconName } from '../../../components';\nimport { KeyboardCodes, SelectOption } from './form-select.types';\n\n/**\n * The form select component.\n */\n@Component({\n  tag: 'bs-form-select',\n  styleUrl: 'form-select.scss',\n  shadow: true,\n})\nexport class BsFormSelect {\n  @Element() hostElement: HTMLBsFormSelectElement;\n\n  private formFieldRef: HTMLBsFormFieldElement;\n\n  private selectElRef: HTMLSelectElement;\n\n  private selectWrap: HTMLButtonElement;\n\n  private customOptions: HTMLLIElement[] = [];\n\n  /**\n   * The value of the form field\n   */\n  @State() value?: SelectOption;\n\n  /**\n   * Wether or not the input field is filled\n   */\n  @State() filled: boolean = false;\n\n  /**\n   * Wether or not the input field is focused\n   */\n  @State() focused: boolean = false;\n\n  /**\n   * Wether or not the input field is invalid\n   */\n  @State() invalid: boolean = false;\n\n  /**\n   * Wether or not the input field is invalid\n   */\n  @State() activeOption: number | undefined = undefined;\n\n  @Watch('activeOption')\n  validateValue(newValue: number, oldValue: number) {\n    if (typeof newValue === 'undefined') return;\n\n    if (newValue > oldValue) {\n      this.activeOption = newValue >= this.parsedOptions.length ? 0 : newValue;\n    } else if (newValue < oldValue) {\n      this.activeOption = newValue < 0 ? this.parsedOptions.length - 1 : newValue;\n    } else {\n      this.activeOption = newValue;\n    }\n\n    const options = this.selectWrap.querySelectorAll('.custom-option') as NodeListOf<HTMLLIElement>;\n\n    options[this.activeOption].focus();\n  }\n\n  /**\n   * The unique name to identify the form element\n   */\n  @Prop() name!: string;\n\n  /**\n   * The label describing the form field\n   */\n  @Prop() label!: string;\n\n  /**\n   * The list of options that will populate the select field.\n   */\n  @Prop() options: SelectOption[] | string;\n\n  @Memoize('options')\n  get parsedOptions(): SelectOption[] {\n    return parseIfString(this.options);\n  }\n\n  /**\n   * Wether or not the input field is required\n   */\n  @Prop() required?: boolean = false;\n\n  /**\n   * The error message to be displayed when the required field remains empty\n   */\n  @Prop() requiredMessage: string;\n\n  /**\n   * The icon to be displayed on the right hand side of the form field\n   */\n  @Prop() icon?: IconName;\n\n  private focus = () => {\n    this.focused = true;\n    this.selectWrap.addEventListener('keydown', this.handleKeyDown, true);\n    this.selectWrap.querySelector('.custom-options-wrapper').setAttribute('aria-expanded', 'true');\n    (this.selectWrap.querySelector('.custom-options-wrapper') as HTMLUListElement).style.display =\n      'block';\n    this.activeOption = 0;\n  };\n\n  private focusOut = () => {\n    this.focused = false;\n    this.selectWrap.removeEventListener('keydown', this.handleKeyDown, true);\n    this.selectWrap.querySelector('.custom-options-wrapper').setAttribute('aria-expanded', 'false');\n    (this.selectWrap.querySelector('.custom-options-wrapper') as HTMLUListElement).style.display =\n      'none';\n    this.activeOption = undefined;\n  };\n\n  private handleFocusOut(e: MouseEvent) {\n    if ((e.target as HTMLElement).nodeName !== 'BS-FORM-SELECT') {\n      this.focused = false;\n    }\n  }\n\n  private handleOptionfocus(direction: KeyboardCodes.ArrowUp | KeyboardCodes.ArrowDown) {\n    if (direction === KeyboardCodes.ArrowDown) {\n      this.activeOption += 1;\n    } else if (direction === KeyboardCodes.ArrowUp) {\n      this.activeOption -= 1;\n    }\n  }\n\n  private handleKeyDown = (e: KeyboardEvent) => {\n    switch (e.code) {\n      case KeyboardCodes.Enter:\n        this.handleSelect(e);\n        this.focusOut();\n        break;\n\n      case KeyboardCodes.ArrowDown:\n        this.handleOptionfocus(KeyboardCodes.ArrowDown);\n        break;\n\n      case KeyboardCodes.ArrowUp:\n        this.handleOptionfocus(KeyboardCodes.ArrowUp);\n        break;\n\n      case KeyboardCodes.Escape:\n        this.focusOut();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  private handleSelect(e: PointerEvent | KeyboardEvent) {\n    const nativeSelect = this.selectElRef;\n    const selected = e.target as HTMLLIElement;\n    let filled = false;\n\n    for (let i = 0; i < nativeSelect.options.length; i += 1) {\n      if (nativeSelect.options[i].innerHTML === selected.innerHTML) {\n        if (nativeSelect.options[i].disabled) return;\n        nativeSelect.selectedIndex = i;\n        nativeSelect.options[i].click();\n        this.value = nativeSelect.options[i];\n        this.formFieldRef.value = this.value?.value;\n        filled = true;\n        break;\n      }\n    }\n\n    this.focusOut();\n    this.filled = filled;\n  }\n\n  private handleSelectedProp() {\n    for (let i = 0; i < this.selectElRef.options.length; i += 1) {\n      this.selectElRef.options[i].addEventListener('click', this.handleSelect.bind(this));\n\n      if (this.selectElRef.options[i].selected) {\n        this.selectElRef.options[i].click();\n      }\n    }\n  }\n\n  componentDidRender() {\n    document.addEventListener('click', this.handleFocusOut.bind(this));\n  }\n\n  componentDidLoad() {\n    this.customOptions.forEach((option) => {\n      option.addEventListener('click', this.handleSelect.bind(this));\n    });\n    this.hostElement.addEventListener('focusout', this.focusOut.bind(this));\n\n    this.handleSelectedProp();\n  }\n\n  disconnectedCallback() {\n    document.removeEventListener('click', this.handleFocusOut.bind(this));\n    this.hostElement.removeEventListener('focusout', this.focusOut.bind(this));\n  }\n\n  render() {\n    return (\n      <Host focused={this.focused}>\n        <bs-form-field\n          ref={(el) => {\n            this.formFieldRef = el;\n          }}\n          value={this.value?.value}\n          name={this.name}\n          focused={this.focused || this.filled}\n          filled={this.filled}\n          invalid={this.invalid}\n          required={this.required}\n          requiredMessage={this.requiredMessage}\n          label={this.label}\n          icon={this.icon}\n        >\n          <button\n            slot=\"form-element\"\n            ref={(el) => {\n              this.selectWrap = el;\n            }}\n            id={this.name}\n            class=\"custom-select\"\n            onFocus={this.focus}\n          >\n            <span class=\"custom-select-value\">{this.value?.text}</span>\n            <select\n              ref={(el: HTMLSelectElement) => {\n                this.selectElRef = el;\n\n                return this.selectElRef;\n              }}\n              class=\"hidden\"\n              required={this.required}\n              id={`hidden-${this.name}`}\n              name={this.name}\n            >\n              {this.parsedOptions.map((option) => (\n                <option selected={option.selected} value={option.value} disabled={option.disabled}>\n                  {option.text}\n                </option>\n              ))}\n            </select>\n            <div aria-labelledby={this.name}>\n              <ul\n                class=\"custom-options-wrapper hidden\"\n                aria-haspopup=\"listbox\"\n                aria-expanded=\"false\"\n                role=\"group\"\n              >\n                {this.parsedOptions.map((option) => (\n                  <li\n                    ref={(el) => {\n                      this.customOptions.push(el);\n                    }}\n                    role=\"option\"\n                    class={`custom-option ${option.disabled ? 'is-disabled' : ''}`}\n                    tabindex={option.disabled ? '-1' : '0'}\n                    aria-disabled={option.disabled}\n                  >\n                    {option.text}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </button>\n          <label slot=\"form-label\" class=\"form-label\" htmlFor={this.name} title={this.label}>\n            {this.label}\n            {this.required ? <span aria-hidden=\"true\">&nbsp;*</span> : ''}\n          </label>\n        </bs-form-field>\n      </Host>\n    );\n  }\n}\n"]}