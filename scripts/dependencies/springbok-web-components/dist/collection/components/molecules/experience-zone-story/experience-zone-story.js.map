{"version":3,"file":"experience-zone-story.js","sourceRoot":"","sources":["../../../../src/components/molecules/experience-zone-story/experience-zone-story.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Prop, State, Watch, Listen } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport {\n  ExperienceZoneLayout,\n  ExperienceZoneStory,\n} from '../experience-zone/experience-zone.types';\nimport { Breakpoint, compareBreakpoint } from '../../../utils/breakpoints';\nimport { TouchDirections } from '../../layouts/default-layout/default-layout.types';\nimport { BsVideoCard } from '../video-card/video-card';\n\n/**\n * Experience Zone story component.\n */\n@Component({\n  tag: 'bs-experience-zone-story',\n  styleUrl: 'experience-zone-story.scss',\n  shadow: true,\n})\nexport class BsExperienceZoneScreen {\n  private experienceZoneScreenRef: HTMLBsExperienceZoneScreenElement;\n\n  private overlayRef: HTMLBsDarkOverlayElement;\n\n  @State() activeIndex: number = 0;\n\n  /** Is this story currently active? */\n  @Prop() active?: boolean = false;\n\n  /** Should navigation arrows be hidden? */\n  @Prop() hideNavigation?: boolean = false;\n\n  /**\n   * The Experience Zone story data.\n   */\n  @Prop() storyData: ExperienceZoneStory | string;\n\n  @Memoize('storyData')\n  get parsedStoryData(): ExperienceZoneStory {\n    return parseIfString(this.storyData);\n  }\n\n  /** Watchers */\n  @Watch('active')\n  handleActiveChange(isActive: boolean) {\n    if (isActive) {\n      this.overlayRef.focusTrap();\n    }\n  }\n\n  /** Listeners */\n  @Listen('bsSwipeAction', { target: 'window' })\n  handleBsSwipeAction(e: CustomEvent) {\n    if (this.active) {\n      if (e.detail.direction === TouchDirections.Left) {\n        this.overlayRef.nextSlide();\n      }\n\n      if (e.detail.direction === TouchDirections.Right) {\n        this.overlayRef.previousSlide();\n      }\n    }\n  }\n\n  /** Methods */\n  private handleNextMedia = () => {\n    this.updateIndex(this.activeIndex + 1);\n  };\n\n  private updateIndex = (newValue: number) => {\n    if (this.parsedStoryData.screens.length <= 1) {\n      this.activeIndex = 0;\n\n      return;\n    }\n\n    this.experienceZoneScreenRef.classList.add('fade-out');\n\n    this.experienceZoneScreenRef.addEventListener('animationend', () => {\n      this.experienceZoneScreenRef.classList.remove('fade-out');\n\n      if (newValue > this.parsedStoryData.screens.length - 1) {\n        this.activeIndex = 0;\n      } else if (newValue < 0) {\n        this.activeIndex = this.parsedStoryData.screens.length - 1;\n      } else {\n        this.activeIndex = newValue;\n      }\n    });\n  };\n\n  componentDidLoad() {\n    if (this.active) {\n      this.overlayRef.focusTrap();\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"experience-zone-story\">\n          <bs-dark-overlay\n            ref={(el) => {\n              this.overlayRef = el;\n            }}\n            main-title={this.parsedStoryData.storyTitle}\n            screens={!this.hideNavigation}\n            logo={\n              (this.parsedStoryData.screens[this.activeIndex].layout !==\n                ExperienceZoneLayout.Video &&\n                compareBreakpoint('max', Breakpoint.md)) ||\n              compareBreakpoint('min', Breakpoint.md)\n                ? this.parsedStoryData.storyLogo\n                : ''\n            }\n          >\n            <bs-experience-zone-screen\n              ref={(el) => {\n                this.experienceZoneScreenRef = el;\n              }}\n              active={this.active}\n              onClick={this.handleNextMedia}\n              slot=\"media\"\n              layout={this.parsedStoryData.screens[this.activeIndex].layout}\n              disclaimer={this.parsedStoryData.screens[this.activeIndex].disclaimer}\n              components={this.parsedStoryData.screens[this.activeIndex].components}\n            ></bs-experience-zone-screen>\n            {this.parsedStoryData.screens[this.activeIndex].layout ===\n              ExperienceZoneLayout.Video && (\n              <bs-container slot=\"controller\" contained={true}>\n                <div class=\"screen-footer\">\n                  <bs-youtube-control\n                    videoId={\n                      (\n                        this.parsedStoryData.screens[this.activeIndex].components[0]\n                          .data as BsVideoCard\n                      ).videoId\n                    }\n                  />\n                </div>\n              </bs-container>\n            )}\n          </bs-dark-overlay>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}