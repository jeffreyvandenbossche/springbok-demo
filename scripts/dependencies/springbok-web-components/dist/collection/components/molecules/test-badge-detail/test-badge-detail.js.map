{"version":3,"file":"test-badge-detail.js","sourceRoot":"","sources":["../../../../src/components/molecules/test-badge-detail/test-badge-detail.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AACvE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,+BAA+B,CAAC;AACpE,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAIvD;;GAEG;AAMH,MAAM,OAAO,iBAAiB;;;;;;;EAY5B,IAAI,cAAc;IAChB,OAAO,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;EACtC,CAAC;EAQD,IAAI,iBAAiB;IACnB,OAAO,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;EACzC,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,WAAK,KAAK,EAAC,cAAc;QACvB,WAAK,KAAK,EAAC,SAAS;UAClB,WAAK,KAAK,EAAC,OAAO;YAChB,gBACE,KAAK,EAAC,OAAO,EACb,IAAI,EAAE,IAAI,CAAC,UAAU,EACrB,GAAG,EAAE,QAAQ,CAAC,IAAI,EAClB,IAAI,EAAE,SAAS,CAAC,KAAK,GACX;YACZ,eAAS,KAAK,EAAC,MAAM,EAAC,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,GAAY;YAC7E,IAAI,CAAC,cAAc,CAAC,IAAI,IAAI,CAC3B,+BAAW,KAAK,EAAC,QAAQ,IAAK,IAAI,CAAC,cAAc,EAAc,CAChE,CACG,CACF;QACN,WAAK,KAAK,EAAC,OAAO;UAChB,WAAK,KAAK,EAAC,YAAY;YACrB,WAAK,KAAK,EAAC,OAAO;cAChB,8BAAU,KAAK,EAAC,UAAU,IAAK,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAE,OAAO,EAAC,EAAE,IAAY,CAC5E,CACF,CACF,CACF,CACD,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AA3CC;EADC,OAAO,CAAC,UAAU,CAAC;uDAGnB;AAQD;EADC,OAAO,CAAC,aAAa,CAAC;0DAGtB","sourcesContent":["import { Component, Host, Prop, h } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { TitleSize, TitleTag } from '../../atoms/title/title.types';\nimport { TextSize } from '../../atoms/text/text.types';\nimport { BsImage } from '../../atoms/image/image';\nimport { BsButton } from '../../atoms/button/button';\n\n/**\n * Test badge detail component.\n */\n@Component({\n  tag: 'bs-test-badge-detail',\n  styleUrl: 'test-badge-detail.scss',\n  shadow: true,\n})\nexport class BsTestBadgeDetail {\n  /** Props */\n  /** The badge title. */\n  @Prop() badgeTitle: string;\n\n  /** The badge content. */\n  @Prop() badgeText: string;\n\n  /** The badge CTA. */\n  @Prop() badgeCta: BsButton | string;\n\n  @Memoize('badgeCta')\n  get parsedBadgeCta(): BsButton {\n    return parseIfString(this.badgeCta);\n  }\n\n  /**\n   * The test badge image.\n   */\n  @Prop() badgeImages: BsImage[] | string;\n\n  @Memoize('badgeImages')\n  get parsedbadgeImages(): BsImage[] {\n    return parseIfString(this.badgeImages);\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"badge-detail\">\n          <div class=\"content\">\n            <div class=\"cover\">\n              <bs-title\n                class=\"title\"\n                text={this.badgeTitle}\n                tag={TitleTag.Span}\n                size={TitleSize.Head3}\n              ></bs-title>\n              <bs-text class=\"text\" text={this.badgeText} size={TextSize.Default}></bs-text>\n              {this.parsedBadgeCta.text && (\n                <bs-button class=\"button\" {...this.parsedBadgeCta}></bs-button>\n              )}\n            </div>\n          </div>\n          <div class=\"media\">\n            <div class=\"image-grid\">\n              <div class=\"image\">\n                <bs-image class=\"relative\" {...this.parsedbadgeImages[0]} caption=\"\"></bs-image>\n              </div>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}