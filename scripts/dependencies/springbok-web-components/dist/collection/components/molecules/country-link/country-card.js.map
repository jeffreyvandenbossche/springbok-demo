{"version":3,"file":"country-card.js","sourceRoot":"","sources":["../../../../src/components/molecules/country-link/country-card.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AAIvE;;GAEG;AAMH,MAAM,OAAO,aAAa;;;;;;EAQxB,IAAI,UAAU;IACZ,OAAO,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAClC,CAAC;EAQD,IAAI,WAAW;IACb,OAAO,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;EAC1C,CAAC;EAQD,IAAI,YAAY;IACd,OAAO,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;EACpC,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,WAAK,KAAK,EAAC,cAAc;QACvB,WAAK,KAAK,EAAC,mBAAmB;UAC5B,WAAK,KAAK,EAAC,MAAM;YACf,gCAAc,IAAI,CAAC,UAAU,EAAI,CAC7B;UACN,WAAK,KAAK,EAAC,OAAO;YAChB,gCAAc,IAAI,CAAC,WAAW,EAAI,CAC9B,CACF;QACN,WAAK,KAAK,EAAC,MAAM,IACd,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAChC,uBAAiB,KAAK,EAAC,OAAO,EAAC,IAAI,EAAE,KAAK,CAAC,IAAI,IAC5C,KAAK,CAAC,KAAK,CACI,CACnB,CAAC,CACE,CACF,CACD,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AA/CC;EADC,OAAO,CAAC,MAAM,CAAC;+CAGf;AAQD;EADC,OAAO,CAAC,cAAc,CAAC;gDAGvB;AAQD;EADC,OAAO,CAAC,QAAQ,CAAC;iDAGjB","sourcesContent":["import { Component, Host, Prop, h } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { BsImage } from '../../atoms/image/image';\nimport { BsTitle } from '../../atoms/title/title';\n\n/**\n * Country link card component.\n */\n@Component({\n  tag: 'bs-country-card',\n  styleUrl: 'country-card.scss',\n  shadow: true,\n})\nexport class BsCountryCard {\n  /** Props */\n  /**\n   * The flag image.\n   */\n  @Prop() flag: BsImage | string;\n\n  @Memoize('flag')\n  get parsedFlag(): BsImage {\n    return parseIfString(this.flag);\n  }\n\n  /**\n   * The country name.\n   */\n  @Prop() countryTitle: BsTitle | string;\n\n  @Memoize('countryTitle')\n  get parsedTitle(): BsTitle {\n    return parseIfString(this.countryTitle);\n  }\n\n  /**\n   * The list of links to be rendered.\n   */\n  @Prop() brands: { label: string; href: string }[] | string;\n\n  @Memoize('brands')\n  get parsedBrands(): { label: string; href: string }[] {\n    return parseIfString(this.brands);\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"country-card\">\n          <div class=\"flex align-center\">\n            <div class=\"flag\">\n              <bs-image {...this.parsedFlag} />\n            </div>\n            <div class=\"title\">\n              <bs-title {...this.parsedTitle} />\n            </div>\n          </div>\n          <div class=\"flex\">\n            {this.parsedBrands.map((brand) => (\n              <bs-click-action class=\"brand\" href={brand.href}>\n                {brand.label}\n              </bs-click-action>\n            ))}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}