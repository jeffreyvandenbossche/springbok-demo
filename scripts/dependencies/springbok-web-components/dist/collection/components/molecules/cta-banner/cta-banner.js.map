{"version":3,"file":"cta-banner.js","sourceRoot":"","sources":["../../../../src/components/molecules/cta-banner/cta-banner.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AACvE,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvD,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,MAAM,4BAA4B,CAAC;AAE3E;;GAEG;AAOH,MAAM,OAAO,WAAW;;;;;mBA2BY,aAAa,CAAC,OAAO;kBAG5B,KAAK;;EAvBhC,IAAI,iBAAiB;IACnB,OAAO,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;EACzC,CAAC;EAaD,IAAI,YAAY;IACd,OAAO,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;EACpC,CAAC;EAQD,MAAM;IACJ,OAAO,CACL,EAAC,IAAI,IAAC,KAAK,EAAE,MAAM,IAAI,CAAC,OAAO,YAAY,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE;MACzE,WAAK,KAAK,EAAC,YAAY;QACrB,WAAK,KAAK,EAAC,cAAc;UACvB,8BAAU,KAAK,EAAC,OAAO,IAAK,IAAI,CAAC,iBAAiB,EAAI;UACrD,IAAI,CAAC,QAAQ,IAAI,eAAS,KAAK,EAAC,KAAK,EAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,GAAI,CAClF;QAEN,iCACM,IAAI,CAAC,YAAY,IACrB,WAAW,EACT,IAAI,CAAC,OAAO,KAAK,aAAa,CAAC,SAAS,IAAI,iBAAiB,CAAC,KAAK,EAAE,UAAU,CAAC,EAAE,CAAC,EAErF,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,KAAK,EAAE,IAAI,IACX,CACE,CACD,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AA9CC;EADC,OAAO,CAAC,aAAa,CAAC;oDAGtB;AAaD;EADC,OAAO,CAAC,QAAQ,CAAC;+CAGjB","sourcesContent":["import { Component, Host, Prop, h } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { ButtonVariant } from '../../atoms/button/button.types';\nimport { BsButton } from '../../atoms/button/button';\nimport { TextSize } from '../../atoms/text/text.types';\nimport { BsTitle } from '../../atoms/title/title';\nimport { Breakpoint, compareBreakpoint } from '../../../utils/breakpoints';\n\n/**\n * CTA Banner component.\n */\n\n@Component({\n  tag: 'bs-cta-banner',\n  styleUrl: 'cta-banner.scss',\n  shadow: true,\n})\nexport class BsCTABanner {\n  /**\n   * The (json)object containing the bs-title element properties\n   */\n  @Prop() bannerTitle: BsTitle | string;\n\n  @Memoize('bannerTitle')\n  get parsedBannerTitle(): BsTitle {\n    return parseIfString(this.bannerTitle);\n  }\n\n  /**\n   * The banner subtitle\n   */\n  @Prop() subtitle?: string;\n\n  /**\n   * The (json)object containing the bs-button element properties.\n   */\n  @Prop() button: BsButton | string;\n\n  @Memoize('button')\n  get parsedButton(): BsButton {\n    return parseIfString(this.button);\n  }\n\n  /** The banner variant. */\n  @Prop() variant?: ButtonVariant = ButtonVariant.Primary;\n\n  /** Should the background be filled up? */\n  @Prop() filled?: boolean = false;\n\n  render() {\n    return (\n      <Host class={`is-${this.variant}-variant ${this.filled ? 'is-filled' : ''}`}>\n        <div class=\"cta-banner\">\n          <div class=\"text-wrapper\">\n            <bs-title class=\"title\" {...this.parsedBannerTitle} />\n            {this.subtitle && <bs-text class=\"sub\" text={this.subtitle} size={TextSize.Default} />}\n          </div>\n\n          <bs-button\n            {...this.parsedButton}\n            isFullWidth={\n              this.variant === ButtonVariant.Secondary || compareBreakpoint('max', Breakpoint.md)\n            }\n            variant={this.variant}\n            ghost={true}\n          />\n        </div>\n      </Host>\n    );\n  }\n}\n"]}