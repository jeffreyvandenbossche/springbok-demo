{"version":3,"file":"video-card.js","sourceRoot":"","sources":["../../../../src/components/molecules/video-card/video-card.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACxE,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AACvE,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAIvD,OAAO,EAAE,WAAW,EAAE,MAAM,qDAAqD,CAAC;AAElF;;GAEG;AAMH,MAAM,OAAO,WAAW;;IAkDtB,cAAc;IACN,oBAAe,GAAG,GAAG,EAAE;MAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACrB,CAAC,CAAC;kBAnDyB,KAAK;;gBAWP,KAAK;kBAKH,KAAK;oBAKH,KAAK;;;EAQlC,IAAI,WAAW;IACb,OAAO,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EACnC,CAAC;EAED,gBAAgB;EAEhB,+BAA+B,CAAC,CAAwC;IACtE,IAAI,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,KAAK,CAAC,EAAE;MACxD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACpB;EACH,CAAC;EAGD,gCAAgC,CAAC,CAAyC;IACxE,IAAI,CAAC,MAAM,GAAG,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC,QAAQ,CACrF,CAAC,CAAC,MAAM,CAAC,WAAW,CACrB,CAAC;EACJ,CAAC;EAOD,gBAAgB;IACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;EAC9B,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI,IACH,KAAK,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,IACrD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,EACpC,EAAE,IAED,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAC5B,WAAK,KAAK,EAAC,cAAc;MACvB,wBAAkB,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,GAAI,CACtE,CACP,CAAC,CAAC,CAAC,CACF,WAAK,KAAK,EAAC,YAAY;MACrB,uBACE,QAAQ,EAAC,QAAQ,EACjB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,oBAAoB,EAChE,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,EACjD,eAAe,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,eAAe;QAEpD,8BAAU,KAAK,EAAC,mBAAmB,IAAK,IAAI,CAAC,WAAW,IAAE,OAAO,EAAC,EAAE,IAAG;QACvE,eAAS,KAAK,EAAC,0BAA0B,EAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAI,CACjD,CACd,CACP,CACI,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AAvDC;EADC,OAAO,CAAC,OAAO,CAAC;8CAGhB","sourcesContent":["import { Component, Host, h, Prop, State, Listen } from '@stencil/core';\nimport { Memoize, parseIfString } from '@springbokagency/stencil-base';\nimport { IconName } from '../../atoms/icon/icon.types';\nimport { BsImage } from '../../atoms/image/image';\nimport { YoutubeControlClickEvent } from '../youtube-control/youtube-control.types';\nimport { YoutubeControlUpdateEvent } from '../../organisms/youtube-video/youtube-video.types';\nimport { PlayerState } from '../../organisms/image-carousel/image-carousel.types';\n\n/**\n * Video card component.\n */\n@Component({\n  tag: 'bs-video-card',\n  styleUrl: 'video-card.scss',\n  shadow: true,\n})\nexport class BsVideoCard {\n  /** Stages */\n  @State() active: boolean = false;\n\n  /** Props */\n  /**\n   * The youtube video ID.\n   */\n  @Prop() videoId!: string;\n\n  /**\n   * Should the video be muted initially?\n   */\n  @Prop() mute?: boolean = false;\n\n  /**\n   * Should the player be loaded inline?\n   */\n  @Prop() inline?: boolean = false;\n\n  /**\n   * Should the player start automatically when the page is loaded?\n   */\n  @Prop() autoplay?: boolean = false;\n\n  /**\n   * The image displayed on the card.\n   */\n  @Prop() image: BsImage | string;\n\n  @Memoize('image')\n  get parsedImage(): BsImage {\n    return parseIfString(this.image);\n  }\n\n  /** Listeners */\n  @Listen('bsYoutubeControllerClick', { target: 'window' })\n  bsYoutubeControllerClickHandler(e: CustomEvent<YoutubeControlClickEvent>) {\n    if (this.videoId === e.detail.id && e.detail.value === 1) {\n      this.active = true;\n    }\n  }\n\n  @Listen('bsYoutubeControllerUpdate', { target: 'window' })\n  bsYoutubeControllerUpdateHandler(e: CustomEvent<YoutubeControlUpdateEvent>) {\n    this.active = [PlayerState.PLAYING, PlayerState.PAUSED, PlayerState.BUFFERING].includes(\n      e.detail.playerState\n    );\n  }\n\n  /** Methods */\n  private handlePlayVideo = () => {\n    this.active = true;\n  };\n\n  componentDidLoad() {\n    this.active = this.autoplay;\n  }\n\n  render() {\n    return (\n      <Host\n        class={`${this.parsedImage.cover ? 'is-background' : ''} ${\n          this.autoplay ? 'is-autoplayed' : ''\n        }`}\n      >\n        {this.inline && this.active ? (\n          <div class=\"inline-video\">\n            <bs-youtube-video videoId={this.videoId} mute={this.mute} inline={true} />\n          </div>\n        ) : (\n          <div class=\"video-card\">\n            <bs-click-action\n              tagClass=\"button\"\n              name={this.inline ? 'open-youtube-inline' : 'open-youtube-modal'}\n              value={{ videoId: this.videoId, mute: this.mute }}\n              onBsClickAction={this.inline && this.handlePlayVideo}\n            >\n              <bs-image class=\"youtube-thumbnail\" {...this.parsedImage} caption=\"\" />\n              <bs-icon class=\"youtube-thumbnail-button\" name={IconName.Play} />\n            </bs-click-action>\n          </div>\n        )}\n      </Host>\n    );\n  }\n}\n"]}