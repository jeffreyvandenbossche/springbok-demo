{"version":3,"file":"experience-zone-screen.js","sourceRoot":"","sources":["../../../../src/components/molecules/experience-zone-screen/experience-zone-screen.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAgB,MAAM,eAAe,CAAC;AACrF,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AAChF,OAAO,EAEL,oBAAoB,GACrB,MAAM,0CAA0C,CAAC;AAClD,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAGlE;;GAEG;AAMH,MAAM,OAAO,sBAAsB;;kBAEN,KAAK;;;;;EAkBhC,IAAI,gBAAgB;IAClB,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;MACjC,OAAO,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACvC;IAED,OAAO,EAAE,CAAC;EACZ,CAAC;EAMD,eAAe;EAEf,kBAAkB,CAAC,QAAiB;IAClC,IAAI,IAAI,CAAC,MAAM,KAAK,oBAAoB,CAAC,KAAK,EAAE;MAC9C,MAAM,OAAO,GACX,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,eAAe,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;MAE5F,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC9F;EACH,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,WAAK,KAAK,EAAC,wBAAwB;QACjC,WAAK,KAAK,EAAE,kBAAkB,IAAI,CAAC,MAAM,EAAE,IACxC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC;UAC7B,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CACtC,WAAK,KAAK,EAAE,aAAa;YACvB,YAAM,IAAI,EAAE,QAAQ,CAAC,EAAE,GAAS,CAC5B,CACP,CAAC;UACJ,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;YACtC,MAAM,GAAG,GAAG,SAAS,CAAC,GAAU,CAAC;YAEjC,OAAO,CACL,WAAK,KAAK,EAAE,eAAe,GAAG,SAAS;cACrC,EAAC,GAAG,oBAAK,SAAS,CAAC,IAAI,EAAI,CACvB,CACP,CAAC;UACJ,CAAC,CAAC,CACF;QACL,IAAI,CAAC,UAAU,IAAI,CAClB,oBAAc,SAAS,EAAE,IAAI;UAC3B,eAAS,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,OAAO,GAAI,CACrE,CAChB,CACG,CACD,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AArDC;EADC,OAAO,CAAC,YAAY,CAAC;8DAOrB","sourcesContent":["import { Component, Host, h, Prop, Watch, Event, EventEmitter } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport {\n  ExperienceZoneComponent,\n  ExperienceZoneLayout,\n} from '../experience-zone/experience-zone.types';\nimport { TextColor, TextSize } from '../../atoms/text/text.types';\nimport { YoutubeControlClickEvent } from '../youtube-control/youtube-control.types';\n\n/**\n * Experience Zone screen component.\n */\n@Component({\n  tag: 'bs-experience-zone-screen',\n  styleUrl: 'experience-zone-screen.scss',\n  shadow: true,\n})\nexport class BsExperienceZoneScreen {\n  /** Is this screen currently active? */\n  @Prop() active?: boolean = false;\n\n  /**\n   * The Experience Zone screen layout name.\n   */\n  @Prop() layout!: ExperienceZoneLayout;\n\n  /**\n   * The Experience Zone screen disclaimer.\n   */\n  @Prop() disclaimer?: string;\n\n  /**\n   * The Experience Zone card image.\n   */\n  @Prop() components?: ExperienceZoneComponent[] | string;\n\n  @Memoize('components')\n  get parsedComponents(): ExperienceZoneComponent[] {\n    if (this.components !== undefined) {\n      return parseIfString(this.components);\n    }\n\n    return [];\n  }\n\n  /** Events */\n  /** Emits youtube control event action: 'play' */\n  @Event() bsYoutubeControllerClick: EventEmitter<YoutubeControlClickEvent>;\n\n  /** Watchers */\n  @Watch('active')\n  handleActiveChange(isActive: boolean) {\n    if (this.layout === ExperienceZoneLayout.Video) {\n      const videoId =\n        this.parsedComponents[0].tag === 'bs-video-card' && this.parsedComponents[0].data.videoId;\n\n      this.bsYoutubeControllerClick.emit({ id: videoId, action: 'play', value: isActive ? 1 : 0 });\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"experience-zone-screen\">\n          <div class={`screen screen--${this.layout}`}>\n            {isEmpty(this.parsedComponents)\n              ? Array.from(Array(3)).map((_value, i) => (\n                  <div class={`screen-item`}>\n                    <slot name={`item-${i}`}></slot>\n                  </div>\n                ))\n              : this.parsedComponents.map((component) => {\n                  const Tag = component.tag as any;\n\n                  return (\n                    <div class={`screen-item ${Tag}-screen`}>\n                      <Tag {...component.data} />\n                    </div>\n                  );\n                })}\n          </div>\n          {this.disclaimer && (\n            <bs-container contained={true}>\n              <bs-text text={this.disclaimer} size={TextSize.Small} color={TextColor.Default} />\n            </bs-container>\n          )}\n        </div>\n      </Host>\n    );\n  }\n}\n"]}