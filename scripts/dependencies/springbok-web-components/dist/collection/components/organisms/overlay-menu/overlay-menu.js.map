{"version":3,"file":"overlay-menu.js","sourceRoot":"","sources":["../../../../src/components/organisms/overlay-menu/overlay-menu.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Prop, State, Listen } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { IconName } from '../../atoms/icon/icon.types';\nimport { BaseModalId } from '../base-modal/base-modal.types';\nimport { HeaderNavigation } from './overlay-menu.types';\nimport { Breakpoint, compareBreakpoint } from '../../../utils/breakpoints';\n\n/**\n * Overlay menu component.\n */\n@Component({\n  tag: 'bs-overlay-menu',\n  styleUrl: 'overlay-menu.scss',\n  shadow: false, // no shadow DOM to make focus-trap work with slots\n})\nexport class BsOverlayMenu {\n  private modalRef: HTMLBsBaseModalElement;\n\n  private modalId: BaseModalId = BaseModalId.OverlayMenu;\n\n  @State() isClosing: boolean = false;\n\n  /**\n   * The header navigation data.\n   */\n  @Prop() headerNavigation: HeaderNavigation | string;\n\n  @Memoize('headerNavigation')\n  get parsedHeaderNavigation(): HeaderNavigation {\n    return parseIfString(this.headerNavigation);\n  }\n\n  /**\n   * Events\n   */\n  @Listen('bsModalIsClosing')\n  bsModalIsClosingHandler(e: CustomEvent) {\n    if (e.detail.modalId === this.modalId) {\n      this.isClosing = true;\n    }\n  }\n\n  /**\n   * Methods\n   */\n  private handleCloseButtonClick = () => {\n    this.modalRef.close();\n  };\n\n  render() {\n    return (\n      <Host>\n        <bs-base-modal\n          class=\"base-modal\"\n          ref={(el) => {\n            this.modalRef = el;\n          }}\n          modalId={this.modalId}\n          transitionType=\"fade\"\n        >\n          <div class=\"overlay-menu\">\n            <div class={`overlay-menu__container ${this.isClosing ? 'is-closing' : ''}`}>\n              {/* Menu head */}\n              <div class=\"overlay-menu__head\">\n                {/* Logo */}\n                {compareBreakpoint('max', Breakpoint.md) ? (\n                  <bs-image\n                    class=\"overlay-menu__logo\"\n                    {...this.parsedHeaderNavigation.mobileMainLogo}\n                    caption=\"\"\n                  />\n                ) : (\n                  <bs-image\n                    class=\"overlay-menu__logo\"\n                    {...this.parsedHeaderNavigation.mainLogo}\n                    caption=\"\"\n                  />\n                )}\n\n                {/* Close button */}\n                <button\n                  class=\"overlay-menu__close-button\"\n                  aria-label=\"Close\"\n                  onClick={this.handleCloseButtonClick.bind(this)}\n                >\n                  <bs-icon name={IconName.Close} />\n                </button>\n              </div>\n\n              {/* Content */}\n              <div class=\"overlay-menu__content\">\n                <bs-accordion>\n                  {/* Secondary navigation */}\n                  {this.parsedHeaderNavigation.navigation.secondary &&\n                    this.parsedHeaderNavigation.navigation.secondary.map((item, index) => (\n                      <bs-click-action\n                        slot=\"accordion-item\"\n                        tagClass=\"overlay-menu__link\"\n                        href={isEmpty(item.children) ? item.href : ''}\n                        target={item.target}\n                        disabled={!isEmpty(item.children)}\n                      >\n                        <bs-accordion-item\n                          identifier={`primary-navigation-item-${index}`}\n                          accordion-item-title={item.title}\n                          expandable={Boolean(item.children && item.children.length > 0)}\n                        >\n                          <bs-accordion slot=\"accordion-content\">\n                            {item.children &&\n                              item.children.map((child, childIndex) => (\n                                <bs-click-action\n                                  slot=\"accordion-item\"\n                                  class=\"overlay-menu__link\"\n                                  tagClass=\"overlay-menu__link\"\n                                  target={item.target}\n                                  href={isEmpty(child.children) ? child.href : ''}\n                                  disabled={!isEmpty(child.children)}\n                                >\n                                  <div class=\"overlay-menu__thumbnail-item\">\n                                    <bs-image {...child.thumbnail} caption=\"\" />\n                                    <bs-accordion-item\n                                      identifier={`primary-navigation-child-item-${childIndex}`}\n                                      accordion-item-title={child.title}\n                                      expandable={Boolean(\n                                        child.children && child.children.length > 0\n                                      )}\n                                    />\n                                  </div>\n                                </bs-click-action>\n                              ))}\n                          </bs-accordion>\n                        </bs-accordion-item>\n                      </bs-click-action>\n                    ))}\n                  {/* Primary navigation */}\n                  {this.parsedHeaderNavigation.navigation.primary &&\n                    this.parsedHeaderNavigation.navigation.primary.map((item, index) => (\n                      <bs-click-action\n                        slot=\"accordion-item\"\n                        tagClass=\"overlay-menu__link\"\n                        href={isEmpty(item.children) ? item.href : ''}\n                        target={item.target}\n                        disabled={!isEmpty(item.children)}\n                      >\n                        <bs-accordion-item\n                          identifier={`secondary-navigation-item-${index}`}\n                          accordion-item-title={item.title}\n                          expandable={Boolean(item.children && item.children.length > 0)}\n                        >\n                          <bs-accordion\n                            class=\"overlay-menu__accordion-child\"\n                            slot=\"accordion-content\"\n                          >\n                            {item.children &&\n                              item.children.map((child, childIndex) => (\n                                <bs-click-action\n                                  slot=\"accordion-item\"\n                                  tagClass=\"overlay-menu__link\"\n                                  href={isEmpty(child.children) ? child.href : ''}\n                                  target={item.target}\n                                  disabled={!isEmpty(item.children)}\n                                >\n                                  <bs-accordion-item\n                                    identifier={`primary-navigation-child-item-${childIndex}`}\n                                    accordion-item-title={child.title}\n                                    expandable={Boolean(\n                                      child.children && child.children.length > 0\n                                    )}\n                                  />\n                                </bs-click-action>\n                              ))}\n                          </bs-accordion>\n                        </bs-accordion-item>\n                      </bs-click-action>\n                    ))}\n                </bs-accordion>\n\n                {/* Sticky CTA */}\n                {this.parsedHeaderNavigation.stickyButton &&\n                  this.parsedHeaderNavigation.stickyButton.text && (\n                    <bs-button\n                      {...this.parsedHeaderNavigation.stickyButton}\n                      isFullWidth={true}\n                      iconRight={IconName.ArrowForward}\n                    />\n                  )}\n\n                {/* Product slider */}\n                {this.parsedHeaderNavigation.navigation.sliderItems && (\n                  <bs-slider class=\"overlay-menu__slider\">\n                    {this.parsedHeaderNavigation.navigation.sliderItems.map((item) => (\n                      <bs-click-action\n                        class=\"overlay-menu__slider-item\"\n                        slot=\"slider-item\"\n                        href={item.href}\n                        target={item.target}\n                      >\n                        <bs-product-card\n                          card-image={JSON.stringify(item.thumbnail)}\n                          card-title={item.title}\n                          card-text={item.description}\n                        />\n                      </bs-click-action>\n                    ))}\n                  </bs-slider>\n                )}\n              </div>\n            </div>\n          </div>\n        </bs-base-modal>\n      </Host>\n    );\n  }\n}\n"]}