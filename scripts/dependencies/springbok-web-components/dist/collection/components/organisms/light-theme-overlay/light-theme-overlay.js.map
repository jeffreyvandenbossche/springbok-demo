{"version":3,"file":"light-theme-overlay.js","sourceRoot":"","sources":["../../../../src/components/organisms/light-theme-overlay/light-theme-overlay.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,WAAW,EAAE,MAAM,gCAAgC,CAAC;AAE7D;;GAEG;AAMH,MAAM,OAAO,cAAc;;mBAQG,KAAK;;EAEjC,cAAc;EACd;;KAEG;EAEH,KAAK,CAAC,YAAY;IAChB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;EACxB,CAAC;EAED;;KAEG;EAEH,KAAK,CAAC,aAAa;IACjB,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;EAChC,CAAC;EAED;;KAEG;EAEH,KAAK,CAAC,SAAS;IACb,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;EAC5B,CAAC;EAED;;KAEG;EAEH,KAAK,CAAC,SAAS;IACb,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;EAC9B,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,qBACE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE;UACV,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACrB,CAAC,EACD,OAAO,EAAE,WAAW,CAAC,KAAK,EAC1B,cAAc,EAAC,MAAM;QAErB,WAAK,KAAK,EAAC,eAAe;UACxB,WAAK,KAAK,EAAC,wBAAwB;YAEjC,oBAAc,KAAK,EAAC,qBAAqB,EAAC,SAAS,EAAE,IAAI;cACvD,uBACE,IAAI,EAAC,qBAAqB,EAC1B,QAAQ,EAAC,2BAA2B,EACpC,eAAe,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;gBAE7C,eAAS,IAAI,EAAE,QAAQ,CAAC,KAAK,GAAI,CACjB,CACL;YAGf,WAAK,KAAK,EAAC,qBAAqB;cAC7B,IAAI,CAAC,OAAO,IAAI,CACf,uBACE,IAAI,EAAC,gBAAgB,EACrB,QAAQ,EAAC,yEAAyE,EAClF,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;gBAE9C,eAAS,IAAI,EAAE,QAAQ,CAAC,YAAY,GAAI,CACxB,CACnB;cACD,oBAAc,SAAS,EAAE,IAAI;gBAC3B,YAAM,IAAI,EAAC,OAAO,GAAQ,CACb;cACd,IAAI,CAAC,OAAO,IAAI,CACf,uBACE,IAAI,EAAC,YAAY,EACjB,QAAQ,EAAC,qEAAqE,EAC9E,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;gBAE1C,eAAS,IAAI,EAAE,QAAQ,CAAC,YAAY,GAAI,CACxB,CACnB,CACG;YAGN,oBAAc,KAAK,EAAC,uBAAuB,EAAC,SAAS,EAAE,IAAI,GAAiB,CACxE,CACF,CACQ,CACX,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, Method, Prop, h } from '@stencil/core';\nimport { IconName } from '../../atoms/icon/icon.types';\nimport { BaseModalId } from '../base-modal/base-modal.types';\n\n/**\n * Lark-theme overlay component.\n */\n@Component({\n  tag: 'bs-light-overlay',\n  styleUrl: 'light-theme-overlay.scss',\n  shadow: false, // no shadow DOM to make focus-trap work with slots\n})\nexport class BsLightOverlay {\n  private modalRef: HTMLBsBaseModalElement;\n\n  /** Props */\n\n  /**\n   * Does the content contain multiple screens?\n   */\n  @Prop() screens?: boolean = false;\n\n  /** Methods */\n  /**\n   * This method triggers the close method on the modal.\n   */\n  @Method()\n  async closeOverlay() {\n    this.modalRef.close();\n  }\n\n  /**\n   * This method triggers the previous slide method on the modal.\n   */\n  @Method()\n  async previousSlide() {\n    this.modalRef.previousSlide();\n  }\n\n  /**\n   * This method triggers the next slide method on the modal.\n   */\n  @Method()\n  async nextSlide() {\n    this.modalRef.nextSlide();\n  }\n\n  /**\n   * This method triggers the handle focus method on the modal.\n   */\n  @Method()\n  async focusTrap() {\n    this.modalRef.handleFocus();\n  }\n\n  render() {\n    return (\n      <Host>\n        <bs-base-modal\n          ref={(el) => {\n            this.modalRef = el;\n          }}\n          modalId={BaseModalId.Media}\n          transitionType=\"fade\"\n        >\n          <div class=\"light-overlay\">\n            <div class=\"light-overlay__content\">\n              {/* Head */}\n              <bs-container class=\"light-overlay__head\" contained={true}>\n                <bs-click-action\n                  name=\"close-light-overlay\"\n                  tagClass=\"light-overlay__close-icon\"\n                  onBsClickAction={this.closeOverlay.bind(this)}\n                >\n                  <bs-icon name={IconName.Close} />\n                </bs-click-action>\n              </bs-container>\n\n              {/* Body */}\n              <div class=\"light-overlay__body\">\n                {this.screens && (\n                  <bs-click-action\n                    name=\"previous-media\"\n                    tagClass=\"light-overlay__navigation-icon light-overlay__navigation-icon--previous\"\n                    onBsClickAction={this.previousSlide.bind(this)}\n                  >\n                    <bs-icon name={IconName.CaretForward} />\n                  </bs-click-action>\n                )}\n                <bs-container contained={true}>\n                  <slot name=\"media\"></slot>\n                </bs-container>\n                {this.screens && (\n                  <bs-click-action\n                    name=\"next-media\"\n                    tagClass=\"light-overlay__navigation-icon light-overlay__navigation-icon--next\"\n                    onBsClickAction={this.nextSlide.bind(this)}\n                  >\n                    <bs-icon name={IconName.CaretForward} />\n                  </bs-click-action>\n                )}\n              </div>\n\n              {/* Footer */}\n              <bs-container class=\"light-overlay__footer\" contained={true}></bs-container>\n            </div>\n          </div>\n        </bs-base-modal>\n      </Host>\n    );\n  }\n}\n"]}