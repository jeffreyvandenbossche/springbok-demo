{"version":3,"file":"dark-theme-overlay.js","sourceRoot":"","sources":["../../../../src/components/organisms/dark-theme-overlay/dark-theme-overlay.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, Listen, Method, Prop, State, h } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { IconName } from '../../atoms/icon/icon.types';\nimport { BaseModalId } from '../base-modal/base-modal.types';\nimport { BsImage } from '../../atoms/image/image';\nimport { Breakpoint, compareBreakpoint } from '../../../utils/breakpoints';\nimport { throttle } from '../../../utils/throttle';\n\n/**\n * Dark-theme overlay component.\n */\n@Component({\n  tag: 'bs-dark-overlay',\n  styleUrl: 'dark-theme-overlay.scss',\n  shadow: false, // no shadow DOM to make focus-trap work with slots\n})\nexport class BsDarkOverlay {\n  private modalRef: HTMLBsBaseModalElement;\n\n  /** States */\n  @State() isMobile: boolean = compareBreakpoint('max', Breakpoint.lg);\n\n  /** Props */\n  /**\n   * The title of the carousel displayed in the footer.\n   */\n  @Prop() mainTitle?: string;\n\n  /**\n   * Does the content contain multiple screens?\n   */\n  @Prop() screens?: boolean = false;\n\n  /**\n   * The logo to be displayed in the footer.\n   */\n  @Prop() logo: BsImage | string;\n\n  @Memoize('logo')\n  get parsedLogo(): BsImage {\n    return parseIfString(this.logo);\n  }\n\n  /** Listeners */\n  @Listen('resize', { target: 'window' })\n  handleScreenResized() {\n    this.throttleMethod();\n  }\n\n  /** Methods */\n  private onResize = () => {\n    this.isMobile = compareBreakpoint('max', Breakpoint.lg);\n  };\n\n  private throttleMethod = throttle(this.onResize, 1000);\n\n  /**\n   * This method triggers the close method on the modal.\n   */\n  @Method()\n  async closeOverlay() {\n    this.modalRef.close();\n  }\n\n  /**\n   * This method triggers the previous slide method on the modal.\n   */\n  @Method()\n  async previousSlide() {\n    this.modalRef.previousSlide();\n  }\n\n  /**\n   * This method triggers the next slide method on the modal.\n   */\n  @Method()\n  async nextSlide() {\n    this.modalRef.nextSlide();\n  }\n\n  /**\n   * This method triggers the handle focus method on the modal.\n   */\n  @Method()\n  async focusTrap() {\n    this.modalRef.handleFocus();\n  }\n\n  render() {\n    return (\n      <Host>\n        <bs-base-modal\n          ref={(el) => {\n            this.modalRef = el;\n          }}\n          modalId={BaseModalId.Media}\n          transitionType=\"fade\"\n        >\n          <div class=\"dark-overlay\">\n            <div class=\"dark-overlay__content\">\n              {/* Head */}\n              <bs-container class=\"dark-overlay__head\" contained={true}>\n                <bs-icon class=\"dark-overlay__brand-icon\" name={IconName.BMark} />\n                <bs-click-action\n                  name=\"close-dark-overlay\"\n                  tagClass=\"dark-overlay__close-icon\"\n                  onBsClickAction={this.closeOverlay.bind(this)}\n                >\n                  <bs-icon name={IconName.Close} />\n                </bs-click-action>\n              </bs-container>\n\n              {/* Body */}\n              <bs-container class=\"dark-overlay__body\" mobileFullWidth={true} contained={true}>\n                {this.screens && (\n                  <bs-click-action\n                    name=\"previous-media\"\n                    tagClass=\"dark-overlay__navigation-icon dark-overlay__navigation-icon--previous\"\n                    onBsClickAction={this.previousSlide.bind(this)}\n                    disabled={this.isMobile}\n                  >\n                    <bs-icon name={IconName.CaretForward} />\n                  </bs-click-action>\n                )}\n                <div class=\"media-container\">\n                  <slot name=\"media\"></slot>\n                </div>\n                {this.screens && (\n                  <bs-click-action\n                    name=\"next-media\"\n                    tagClass=\"dark-overlay__navigation-icon dark-overlay__navigation-icon--next\"\n                    onBsClickAction={this.nextSlide.bind(this)}\n                    disabled={this.isMobile}\n                  >\n                    <bs-icon name={IconName.CaretForward} />\n                  </bs-click-action>\n                )}\n              </bs-container>\n\n              {/* Footer */}\n              <bs-container class=\"dark-overlay__footer\" contained={true}>\n                <div class=\"footer-main\">\n                  {!isEmpty(this.mainTitle) && (\n                    <bs-text text={this.mainTitle} class=\"dark-overlay__title\" />\n                  )}\n                  <slot name=\"controller\" />\n                </div>\n                {!isEmpty(this.parsedLogo) && (\n                  <bs-image\n                    class=\"dark-overlay__logo\"\n                    src={this.parsedLogo.src}\n                    alt-text={this.parsedLogo.altText}\n                  />\n                )}\n              </bs-container>\n            </div>\n          </div>\n        </bs-base-modal>\n      </Host>\n    );\n  }\n}\n"]}