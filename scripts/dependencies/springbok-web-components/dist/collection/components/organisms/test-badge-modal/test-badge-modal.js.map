{"version":3,"file":"test-badge-modal.js","sourceRoot":"","sources":["../../../../src/components/organisms/test-badge-modal/test-badge-modal.tsx"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AACjE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AAGhF;;GAEG;AAMH,MAAM,OAAO,gBAAgB;;IAgC3B,cAAc;IACN,gBAAW,GAAG,CAAC,QAAgB,EAAE,EAAE;MACzC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC,EAAE;QACtD,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;OACvB;WAAM;QACL,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;OAChC;IACH,CAAC,CAAC;iBAhCsB,CAAC;;;EAUzB,IAAI,yBAAyB;IAC3B,OAAO,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;EACjD,CAAC;EAED,gBAAgB;EAEhB,wBAAwB;IACtB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;EACnC,CAAC;EAGD,4BAA4B;IAC1B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;EACnC,CAAC;EAWD,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,wBACE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE;UACV,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACvB,CAAC,EACD,OAAO,EAAE,IAAI,CAAC,yBAAyB,CAAC,MAAM,GAAG,CAAC;QAElD,4CACM,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,KAAK,CAAC,IAC9C,IAAI,EAAC,OAAO,IACU,CACP,CACd,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AAzCC;EADC,OAAO,CAAC,qBAAqB,CAAC;iEAG9B","sourcesContent":["import { Component, Host, Listen, Prop, h } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { BsTestBadgeDetail } from '../../molecules/test-badge-detail/test-badge-detail';\n\n/**\n * The test badge modal component.\n */\n@Component({\n  tag: 'bs-test-badge-modal',\n  styleUrl: 'test-badge-modal.scss',\n  shadow: true,\n})\nexport class BsTestBadgeModal {\n  private overlayRef: HTMLBsLightOverlayElement;\n\n  /** Props */\n  /**\n   * The index of the featured image.\n   */\n  @Prop() index: number = 0;\n\n  /**\n   * The list of images to be shown in the carousel.\n   */\n  @Prop() testBadgeCollection:\n    | (BsTestBadgeDetail & { cardTitle: string; cardText: string })[]\n    | string;\n\n  @Memoize('testBadgeCollection')\n  get parsedtestBadgeCollection(): (BsTestBadgeDetail & { cardTitle: string; cardText: string })[] {\n    return parseIfString(this.testBadgeCollection);\n  }\n\n  /** Listeners */\n  @Listen('bsNextSlideAction')\n  bsNextSlideActionHandler() {\n    this.updateIndex(this.index + 1);\n  }\n\n  @Listen('bsPreviousSlideAction')\n  bsPreviousSlideActionHandler() {\n    this.updateIndex(this.index - 1);\n  }\n\n  /** methods */\n  private updateIndex = (newIndex: number) => {\n    if (!isEmpty(this.parsedtestBadgeCollection[newIndex])) {\n      this.index = newIndex;\n    } else {\n      this.overlayRef.closeOverlay();\n    }\n  };\n\n  render() {\n    return (\n      <Host>\n        <bs-light-overlay\n          ref={(el) => {\n            this.overlayRef = el;\n          }}\n          screens={this.parsedtestBadgeCollection.length > 1}\n        >\n          <bs-test-badge-detail\n            {...this.parsedtestBadgeCollection[this.index]}\n            slot=\"media\"\n          ></bs-test-badge-detail>\n        </bs-light-overlay>\n      </Host>\n    );\n  }\n}\n"]}