{"version":3,"file":"slider.js","sourceRoot":"","sources":["../../../../src/components/organisms/slider/slider.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, State, Listen } from '@stencil/core';\nimport { isEmpty } from '@springbokagency/stencil-base';\nimport { IconName } from '../../atoms/icon/icon.types';\nimport { isInViewport } from '../../../utils/inViewport';\nimport { throttle } from '../../../utils/throttle';\n\n/**\n * The Slider component.\n */\n@Component({\n  tag: 'bs-slider',\n  styleUrl: 'slider.scss',\n  shadow: true,\n})\nexport class BsSlider {\n  private teaserSliderRef: HTMLDivElement;\n\n  private navigationRef: HTMLDivElement;\n\n  private itemsVisible: number;\n\n  /** States */\n  @State() slides: boolean = true;\n\n  /** listeners */\n  @Listen('resize', { target: 'window' })\n  handleScreenResized() {\n    this.throttleMethod();\n  }\n\n  /** Methods */\n  private onResize = () => {\n    this.slides = this.teaserSliderRef.scrollWidth > this.teaserSliderRef.offsetWidth;\n\n    if (this.slides) {\n      this.handleOverlay();\n\n      if (\n        this.teaserSliderRef.scrollLeft + this.teaserSliderRef.offsetWidth >=\n        this.teaserSliderRef.scrollWidth\n      ) {\n        this.navigationRef.style.maxWidth = '100%';\n      }\n    }\n  };\n\n  private throttleMethod = throttle(this.onResize, 1000);\n\n  private onPreviousSlide = () => {\n    const cards = this.getCards();\n\n    for (let i = 0; i < cards.length; i += 1) {\n      if (isInViewport(cards[i], this.teaserSliderRef)) {\n        this.teaserSliderRef.scrollTo({\n          behavior: 'smooth',\n          left: cards[i - 1] && cards[i - 1].offsetLeft,\n        });\n        break;\n      }\n    }\n\n    this.handleOverlay();\n  };\n\n  private onNextSlide = () => {\n    const cards = this.getCards();\n\n    for (let i = 0; i < cards.length; i += 1) {\n      if (isInViewport(cards[i], this.teaserSliderRef)) {\n        const offset =\n          cards[i].offsetLeft === this.teaserSliderRef.scrollLeft\n            ? cards[i + 1].offsetLeft\n            : cards[i].offsetLeft;\n\n        this.teaserSliderRef.scrollTo({\n          behavior: 'smooth',\n          left: offset,\n        });\n        break;\n      }\n    }\n  };\n\n  private handleOverlay = () => {\n    const cards = this.getCards();\n    const containerWidth = this.teaserSliderRef.clientWidth;\n\n    for (let i = 0; i < cards.length; i += 1) {\n      if (cards[i].offsetLeft + cards[i].offsetWidth > containerWidth) {\n        this.itemsVisible = i;\n        break;\n      }\n    }\n\n    this.navigationRef.style.maxWidth = `${\n      cards[this.itemsVisible - 1].getBoundingClientRect().right -\n      cards[0].getBoundingClientRect().left\n    }px`;\n  };\n\n  private getCards = (): HTMLElement[] => {\n    const slotElement = this.teaserSliderRef.querySelector(\n      'slot[name=\"slider-item\"]'\n    ) as HTMLSlotElement;\n\n    if (isEmpty(slotElement)) return [];\n\n    const assignedNodes = slotElement.assignedNodes();\n\n    return assignedNodes as HTMLElement[];\n  };\n\n  /** lifecycle hooks */\n  componentDidLoad() {\n    this.slides = this.teaserSliderRef.scrollWidth > this.teaserSliderRef.offsetWidth;\n\n    if (this.slides) {\n      this.handleOverlay();\n      this.teaserSliderRef.addEventListener(\n        'scroll',\n        throttle(() => {\n          if (\n            this.teaserSliderRef.scrollLeft + this.teaserSliderRef.offsetWidth >=\n            this.teaserSliderRef.scrollWidth\n          ) {\n            this.navigationRef.style.maxWidth = '100%';\n          } else {\n            this.handleOverlay();\n          }\n        }, 200)\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        {this.slides && (\n          <div class=\"overlay\">\n            <div\n              class=\"navigation\"\n              ref={(el) => {\n                this.navigationRef = el;\n              }}\n            >\n              <div class=\"navigation-back\">\n                <bs-click-action\n                  name=\"previous\"\n                  onBsClickAction={this.onPreviousSlide}\n                  tagClass=\"navigation-button\"\n                  ariaLabelText=\"backward\"\n                >\n                  <bs-icon name={IconName.ArrowBackward} />\n                </bs-click-action>\n              </div>\n              <div class=\"navigation-forward\">\n                <bs-click-action\n                  name=\"next\"\n                  onBsClickAction={this.onNextSlide}\n                  tagClass=\"navigation-button\"\n                  ariaLabelText=\"forward\"\n                >\n                  <bs-icon name={IconName.ArrowForward} />\n                </bs-click-action>\n              </div>\n            </div>\n            <div class=\"fade\" />\n          </div>\n        )}\n        <div\n          class=\"teaser-slider\"\n          ref={(el) => {\n            this.teaserSliderRef = el;\n          }}\n        >\n          <slot name=\"slider-item\" />\n        </div>\n      </Host>\n    );\n  }\n}\n"]}