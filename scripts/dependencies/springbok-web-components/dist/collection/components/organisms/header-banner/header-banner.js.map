{"version":3,"file":"header-banner.js","sourceRoot":"","sources":["../../../../src/components/organisms/header-banner/header-banner.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Prop, State, Listen } from '@stencil/core';\nimport { Memoize, isEmpty, parseIfString } from '@springbokagency/stencil-base';\nimport { BsTitle } from '../../atoms/title/title';\nimport { BsImage } from '../../atoms/image/image';\nimport { BsButton } from '../../atoms/button/button';\nimport { Variant } from './header-banner.types';\nimport { TitleSize, TitleTag } from '../../atoms/title/title.types';\nimport { Breakpoint, compareBreakpoint } from '../../../utils/breakpoints';\nimport { throttle } from '../../../utils/throttle';\nimport { BsVideoCard } from '../../molecules/video-card/video-card';\n\n/**\n * Header banner component.\n */\n@Component({\n  tag: 'bs-header-banner',\n  styleUrl: 'header-banner.scss',\n  shadow: true,\n})\nexport class BsHeaderBanner {\n  /** States */\n  @State() isMobile: boolean = compareBreakpoint('max', Breakpoint.md);\n\n  /**\n   * A (json)object string containing the bs-image elemement properties.\n   */\n  @Prop() image?: BsImage | string;\n\n  @Memoize('image')\n  get parsedImage(): BsImage {\n    return parseIfString(this.image);\n  }\n\n  /**\n   * A (json)object string containing the bs-image that is used for the logo elemement properties.\n   */\n  @Prop() logo?: BsImage | string;\n\n  @Memoize('logo')\n  get parsedLogo(): BsImage {\n    return parseIfString(this.logo);\n  }\n\n  /** A label to be displayed on the top if there is no logo. */\n  @Prop() label?: string;\n\n  /**\n   * A (json)object string containing the bs-title elemement properties.\n   */\n  @Prop() headerTitle: BsTitle | string;\n\n  @Memoize('headerTitle')\n  get parsedHeaderTitle(): BsTitle {\n    return parseIfString(this.headerTitle);\n  }\n\n  /** The header banner subtitle. */\n  @Prop() subtitle?: string;\n\n  /**\n   * A (json)object string containing the bs-button elemement properties.\n   */\n  @Prop() button?: BsButton | string;\n\n  @Memoize('button')\n  get parsedButton(): BsButton {\n    return parseIfString(this.button);\n  }\n\n  /** The header banner variant. Either 'image' or 'video'. */\n  @Prop() variant: Variant;\n\n  /**\n   * A (json)object string containing the bs-video-card elemement properties.\n   */\n  @Prop() video?: BsVideoCard | string;\n\n  @Memoize('video')\n  get parsedvideo(): BsVideoCard {\n    return parseIfString(this.video);\n  }\n\n  /** Listeners */\n  @Listen('resize', { target: 'window' })\n  handleScreenResized() {\n    this.throttleMethod();\n  }\n\n  /** Methods */\n  private onResize = () => {\n    this.isMobile = compareBreakpoint('max', Breakpoint.md);\n  };\n\n  private throttleMethod = throttle(this.onResize, 1000);\n\n  render() {\n    return (\n      <Host>\n        <header class=\"header-banner\">\n          <div class=\"content\">\n            {!isEmpty(this.parsedLogo) ? (\n              this.parsedLogo.src && <bs-image class=\"logo\" {...this.parsedLogo} />\n            ) : (\n              <bs-title\n                size={TitleSize.Head2}\n                tag={TitleTag.Span}\n                class=\"label\"\n                text={this.label}\n              />\n            )}\n            <div class=\"center\">\n              <bs-title class=\"title\" {...this.parsedHeaderTitle} />\n              {this.subtitle && <bs-text class=\"sub\" text={this.subtitle} />}\n              {this.parsedButton && this.parsedButton.text && (\n                <bs-button class=\"button\" {...this.parsedButton} isFullWidth={!!this.isMobile} />\n              )}\n            </div>\n          </div>\n          <div class=\"image\">\n            {this.variant === Variant.Image ? (\n              <bs-image {...this.parsedImage} caption=\"\" />\n            ) : (\n              <bs-video-card {...this.parsedvideo} />\n            )}\n          </div>\n        </header>\n      </Host>\n    );\n  }\n}\n"]}