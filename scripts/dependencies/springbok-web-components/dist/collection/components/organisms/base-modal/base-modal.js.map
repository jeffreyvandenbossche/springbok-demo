{"version":3,"file":"base-modal.js","sourceRoot":"","sources":["../../../../src/components/organisms/base-modal/base-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @stencil-community/required-jsdoc */\n\nimport { Component, Host, h, Element, Method, Prop, Event, EventEmitter } from '@stencil/core';\nimport { isEmpty } from '@springbokagency/stencil-base';\n\nimport { getActiveElement } from '../../../utils/getActiveElement';\nimport type { BaseModalId, TransitionType } from './base-modal.types';\nimport { deepQuerySelectorAll } from '../../../utils/deepQuerySelectorAll';\n\n/**\n * Component containing all the modals \"focus trap\" logic\n * This is a way to get around StencilJS not allowing class inheritance\n *\n * Each modal that requires focus trap functionality\n * needs to be nested inside this base component\n */\n@Component({\n  tag: 'bs-base-modal',\n  styleUrl: 'base-modal.scss',\n  shadow: true,\n})\nexport class BsBaseModal {\n  private previousFocusedElement: Element;\n\n  private focusableElements: Element[] | [];\n\n  private firstFocusableElement: Element;\n\n  private lastFocusableElement: Element;\n\n  @Element() el!: HTMLBsBaseModalElement;\n\n  /**\n   * Props\n   */\n\n  @Prop() modalId: BaseModalId;\n\n  @Prop() transitionType?: TransitionType = 'fade';\n\n  @Prop() modalCanBeClosed?: boolean = true; // usefull with nested modals\n\n  /**\n   * Events\n   */\n\n  @Event() bsModalIsClosing: EventEmitter<{ modalId: BaseModalId }>;\n\n  @Event() bsModalIsClosed: EventEmitter<{ modalId: BaseModalId }>;\n\n  @Event() bsNextSlideAction: EventEmitter;\n\n  @Event() bsPreviousSlideAction: EventEmitter;\n\n  /**\n   * Methods\n   */\n\n  @Method()\n  async close() {\n    if (!this.modalCanBeClosed) return;\n\n    this.bsModalIsClosing.emit({ modalId: this.modalId });\n\n    // animate modal closing\n    this.el.classList.add('is-closing');\n\n    // enable website scroll\n    document.documentElement.classList.remove('modal-is-open');\n\n    // when transition is finished, remove modal\n    this.el.addEventListener('animationend', () => {\n      this.bsModalIsClosed.emit({ modalId: this.modalId });\n    });\n  }\n\n  @Method()\n  async nextSlide() {\n    this.bsNextSlideAction.emit();\n  }\n\n  @Method()\n  async previousSlide() {\n    this.bsPreviousSlideAction.emit();\n  }\n\n  @Method()\n  async handleFocus() {\n    // focus trap\n    this.focusableElements = deepQuerySelectorAll(\n      'button:not([disabled]), a:not([disabled]), input:not([disabled]), [tabindex]:not([tabindex=\"-1\"]',\n      this.el.firstElementChild\n    );\n\n    [this.firstFocusableElement] = this.focusableElements;\n    this.lastFocusableElement = this.focusableElements[this.focusableElements.length - 1];\n\n    // focus modal's first element\n    (this.firstFocusableElement as HTMLElement)?.focus({ preventScroll: true });\n  }\n\n  private handleKeyPress(e: KeyboardEvent) {\n    // handle focus trap on \"Tab\" key press\n    if (e.key === 'Tab') this.handleFocusTrap(e);\n\n    // close modal on \"ESC\" key press\n    if (e.key === 'Escape') this.close();\n  }\n\n  private handleFocusTrap(e: KeyboardEvent) {\n    const shiftKeyIsPressed = e.shiftKey;\n\n    if (shiftKeyIsPressed) {\n      if (getActiveElement() === this.firstFocusableElement) {\n        // add focus for the last focusable element\n        (this.lastFocusableElement as HTMLElement).focus({ preventScroll: true });\n        e.preventDefault();\n      }\n    } else if (getActiveElement() === this.lastFocusableElement) {\n      // add focus for the last focusable element\n      (this.firstFocusableElement as HTMLElement).focus({ preventScroll: true });\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * Lifecycle Hooks\n   */\n\n  componentDidLoad() {\n    document.addEventListener('keydown', this.handleKeyPress.bind(this));\n\n    // disable website scroll\n    document.documentElement.classList.add('modal-is-open');\n\n    this.handleFocus();\n\n    // save last page focused element (before modal opening)\n    this.previousFocusedElement = getActiveElement();\n  }\n\n  disconnectedCallback() {\n    document.removeEventListener('keydown', this.handleKeyPress.bind(this));\n\n    // re-focus last main-content's focused element (before modal opening)\n    (this.previousFocusedElement as HTMLElement)?.focus();\n  }\n\n  render() {\n    return (\n      <Host\n        class={`${!isEmpty(this.transitionType) ? `has-${this.transitionType}-transition` : ''}`}\n      >\n        <slot />\n      </Host>\n    );\n  }\n}\n"]}