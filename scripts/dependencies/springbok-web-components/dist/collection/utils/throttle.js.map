{"version":3,"file":"throttle.js","sourceRoot":"","sources":["../../src/utils/throttle.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,QAAQ,CAAC,EAAY,EAAE,KAAa;EAClD,2BAA2B;EAC3B,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;EACtB,IAAI,SAAS,GAA0B,IAAI,CAAC;EAE5C,OAAO,GAAG,EAAE;IACV,IAAI,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE;MAClC,YAAY,CAAC,SAAS,CAAC,CAAC;MACxB,SAAS,GAAG,IAAI,CAAC;MAEjB,kDAAkD;MAClD,EAAE,EAAE,CAAC;MACL,qDAAqD;MACrD,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;KACnB;IAED,4EAA4E;IAC5E,IAAI,SAAS,KAAK,IAAI,EAAE;MACtB,SAAS,GAAG,UAAU,CAAC,GAAG,EAAE;QAC1B,EAAE,EAAE,CAAC;MACP,CAAC,EAAE,KAAK,GAAG,GAAG,CAAC,CAAC;KACjB;EACH,CAAC,CAAC;AACJ,CAAC","sourcesContent":["export function throttle(fn: Function, delay: number) {\n  // Capture the current time\n  let time = Date.now();\n  let timeoutId: NodeJS.Timeout | null = null;\n\n  return () => {\n    if (time + delay - Date.now() <= 0) {\n      clearTimeout(timeoutId);\n      timeoutId = null;\n\n      // Run the function we've passed to our throttler,\n      fn();\n      // Reset the `time` variable (so we can check again).\n      time = Date.now();\n    }\n\n    // Start a timer 100ms longer than the delay to run at the end of the event.\n    if (timeoutId === null) {\n      timeoutId = setTimeout(() => {\n        fn();\n      }, delay + 100);\n    }\n  };\n}\n"]}